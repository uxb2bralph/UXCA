@using System.IO
@using System.Linq.Expressions
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using ContractHome.Helper
@using ContractHome.Controllers
@using ContractHome.Models.DataEntity
@using ContractHome.Models.ViewModel
@using ContractHome.Models.Helper
@using CommonLib.Utility
@using Newtonsoft.Json

@{
  Layout = "~/Views/Shared/MasterPage.cshtml";

  ModelStateDictionary _modelState;
  ModelSource? models;
  Contract _model = (Contract)this.Model;

  models = (ModelSource?)ViewContext.HttpContext.Items["Models"];
  _modelState = (ModelStateDictionary)ViewBag.ModelState;
  QueryViewModel _viewModel = (QueryViewModel)ViewBag.ViewModel;

  var profile = await Context.GetUserAsync();
  var party = models!.GetTable<ContractingParty>()
  .Where(p => p.ContractID == _model.ContractID)
  .Where(p => models.GetTable<OrganizationUser>()
  .Where(o => o.UID == profile.UID).Any(o => o.CompanyID == p.CompanyID))
  .FirstOrDefault();


  var contractData = @Html.Raw(_model.JsonStringify());
  var partyData = @Html.Raw(party.JsonStringify());
  var pageCount = _model.GetPdfPageCount();
}
@{
  await Html.RenderPartialAsync("~/Views/Shared/Global/PageResource.cshtml");
}
<div id="AffixPdfSealImage" class="container-fluid py-4 pb-3">
  <section>
    <!-- 標題 - 甲方 / 乙方 -->
    <div class="d-flex justify-content-between align-items-center pe-4">
      <h4 class="mb-3 fw-bolder">
        {{ !partyData ? '建立新合約' : partyData.IsInitiator ? '起約人用印' : '簽約人用印'}}
      </h4>
      <div v-if="!partyData || partyData.IsInitiator" id="editTourbutton" class="mb-2 tooltip__wrapper ms-auto">
        <button type="button" class="px-1 btn btn-lg btn-warning rounded-pill opacity-75" style="width: 48px;"
          v-on:click="tourHandler">
          <i class="far fa-street-view"></i>
        </button>
        <div class="tooltip__text">導覽小幫手</div>
      </div>
    </div>
    <div class="row" style="height: calc(100vh - 162px);">
      <!-- 合約影像檔 -->
      <div class="col contract__wrapper">
        <div class="contract__arrow--left">
          <button type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="上一頁"
            class="btn btn-primary rounded-pill opacity-50"
            :class="{'btn-secondary opacity-25 disabled' : selectedPage === 1}" v-on:click="commitData('prev')">
            <i class="fas fa-chevron-left"></i>
          </button>
        </div>
        <div id="pdf__wrapper" class="card pdf__wrapper">
          @{
            await Html.RenderPartialAsync("~/Views/ContractConsole/Module/ShowContractImage.cshtml", _model);
          }
        </div>
        <div class="contract__arrow--right">
          <button type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="下一頁"
            class="btn btn-primary rounded-pill opacity-50"
            :class="{'btn-secondary opacity-25 disabled' : selectedPage === pageCount}" v-on:click="commitData('next')">
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      </div>
      <!-- 操作介面 -->
      <div style="width: 300px;">
        <div id="toAffix" class="row ps-2 pe-4">
          <form method="post" enctype="multipart/form-data">
            <!-- 起約人簽署設定 -->
            <div v-if="!partyData || partyData.IsInitiator">
              <template v-if="editStep === '1'">
                <div id="step1" class="card p-3 mb-3">
                  <h6 class="fw-bolder text-primary">
                    <i class="fad fa-user me-1"></i>
                    起約人簽署
                  </h6>
                  <p class="my-0 pt-2 pb-3 lh-sm"><small>若您在上傳合約前合約已經用印，請勾選「合約已用印」，並按「下一步」繼續下個流程。</small></p>
                  <div class="pb-1">
                    <input v-model="form.usedStamp" type="checkbox" class="form-check-input" id="isInitiatorStamp"
                      name="IgnoreSeal" />
                    <label class="form-check-label fw-bolder" for="isInitiatorStamp">
                      合約已用印
                    </label>
                  </div>
                </div>
                <div id="step3" class="card p-3 mb-3">
                  <h6 class="fw-bolder text-primary">
                    <i class="fad fa-tasks-alt me-1"></i>
                    簽署選項
                  </h6>
                  <div class="pb-3">
                    <label class="form-label fw-bolder" for="PageIndex">選擇簽署所在頁碼</label>
                    <select v-model="selectedPage" id="PageIndex" name="PageIndex" class="form-select form-select-sm"
                      v-on:change="pageHandler">
                      <option v-for="(page, index) in pageCount" :key="index" :value="page">第{{ page }}頁</option>
                    </select>
                  </div>
                  <div>
                    <button type="button" v-on:click="sealHandler" class="btn btn-brown w-100">
                      <i class="fas fa-stamp"></i> 簽名 或 蓋章
                    </button>
                    <button type="button" v-on:click="dateHandler" class="btn btn-brown w-100 mt-2">
                      <i class="fas fa-calendar-alt"></i> 日期
                    </button>
                    <button type="button" v-on:click="textHandler" class="btn btn-brown w-100 mt-2">
                      <i class="fas fa-text"></i> 文字
                    </button>
                  </div>
                </div>
              </template>
            </div>
            <!-- 簽署人設定 -->
            <div v-if="editStep === '2'" class="">
              <div id="step2" class="card p-3 mb-3">
                <h6 class="fw-bolder text-primary">
                  <i class="fad fa-users me-1"></i>
                  簽署人設定
                </h6>
                <div class="pb-3">
                  <button type="button" class="btn btn-success opacity-75 w-100" v-on:click="openContractorModal">
                    邀請簽署人
                  </button>
                  <p class="my-0 py-2 lh-sm">
                    <small>
                      上傳文件時有設定「多人簽署同一份文件」時，請依簽署人分別設定簽署區域。
                    </small>
                  </p>
                  <div class="d-grid gap-2">
                    <button v-for="(contractor, index) in form.Contractors" :key="index" class="bd-orange-100 disabled"
                      type="button">
                      <i class="fas fa-user me-1 opacity-50"></i>
                      <span class="fw-bolder">{{ contractor.Text }}</span>
                    </button>
                  </div>
                </div>
              </div>
              <div id="step3" class="card p-3 mb-3">
                <h6 class="fw-bolder text-primary">
                  <i class="fad fa-tasks-alt me-1"></i>
                  簽署選項
                </h6>
                <div class="pb-3">
                  <label class="form-label fw-bolder" for="PageIndex">選擇簽署所在頁碼</label>
                  <select v-model="selectedPage" id="PageIndex" name="PageIndex" class="form-select form-select-sm"
                    v-on:change="pageHandler">
                    <option v-for="(page, index) in pageCount" :key="index" :value="page">第{{ page }}頁</option>
                  </select>
                </div>
                <div>
                  <button type="button" v-on:click="setSealHandler('簽章')" class="btn btn-brown w-100">
                    <i class="fas fa-stamp"></i> 簽名 或 蓋章
                  </button>
                  <button type="button" v-on:click="dateHandler" class="btn btn-brown w-100 mt-2">
                    <i class="fas fa-calendar-alt"></i> 日期
                  </button>
                  <button type="button" v-on:click="textHandler" class="btn btn-brown w-100 mt-2">
                    <i class="fas fa-text"></i> 文字
                  </button>
                </div>
              </div>
            </div>
            <!-- 操作按鈕 -->
            <div id="step4" class="row g-2 my-0">
              <div class="col py-1">
                <button v-if="editStep === '1'" type="button" v-on:click="resetSignature"
                  class="btn btn-secondary opacity-50 w-100">
                  <i class="fas fa-eraser"></i> 清除用印
                </button>
                <button v-if="editStep === '2'" type="button" v-on:click="editStepHandler('1')"
                  class="btn btn-secondary opacity-50 w-100">
                  <i class="fas fa-reply"></i> 上一步
                </button>
              </div>
              <div v-if="!partyData || partyData.IsInitiator" class="col py-1">
                <button type="button" v-on:click="cancelHandler" class="btn btn-success opacity-75 w-100">
                  <i class="far fa-times"></i> 取消
                </button>
              </div>
              <div v-else class="col py-1">
                <button type="button" v-on:click="abortHandler" class="btn btn-danger opacity-75 w-100">
                  <i class="fas fa-share"></i> 退回合約
                </button>
              </div>
            </div>
            <div class="row g-2 my-0">
              <div v-if="editStep === '1'" class="col py-1">
                <button type="button" v-on:click="editStepHandler('2')"
                  class="btn btn-lg btn-primary opacity-75 w-100 fw-bolder">
                  下一步
                </button>
              </div>
            </div>
            <div v-if="editStep === '2'" class="row g-2 my-0">
              <div class="col py-1">
                <button type="button" v-on:click="commitContract"
                  class="btn btn-lg btn-primary opacity-75 w-100 fw-bolder">
                  送出合約
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>

  <!-- 新增 簽署人 Dialog -->
  <div class="modal fade" id="addContractorModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="addContractorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">管理簽署人</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="container">
            <form novalidate>
              <div class="row g-3">
                <div class="col-12 py-3">
                  <div id="addContract" class="tooltip__wrapper">
                    <button type="button" class="btn btn-success rounded-pill opacity-75" v-on:click="addContractor">
                      <i class="fas fa-user-plus"></i>
                    </button>
                    <div class="tooltip__text">新增簽署人</div>
                  </div>
                </div>
                <div class="col-md-12">
                  <div class="row g-3">
                    <div v-if="alertActived" class="mt-0 col-sm-12">
                      <div id="contractorAlert"
                        class="alert alert-danger d-flex align-items-center alert-dismissible fade"
                        :class="{'show' : alertActived}" role="alert">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
                          class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img"
                          aria-label="Warning:">
                          <path
                            d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                        </svg>
                        <div>
                          {{ contractorMag }}
                        </div>
                        <button type="button" class="btn-close btn-sm" data-bs-dismiss="alert" aria-label="Close"
                          v-on:click="alertActived = !alertActived"></button>
                      </div>
                    </div>
                    <template v-for="(item, index) in selectedContractor">
                      <div class="mt-0 mb-4 col-sm-12 col-md-3 input__height">
                        <div class="input-group">
                          <span class="tooltip__wrapper">
                            <button type="button" class="btn btn-outline-secondary opacity-75 rounded-0 rounded-start"
                              v-on:click="deleteContractor(item)">
                              <i class="fas fa-trash-alt"></i>
                            </button>
                            <div class="tooltip__text">刪除</div>
                          </span>
                          <select v-model="item.companyId" class="form-select"
                            v-on:change="selectCompany($event, item)">
                            <option value="0">請選擇簽署方公司名稱</option>
                            <template v-for="(item, index) in contractorAllList">
                              <option :value="item.id" :key="index">{{ item.text }}</option>
                            </template>
                          </select>
                        </div>
                        <div class="invalid-feedback">
                          {{ hasDuplicateContractor ? '簽署方公司名稱重複，請檢查' : '請選擇簽署方公司名稱' }}
                        </div>
                      </div>
                    </template>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary opacity-75" data-bs-dismiss="modal"
            v-on:click="initContract">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="contractorHandler">下一步</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 日期輸入 Dialog -->
  <div class="modal fade" id="dateModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="dateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">日期格式</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form method="post" enctype="multipart/form-data" class="pt-3 pb-3 text-center">
            <div class="row g-3">
              <div class="col-md-6 col-sm-12"
                v-on:click="useDateHandler(`中華民國 ${ rocYear } 年 ${ month } 月 ${ day } 日`)">
                <div class="card block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">中華民國 {{ rocYear }} 年 {{ month }} 月 {{ day }} 日</span>
                </div>
              </div>
              <div class="col-md-6 col-sm-12" v-on:click="useDateHandler(`${ year } / ${ month } / ${ day }`)">
                <div class="card block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">{{ year }} / {{ month }} / {{ day }}</span>
                </div>
              </div>
              <div class="col-md-6 col-sm-12" v-on:click="useDateHandler(`${ month } / ${ day } / ${ year }`)">
                <div class="card block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">{{ month }} / {{ day }} / {{ year }}</span>
                </div>
              </div>
              <div class="col-md-6 col-sm-12" v-on:click="useDateHandler(`${ day } / ${ month } / ${ year }`)">
                <div class="card block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">{{ day }} / {{ month }} / {{ year }}</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- 文字輸入 Dialog -->
  <div class="modal fade" id="textModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="textModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">文字</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body pb-0">
          <input type="text" v-model:trim="noteItem" id="noteItem" name="inputText" class="form-control"
            v-on:keyup="addNote">
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" id="noteItemBtn" class="btn btn-primary opacity-75"
            :class="{ 'invisible' : isNoteEmpty }" tabindex="-1" role="button" v-on:click="createVirtualTextArea">
            使用
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- 取消 Dialog -->
  <div class="modal fade" id="cancelModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="cancelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered ">
      <div class="modal-content">
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title" id="staticBackdropLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center h5 fw-bolder">確定取消本次新增？</div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary opacity-50" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="confirmCancel">確定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 退回 Dialog -->
  <div class="modal fade" id="abortModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="abortModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered ">
      <div class="modal-content">
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title" id="staticBackdropLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center h5 fw-bolder">合約退回後，資料將被清除，確定退回？</div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary opacity-50" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="abortContract">確定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- PDF 預覽 Dialog -->
  <div class="modal fade" id="pdfModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="pdfModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">合約預覽</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body pb-0">
          <!-- PDF 內嵌頁面 -->
          <div class="card pdf__wrapper">
            @{
              await Html.RenderPartialAsync("~/Views/ContractConsole/Module/ShowContractImage.cshtml", _model);
            }
          </div>
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  @{
    // 取得人員資料
    var userOrgItems = models.GetTable<OrganizationUser>().Where(u => u.UID == profile.UID);
  }
  // 取得文件 ID 加密
  const contractID = '@Html.Raw(_model!.ContractID.EncryptKey())';
  // 起約人資料清單
  const dataInitiator = @Html.Raw(userOrgItems.Select(u => new { id = u.CompanyID.EncryptKey(), text = u.Organization.CompanyName }).ToArray().JsonStringify());
  // 簽約人資料清單
  const contractorAllList = @Html.Raw(models.GetTable<Organization>().Where(o => !userOrgItems.Any(u => u.CompanyID == o.CompanyID)).Select(u => new { id = u.CompanyID.EncryptKey(), text = u.CompanyName }).ToArray().JsonStringify());
  // 取得上傳 PDF 總頁數
  const pageCount = @(pageCount);
  const contractData = @Html.Raw(contractData);
  const partyData = @Html.Raw(partyData);

  var app = new Vue({
    el: '#AffixPdfSealImage',
    data() {
      return {
        editStep: '1',
        contractData,
        partyData,
        dataInitiator,
        contractorAllList,
        pageCount,
        selectedPage: 1,
        noteItem: null,
        isNoteEmpty: true,
        hasDuplicateContractor: false,
        selectedContractor: [
          {
            companyId: "0",
          }
        ],
        form: {
          KeyID: null,
          EncUID: null,
          Initiator: null,
          Contractors: [],
          usedStamp: false,
        },
        alertActived: false,
        contractorMag: null,
        initSeal: {
          Id: null,
          MarginLeft: null,
          MarginTop: null,
          SealScale: null,
          Width: null,
          Height: null,
        },
        currentSeal: {},
        day: null,
        month: null,
        year: null,
        rocYear: null,
        scrolly: 0,
        scrollType: null,
      };
    },
    watch: {
      scrolly: {
        handler: function (newValue, oldValue) {
          // console.log({ newValue, oldValue }, this.scrollType);
          if (newValue > oldValue) {
            this.scrollType = 'scrollDown';
            return;
          }
          this.scrollType = 'scrollUp';
        },
        immediate: true,
      }
    },
    mounted() {
      this.init();
    },
    methods: {
      init() {
        this.form.KeyID = contractID;
        this.form.EncUID = getCookie('userID');
        this.getDate();
        this.initContract();
        // 若為第一次登入，顯示歡迎視窗並進入導覽流程
        // window.addEventListener('load', (event) => {
        //   if (!sessionStorage.getItem("isEditTour")) {
        //     // 初始化 網頁導覽
        //     const tourguide = new Tourguide({ steps });
        //     tourguide.start();
        //     sessionStorage.setItem("isEditTour", true);
        //   }
        // });
      },

      // 取的日期資料 
      getDate() {
        let objectDate = new Date();
        this.day = objectDate.getDate();
        this.month = objectDate.getMonth();
        this.year = objectDate.getFullYear();
        this.rocYear = this.year - 1911;
      },

      // 初始化簽署人表單
      initContract() {
        this.selectedContractor = [{
          companyId: "0",
        }];
        this.contractorMag = null;
        this.alertActived = false;
      },

      // 簽署步驟
      editStepHandler(step) {
        this.editStep = step;
      },

      // 開啟 簽署人設定 Modal
      openContractorModal() {
        $('#addContractorModal').modal('show');
      },

      // 選擇簽約方
      selectCompany(event, contratcor) {
        // 檢核欄位        
        this.hasDuplicateContractor = this.hasDuplicateValues(this.selectedContractor);
        console.log('aa', this.hasDuplicateContractor)
        if (contratcor.companyId === "0" || this.hasDuplicateContractor) {
          event.target.parentNode.classList.add('is-invalid');
          return;
        } else {
          event.target.parentNode.classList.remove('is-invalid');
        }
      },

      // 檢查是否重複
      hasDuplicateValues(arr) {
        let values = [];

        for (let i = 0; i < arr.length; i++) {
          let value = arr[i].companyId;
          if (values.includes(value)) {
            return true;
          }
          values.push(value);
        }

        return false;
      },

      // 新增簽署單位資料
      addContractor() {
        this.selectedContractor.push({
          companyId: "0",
        });
      },

      // 刪除簽署單位資料
      deleteContractor(obj) {
        const contractors = this.selectedContractor;
        if (contractors.length === 1) {
          this.contractorMag = '簽署單位至少要填一筆資料。';
          this.alertActived = true;
          return
        }
        this.selectedContractor = contractors.filter(item => item.companyId !== obj.companyId);
      },

      // 選擇簽署人
      contractorHandler() {
        // 檢查簽約方資料有無填寫
        const filterEmpty = this.selectedContractor.filter(item => item.companyId === '0').length > 0;
        if (filterEmpty) {
          this.contractorMag = '簽署單位有未選取簽署人，請檢查。';
          this.alertActived = true;
          return
        }
        if (this.hasDuplicateContractor) return;
        const contractorArray = this.selectedContractor.map(item => item.companyId);
        const contractorFilter = this.contractorAllList.filter(item => contractorArray.includes(item.id));
        console.log({ contractorArray, contractorFilter })
        this.form.Contractors = [];
        contractorFilter.forEach(item => {
          console.log({ item })
          this.form.Contractors.push({ Contractor: item.id, Text: item.text });
        });
        $('#addContractorModal').modal('hide');
      },

      // 編輯欄 選擇頁碼
      pageHandler() {
        loadContractPage(this.selectedPage - 1);
      },

      // 頁面 選擇頁碼
      commitData(step) {
        const currentPage = this.selectedPage;
        if (isNaN(currentPage)) {
          return;
        }
        if (step === 'next') {
          this.selectedPage = currentPage < this.pageCount ? this.selectedPage + 1 : this.selectedPage;
        } else {
          this.selectedPage = currentPage > 0 ? this.selectedPage - 1 : this.selectedPage;
        }
        loadContractPage(this.selectedPage - 1);
      },

      // 開啟印鑑 Modal
      sealHandler() {
        if ($('#sealModal').length > 0) {
          $('#sealModal').modal('show');
        } else {
          showLoading();
          $.ajax({
            type: 'POST',
            url: '@(Url.Action("ShowSealModal", "UserProfile"))',
            data: JSON.stringify({}),
            type: "POST",
            //dataType: "json",
            contentType: "application/json;charset=utf-8",
            success: function (data) {
              hideLoading();
              if ($.isPlainObject(data)) {
                if (data.result) {
                } else {
                  alertModal(data.message);
                }
              } else {
                $(data).appendTo($('body'));
              }
            },
            error: function (xhr, ajaxOptions, thrownError) {
              hideLoading();
              console.log(xhr.status);
              console.log(thrownError);
            }
          });
        }
      },
      // 開啟 日期輸入Modal
      dateHandler() {
        $('#dateModal').modal('show');
      },

      // 選擇日期格式
      useDateHandler(dateString) {
        $('#dateModal').modal('hide');
        // console.log('date:', dateString);
        this.createVirtualText(dateString);
      },

      // 開啟 文字輸入Modal
      textHandler() {
        $('#textModal').modal('show');
      },

      // 置入文字-顯示使用按鈕
      addNote() {
        // 有輸入文字才會顯示使用按鈕
        this.isNoteEmpty = this.noteItem.length === 0;
      },

      // 建立文字虛擬框
      createVirtualTextArea() {
        $('#textModal').modal('hide');
        this.createVirtualText(this.noteItem);
      },

      // 開啟 取消合約 Modal
      cancelHandler(msg) {
        $('#cancelModal').modal('show');
      },

      // 取消新增合約
      confirmCancel() {
        $('#cancelModal').modal('hide');
        this.cancelContract();
      },

      // 設定簽署人印鑑區塊
      setSealHandler(type) {
        this.currentSeal = { ...this.initSeal };
        const self = this;
        const contractArea = document.querySelector("#contractImg");
        const pdfWrapper = document.querySelector("#pdf__wrapper");

        // 產生一個虛擬 textBox
        const textBox = document.createElement("div");
        // id 動態產生
        const uuid = ui_uuid8();
        textBox.id = uuid;
        textBox.setAttribute('class', 'vmBox__wrapper');
        textBox.setAttribute('style', 'display: none;');
        contractArea.appendChild(textBox);
        // 產生文字內容並放到 textBox
        textBox.innerHTML = `
        <div class="vmBox__note">${type}</div>
        <div class="vmBox__subtext">指定位置點擊置入</div>`;
        //textBox.innerHTML = `
        //
        //<div id="scaleText-${uuid}" class="vmScale"></div>
        //<button id="delNote-${uuid}" class="btn btn-sm text-white vmDelete"><i class="far fa-times"></i></button>`;
        pdfWrapper.onscroll = function () {
          self.scrolly = pdfWrapper.scrollTop.toFixed(2);
          console.log('tscrollTop:', pdfWrapper.scrollTop.toFixed(2))
          //var scrolly = self.scrollType === 'scrollDown' ? self.scrolly : -self.scrolly;
        };
        //console.log({ scrolly })

        const itemBox = document.querySelector(`#${uuid}`);

        // 跟著滑鼠移動
        // 設定位置基準，不要離滑鼠太近，移動時會產生殘影
        contractArea.onmousemove = (ev) => {
          //ev.preventDefault();

          itemBox.style.left = ev.pageX - 330 + 'px';
  @* if (self.scrollType === 'scrollDown') {
            itemBox.style.top = `${ev.pageY - self.scrolly - 180}px`;
            } else if (self.scrollType === 'scrollUpn') {
            itemBox.style.top = `${ev.pageY + self.scrolly - 180}px`;
            } else { *@
            itemBox.style.top = `${ev.pageY - 180}px`;
  @* } *@

            itemBox.style.display = 'flex';
          //console.log('left', ev.offsetLeft, 'Top', ev.offsetTop, 'scrollY', self.scrolly)
          //itemBox.style.left = ev.offsetX - 10 + 'px';
          //itemBox.style.top = ev.offsetY - 10 + 'px';
          //itemBox.style.display = 'flex';
          //console.log('left', itemBox.pageX, 'left', itemBox.pageX)
          // 滑鼠移出文件範圍取消移動，防止移動過快觸發滑鼠移出事件，導致滑鼠移動事件失效
          pdfWrapper.onmouseleave = function () {
            itemBox.style.display = 'none';
          }

          pdfWrapper.onmousedown = () => {
            pdfWrapper.onmousemove = null;

            //itemBox.classList.add('vmBox__realBox')
            // 產生一個實體 textBox
            //const realBox = document.createElement("div");
            //realBox.id = uuid;
            //realBox.setAttribute('class', 'vmBox__wrapper');
            //realBox.setAttribute('style', `left: ${ itemBox.style.left }; top: ${ itemBox.style.top } `);
            //contractArea.appendChild(realBox);
            //textBox.remove();
            //
            //realBox.innerHTML = `
            //<div class="vmBox__note">${type}</div>
            //<div id="scaleText-${uuid}" class="vmScale"></div>
            //<button id="delNote-${uuid}" class="btn btn-sm text-white vmDelete"><i class="far fa-times"></i></button>`;
          }
        };


        // 滑鼠拖曳效果
  @* itemBox.onmousedown = (ev) => {
          this.dragHandler(ev, uuid, itemBox, contractArea);
          }; *@

          // 文字區塊縮放效果
  @* const scale = document.querySelector(`#scaleText-${uuid}`);
          scale.onmousedown = (ev) => {
          this.scaleHandler(ev, itemBox, textInput, contractArea);
          }; *@

          // 取消文字區塊
  @* const deleteNote = document.querySelector(`#delNote-${uuid}`);
          deleteNote.onmousedown = (ev) => {
          this.deleteHandler(ev, itemBox, contractArea);
          }; *@

          // 套用 - 文字區塊
  @* const useNote = document.querySelector(`#useNote-${uuid}`);
          useNote.onmousedown = (ev) => {
          this.useNoteHandler(ev, itemBox, contractArea, false);
          }; *@

          // 套用整份文件 - 文字區塊
  @* const useAllNote = document.querySelector(`#useAllNote-${uuid}`);
          useAllNote.onmousedown = (ev) => {
          this.useNoteHandler(ev, itemBox, contractArea, true);
          }; *@

          this.currentSeal.Id = uuid;
        this.currentSeal.SealScale = 100;
      },

      // 取消新增的合約
      cancelContract() {
        const contractID = `@Html.Raw(_model!.ContractID.EncryptKey())`;
        showLoading();
        $.post(
          '@Html.Raw(Url.Action("DeleteContract", "ContractConsole"))',
          { 'KeyID': contractID },
          function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
              if (data.result) {
                alertModal('合約已取消!!');
                window.location.href = '@(Url.Action("ListToStampIndex", "ContractConsole"))';
              } else {
                alertModal(data.message);
              }
            } else {
              $(data).appendTo($('body'));
            }
          });
      },

      // 開啟退回合約 Model
      abortHandler() {
        $('#abortModal').modal('show');
      },

      // 退回合約 
      abortContract() {
        $('#abortModal').modal('hide');
        const contractID = `@Html.Raw(_model!.ContractID.EncryptKey())`;
        showLoading();
        $.post(
          '@Html.Raw(Url.Action("AbortContract", "ContractConsole"))',
          { 'KeyID': contractID },
          function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
              if (data.result) {
                alertModal('合約已退回!!');
                window.location.href = '@(Url.Action("ListToStampIndex", "ContractConsole"))';
              } else {
                alertModal(data.message);
              }
              $('#contractImg').css(data);
            } else {
              $(data).appendTo($('body'));
            }
          });
      },

      // 導覽小幫手
      tourHandler() {
        // 初始化 網頁導覽
        const tourguide = new Tourguide({ steps });
        tourguide.start();
      },

      // 開啟預覽 Modal
      openPdfModal() {
        $('#pdfModal').modal('show');
      },

      // 送出合約
      commitContract() {
        const self = this;
        const viewModel = this.form;

        showLoading();
        $.ajax({
          type: 'POST',
          url: '@(Url.Action(party == null || party.IsInitiator == true ? "CommitContract" : "AcceptContract", "ContractConsole"))',
          data: JSON.stringify(viewModel),
          type: "POST",
          //dataType: "json",
          contentType: "application/json;charset=utf-8",
          success: function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
              if (data.result) {
                alertModal(`@(Html.Raw(party == null || party.IsInitiator == true ? "已建立新合約" : "合約已用印"))(${data.dataItem.contractNo})。`);
                setTimeout(() => {
                  window.location.href = '@(Url.Action("ListToStampIndex", "ContractConsole"))';
                }, 3000);
              } else {
                alertModal(data.message);
              }
            } else {
              $(data).appendTo($('body'));
            }
          },
          error: function (xhr, ajaxOptions, thrownError) {
            hideLoading();
            console.log(xhr.status);
            console.log(thrownError);
          }
        });
      },

      // 清除用印
      resetSignature() {
        clearErrors();
        const payload = {
          ...$global.viewModel,
          PageIndex: this.selectedPage - 1,
        };
        console.log('payload:', payload)
        $('form').ajaxForm({
          url: '@Html.Raw(Url.Action("ResetPdfSignature", "ContractConsole"))',
          data: payload,
          beforeSubmit: function () {
            showLoading();
          },
          success: function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
              if (data.result) {
                alertModal('已清除用印!!');
                loadContractPage(payload.PageIndex);
                this.currentSeal = { ...this.initSeal };
              } else {
                alertModal(data.message);
              }
            }
            else {
              $(data).appendTo($('body'));
            }
          },
          error: function (xhr, ajaxOptions, thrownError) {
            hideLoading();
            console.log(xhr.status);
            alertModal(thrownError);
          }
        }).submit();
      },

      // 虛擬文字框
      createVirtualText(string) {
        // $global.viewModel.SealScale = 100;
        // 未套用前一次只能新增一個虛擬框
        console.log('id', this.currentSeal.Id);
        if (this.currentSeal.Id) {
          const currentNote = document.querySelector(`#${this.currentSeal.Id}`);
          currentNote.remove();
        }
        this.currentSeal = { ...this.initSeal };
        const contractArea = document.querySelector("#contractImg");

        // 產生一個虛擬 textBox
        const textBox = document.createElement("div");
        // id 動態產生
        const uuid = ui_uuid8();
        textBox.id = uuid;
        textBox.setAttribute('class', 'vmNote');
        textBox.setAttribute('style', `top:calc(10px);left:calc((${contractArea.offsetWidth}px - 170px) / 2);`);
        document.querySelector("#contractImg").appendChild(textBox);
        // 產生文字內容並放到 textBox
        textBox.innerHTML = `
        <div id="note-${uuid}-text" class="note">${string}</div>
        <div id="scaleText-${uuid}" class="vmScale"></div>
        <button id="delNote-${uuid}" class="btn btn-sm text-white vmDelete"><i class="far fa-times"></i></button>
        <button id="useAllNote-${uuid}" class="btn btn-success opacity-75 btn-sm vmUseAll">套用文件</button>
        <button id="useNote-${uuid}" class="btn btn-success opacity-75 btn-sm vmUse">套用</button>`;

        const self = this;
        const note = document.querySelector(`#${uuid}`);
        const textInput = document.querySelector(`#note-${uuid}-text`);
        // textInput.style.left = `calc(100px)`;
        // textInput.style.top = `calc(10px)`;
        this.currentSeal.MarginTop = (note.offsetTop / 37.7).toFixed(2);
        this.currentSeal.MarginLeft = (note.offsetLeft / 37.7).toFixed(2);
        this.currentSeal.Width = 170;
        this.currentSeal.Height = 100;

        // 滑鼠拖曳效果
        note.onmousedown = (ev) => {
          this.dragHandler(ev, uuid, note, contractArea);
        };

        // 文字區塊縮放效果
        const scale = document.querySelector(`#scaleText-${uuid}`);
        scale.onmousedown = (ev) => {
          this.scaleHandler(ev, note, textInput, contractArea);
        };

        // 取消文字區塊
        const deleteNote = document.querySelector(`#delNote-${uuid}`);
        deleteNote.onmousedown = (ev) => {
          this.deleteHandler(ev, note, contractArea);
        };

        // 套用 - 文字區塊
        const useNote = document.querySelector(`#useNote-${uuid}`);
        useNote.onmousedown = (ev) => {
          this.useNoteHandler(ev, note, contractArea, false);
        };

        // 套用整份文件 - 文字區塊
        const useAllNote = document.querySelector(`#useAllNote-${uuid}`);
        useAllNote.onmousedown = (ev) => {
          this.useNoteHandler(ev, note, contractArea, true);
        };

        this.currentSeal.Id = uuid;
        this.currentSeal.SealScale = 100;
      },

      // 滑鼠拖曳效果
      dragHandler(ev, uuid, note, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻擋瀏覽器的預設行為
        oEvent.preventDefault();
        const disX = oEvent.clientX - note.offsetLeft;
        const disY = oEvent.clientY - note.offsetTop;
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          let x = ev.clientX - disX;
          let y = ev.clientY - disY;

          // 文字區塊移動時的邊界判斷-必須在文件內的範圍
          x = x <= 0 ? 0 : x;
          x = x >= contractArea.offsetWidth - note.offsetWidth ? contractArea.offsetWidth - note.offsetWidth : x;
          y = y <= 0 ? 0 : y;
          y = y >= contractArea.offsetHeight - note.offsetHeight ? contractArea.offsetHeight - note.offsetHeight : y;
          note.style.left = x + 'px';
          note.style.top = y + 'px';
          let MarginLeft = (x / 37.7).toFixed(2);
          let MarginTop = (y / 37.7).toFixed(2);
          // console.log('mx-左邊界(cm):', MarginLeft);
          // console.log('my-上邊界(cm):', MarginTop);
          self.currentSeal.MarginLeft = MarginLeft;
          self.currentSeal.MarginTop = MarginTop;
        }
        // 文字區塊移出文件範圍取消移動是,防止移動過快觸發滑鼠移出事件，導致滑鼠彈起事件失效
        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        // 署標彈起後停止移動
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 文字區塊縮放效果
      scaleHandler(ev, note, textInput, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        const pos = {
          'w': note.offsetWidth,
          'h': note.offsetHeight,
          'x': ev.clientX,
          'y': ev.clientY
        };
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          // 設置文字區塊的最小縮放為100*30
          let w = Math.max(160, ev.clientX - pos.x + pos.w);
          let h = Math.max(30, ev.clientY - pos.y + pos.h);
          const noteHeight = textInput.offsetHeight;

          // 設置文字區塊的最大寬高
          // w = w >= contractArea.offsetWidth - note.offsetLeft ? contractArea.offsetWidth - note.offsetLeft : w < 170 ? 170 : w;
          // h = h >= contractArea.offsetHeight - note.offsetTop ? contractArea.offsetHeight - note.offsetTop : h < noteHeight + 5 ? noteHeight + 15 : h;
          note.style.width = w + 'px';
          note.style.height = h + 'px';
          self.currentSeal.Width = w;
          self.currentSeal.Height = h;
        }
        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 取消文字區塊
      deleteHandler(ev, note, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        note.remove();

        self.currentSeal = { ...self.initSeal };
        self.noteItem = null;

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 套用文字區塊
      useNoteHandler(ev, note, contractArea, status) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        // 套用文字區塊
        self.commitNote(note.querySelector('.note').innerText, status);

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      unBinding(contractArea) {
        contractArea.onmousemove = null;
        contractArea.onmouseup = null;
      },

      // 儲存 套用文字區塊
      commitNote(note, doAllPages) {
        const self = this;
        clearErrors();
        const payload = {
          ...$global.viewModel,
          Note: note,
          DoAllPages: doAllPages || false,
          PageIndex: this.selectedPage - 1,
          MarginLeft: Number(this.currentSeal.MarginLeft),
          MarginTop: Number(this.currentSeal.MarginTop),
          Width: Number(this.currentSeal.Width),
          Height: Number(this.currentSeal.Height),
        }
        console.log('viewModel:', payload);
        showLoading();
        $.post('@Html.Raw(Url.Action("CommitPdfNote", "ContractConsole"))', payload, function (data) {
          hideLoading();
          console.log({ data });
          if ($.isPlainObject(data)) {
            if (data.result) {
              loadContractPage(payload.PageIndex);
              const currentNote = document.querySelector(`#${self.currentSeal.Id}`);
              currentNote.remove();

              self.currentSeal = { ...self.initSeal };
              self.noteItem = null;

            } else {
              alertModal(data.message);
            }
          } else {
            $(data).appendTo($('body'));
          }
        });
      },


    },
  });
</script>

<script>
  // 選擇印鑑
  function useSealHandler(sealID, id) {
    $('#sealModal').modal('hide');
    console.log({ sealID, id });

    $global.viewModel.SealID = sealID;
    const contractArea = document.querySelector("#contractImg");

    // 產生一個虛擬 sealBox
    const sealBox = document.createElement("div");
    // id 動態產生
    const uuid = ui_uuid8();
    sealBox.id = uuid;
    sealBox.setAttribute('class', 'vmSeal');
    sealBox.setAttribute('style', `top:calc(10px);left:calc((${contractArea.offsetWidth}px - 170px) / 2);`);
    document.querySelector("#contractImg").appendChild(sealBox);
    // 產生印章並放到 sealBox
    sealBox.innerHTML = `
    <img id="seal-${uuid}-img" class="sealimg h-100" src="${document.getElementById(id).getAttribute('src')}">
    <div id="scale-${uuid}" class="vmScale"></div>
    <button id="del-${uuid}" class="btn btn-sm text-white vmDelete"><i class="far fa-times"></i></button>
    <button id="useAllSeal-${uuid}" class="btn btn-success opacity-75 btn-sm vmUseAll">套用文件</button>
    <button id="useSeal-${uuid}" class="btn btn-success opacity-75 btn-sm vmUse">套用</button>`;

    const seal = document.querySelector(`#${uuid}`);
    const sealImg = document.querySelector(`#seal-${uuid}-img`);

    // 未套用前一次只能新增一個虛擬框
    if ($global.currentSeal) {
      $global.currentSeal.remove();
    }
    // 取得圖片類型
    const stampType = $global.viewModel.stampType ? $global.viewModel.stampType : 'seal';
    $global.currentSeal = seal;
    $global.viewModel.MarginLeft = (seal.offsetLeft / 37.7).toFixed(2);
    $global.viewModel.MarginTop = (seal.offsetTop / 37.7).toFixed(2);
    var hScale = ((sealImg.width / sealImg.naturalWidth) * 100);
    seal.style.width = `${sealImg.width}px`;
    // console.log('圖片的寬的縮放比 %:', hScale);
    // 顯示和實際貼圖的比例差了 1.2 倍
    // 使用簽名時，不需要乘 1.2，原因待查
    $global.viewModel.SealScale = stampType === 'seal' ? hScale * 1.2 : hScale;

    // 滑鼠拖曳效果
    seal.onmousedown = function (ev) {
      var oEvent = ev;
      // 阻擋瀏覽器的預設行為
      oEvent.preventDefault();
      var disX = oEvent.clientX - seal.offsetLeft;
      var disY = oEvent.clientY - seal.offsetTop;
      contractArea.onmousemove = function (ev) {
        oEvent = ev;
        oEvent.preventDefault();
        var x = oEvent.clientX - disX;
        var y = oEvent.clientY - disY;

        // 圖形移動時的邊界判斷-必須在文件內的範圍
        x = x <= 0 ? 0 : x;
        x = x >= contractArea.offsetWidth - seal.offsetWidth ? contractArea.offsetWidth - seal.offsetWidth : x;
        y = y <= 0 ? 0 : y;
        y = y >= contractArea.offsetHeight - seal.offsetHeight ? contractArea.offsetHeight - seal.offsetHeight : y;
        seal.style.left = x + 'px';
        seal.style.top = y + 'px';
        const MarginLeft = (x / 37.795).toFixed(2);
        const MarginTop = (y / 37.795).toFixed(2);
        // console.log('mx-左邊界(cm):', MarginLeft);
        // console.log('my-上邊界(cm):', MarginTop);
        $global.viewModel.MarginLeft = MarginLeft;
        $global.viewModel.MarginTop = MarginTop;
      }
      // 圖形移出文件範圍取消移動是,防止移動過快觸發滑鼠移出事件，導致滑鼠彈起事件失效
      contractArea.onmouseleave = function () {
        sealUnBinding(contractArea);
      }
      // 署標彈起後停止移動
      contractArea.onmouseup = function () {
        sealUnBinding(contractArea);
      }
    }
    // 圖片縮放效果
    const scale = document.querySelector(`#scale-${uuid}`);
    scale.onmousedown = function (ev) {
      var oEvent = ev;
      // 阻止冒泡,避免縮放時觸發移動事件
      oEvent.stopPropagation();
      oEvent.preventDefault();
      var pos = {
        'w': seal.offsetWidth,
        'h': seal.offsetHeight,
        'x': oEvent.clientX,
        'y': oEvent.clientY
      };
      contractArea.onmousemove = function (ev) {
        ev.preventDefault();
        // 設置圖片的最小縮放為160*30
        var w = Math.max(160, ev.clientX - pos.x + pos.w)
        var h = Math.max(30, ev.clientY - pos.y + pos.h)

        // 設置圖片的寬高
        const sealImgHeight = sealImg.offsetHeight;
        // w = w >= contractArea.offsetWidth - seal.offsetLeft ? contractArea.offsetWidth - seal.offsetLeft : w;
        // h = h >= contractArea.offsetHeight - seal.offsetTop ? contractArea.offsetHeight - seal.offsetTop : h < sealImgHeight ? sealImgHeight : h;
        seal.style.width = w <= sealImg.width ? `${sealImg.width}px` : `${w}px`;
        seal.style.height = h + 'px';

        // 取得圖片縮放 % 比
        // 顯示和實際貼圖的比例差了 1.2 倍
        // 使用簽名時，不需要乘 1.2，原因待查
        hScale = ((sealImg.width / sealImg.naturalWidth) * 100);
        // var vScale = ((sealImg.height / sealImg.naturalHeight) * 100);
        console.log('圖片的高的縮放比 %:', hScale);
        $global.viewModel.SealScale = stampType === 'seal' ? hScale * 1.2 : hScale;
      }
      contractArea.onmouseleave = function () {
        sealUnBinding(contractArea);
      };

      contractArea.onmouseup = function () {
        sealUnBinding(contractArea);
      };
    }

    // 刪除印鑑檔
    const deleteSeal = document.querySelector(`#del-${uuid}`);
    deleteSeal.onmousedown = function (ev) {
      var oEvent = ev;
      // 阻止冒泡,避免縮放時觸發移動事件
      oEvent.stopPropagation();
      oEvent.preventDefault();
      seal.remove();
      delete $global.viewModel.SealID;

      contractArea.onmouseleave = function () {
        sealUnBinding(contractArea);
      }
      contractArea.onmouseup = function () {
        sealUnBinding(contractArea);
      }
    }

    // 套用整份文件印鑑檔
    const useAllSeal = document.querySelector(`#useAllSeal-${uuid}`);
    useAllSeal.onmousedown = function (ev) {
      applySealHandler(ev, contractArea, true);;
    }

    // 套用印鑑檔
    const useSeal = document.querySelector(`#useSeal-${uuid}`);
    useSeal.onmousedown = function (ev) {
      applySealHandler(ev, contractArea, false);;
    }
  };

  // 套用印鑑檔
  function applySealHandler(ev, contractArea, doAllPages) {
    var oEvent = ev;
    // 阻止冒泡,避免縮放時觸發移動事件
    oEvent.stopPropagation();
    oEvent.preventDefault();
    // 套用印鑑
    commitSignature(doAllPages);

    contractArea.onmouseleave = function () {
      sealUnBinding(contractArea);
    }
    contractArea.onmouseup = function () {
      sealUnBinding(contractArea);
    }
  };

  // 新增印鑑檔
  let sealList = [];
  function addSealHandler() {
  @*const sealImg = URL.createObjectURL(event.target.files[0]);
      sealList.push(sealImg);*@
      var event = event || window.event;
    if (event.target.form != undefined) {
      $(event.target.form).ajaxForm({
        url: '@Html.Raw(Url.Action("CommitSealTemplate", "UserProfile"))',
        data: $global.viewModel,
        beforeSubmit: function () {
          showLoading();
        },
        success: function (data) {
          hideLoading();
          if ($.isPlainObject(data)) {
            if (data.result) {
            } else {
              alertModal(data.message);
            }
          }
          else {
            $(data).insertBefore($('#addSeal'));
          }
        },
        error: function (xhr, ajaxOptions, thrownError) {
          hideLoading();
          console.log(xhr.status);
          alertModal(thrownError);
        }
      }).submit();
    }
  };

  // 新增簽名檔
  function addSignature(sealUrl) {
    if (sealUrl == null || sealUrl == '') {
      return;
    }
    var index = sealUrl.indexOf(',');
    var viewModel = {
      'SealData': sealUrl.substring(index + 1)
    };

    showLoading();
    $.ajax({
      type: 'POST',
      url: '@(Url.Action("CommitSignatureTemplate", "UserProfile"))',
      data: JSON.stringify(viewModel),
      type: "POST",
      //dataType: "json",
      contentType: "application/json;charset=utf-8",
      success: function (data) {
        hideLoading();
        if ($.isPlainObject(data)) {
          if (data.result) {
          } else {
            alertModal(data.message);
          }
        }
        else {
          $('#addSignature').append(data);
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        hideLoading();
        console.log(xhr.status);
        console.log(thrownError);
      }
    });
  };


  // 套用印鑑檔
  function commitSignature(doAllPages) {
    console.log('ss')
    clearErrors();
    $global.viewModel.DoAllPages = doAllPages;
    $global.viewModel.PageIndex = Number($('select[name="PageIndex"]').val() - 1);
    showLoading();
    $.post('@Html.Raw(Url.Action("CommitPdfSignature", "ContractConsole"))', $global.viewModel, function (data) {
      hideLoading();
      if ($.isPlainObject(data)) {
        if (data.result) {
          loadContractPage($('select[name="PageIndex"]').val() - 1);

          if ($global.currentSeal) {
            $global.currentSeal.remove();
          }
          delete $global.viewModel.SealID;
        } else {
          alertModal(data.message);
        }
      } else {
        $(data).appendTo($('body'));
      }
    });
  };

  function sealUnBinding(contractArea) {
    console.log({ contractArea });
    contractArea.onmousemove = null;
    contractArea.onmouseup = null;
  };

  // 載入當前頁面
  function loadContractPage(pageIndex) {
    showLoading();
  @* $.post('@Html.Raw(Url.Action("LoadContractPage", "ContractConsole"))', { 'KeyID': '@Html.Raw(_model!.ContractID.EncryptKey())', 'PageIndex': pageIndex }, function (data) { *@
      console.log({ contractID })
    $.post('@Html.Raw(Url.Action("LoadContractPage", "ContractConsole"))', { 'KeyID': contractID, 'PageIndex': pageIndex }, function (data) {
      hideLoading();
      if ($.isPlainObject(data)) {
        $('#contractImg').css(data);
      } else {
        $(data).appendTo($('body'));
      }
    });
  };

  // 導覽小幫手
  const steps = [
    {
      selector: '#step1',
      step: 1,
      title: 'Step 1：指定合約雙方',
      content: '選擇合約雙方：<ul><li>指定起約人：選擇甲方。</li><li>指定簽約人：選擇乙方 (可複選)。</li></ul>'
    },
    {
      selector: '#step2',
      step: 2,
      title: 'Step 2：文件審閱',
      content: '若上傳的合約已經用完印，<br>請起約方或簽約方在文件審閱的地方打勾，就可以省略用印的步驟。<br>直接送出文件。'
    },
    {
      selector: '#step3',
      step: 3,
      title: 'Step 3：創建欄位',
      content: '<ul><li>先選擇要編輯的頁面。</li><li>如果需要用印、簽名或填寫註記、壓日期，請使用下方按鈕新增：<ul></li><li>簽名或蓋章：可以新增簽名檔或印章並置入文件內。</li><li>日期：可以新增日期在文件上。</li><li>文字：可以新增文字備註在文件上。</li></ul></li></ul>'
    },
    {
      selector: '#step4',
      step: 4,
      title: '相關操作',
      content: '<ul><li>清除用印：若要重新編輯合約，可點選清除用印。</li><li>取消：取消這份合約。</li><li>退回合約：若覺得這份合約尚有疑慮，可選擇退回合約。</li></ul>'
    },
    {
      selector: '#step5',
      step: 5,
      title: '編輯畫面',
      content: '合約編輯畫面，可以拖曳、縮放邊及區域，<br>確認好位置後按「套用」可將編輯區塊套用在該頁面。<br>按「套用全部」可將編輯區塊套用在全部頁面。'
    }
  ];
</script>
