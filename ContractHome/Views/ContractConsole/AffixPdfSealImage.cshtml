@using System.IO
@using System.Linq.Expressions
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.ModelBinding

@using ContractHome.Helper
@using ContractHome.Controllers
@using ContractHome.Models.DataEntity
@using ContractHome.Models.ViewModel
@using ContractHome.Models.Helper
@using CommonLib.Utility
@using Newtonsoft.Json

@{
  Layout = "~/Views/Shared/MasterPage.cshtml";

  ModelStateDictionary _modelState;
  ModelSource? models;
  Contract _model = (Contract)this.Model;

  models = (ModelSource?)ViewContext.HttpContext.Items["Models"];
  _modelState = (ModelStateDictionary)ViewBag.ModelState;
  QueryViewModel _viewModel = (QueryViewModel)ViewBag.ViewModel;

  var profile = await Context.GetUserAsync();
  var party = models!.GetTable<ContractingParty>()
  .Where(p => p.ContractID == _model.ContractID)
  .Where(p => models.GetTable<OrganizationUser>()
  .Where(o => o.UID == profile.UID).Any(o => o.CompanyID == p.CompanyID))
  .FirstOrDefault();

  var contractRefs = new ContractRefs(_model, "SignaturePositions", party?.CompanyID);

  //var contractData = @Html.Raw(_model.JsonStringify());
  //var partyData = @Html.Raw(party.JsonStringify());
  // var pageCount = _model.GetPdfPageCount();
  var contractRefsJson = @Html.Raw(contractRefs.JsonStringify());
}
@{
  await Html.RenderPartialAsync("~/Views/Shared/Global/PageResource.cshtml");
  <script src="~/js/api.js"></script>
}
<div id="AffixPdfSealImage" class="container-fluid py-4 pt-2 pb-3">
  <section>
    <!-- 標題 - 甲方 / 乙方 -->
    <div class="d-flex justify-content-between align-items-center pe-5">
      <div class="d-flex align-items-center mb-2">
        <h4 class="mb-0 me-4 py-2 fw-bolder options--show">
          {{ isEdit ? '編輯文件' : '簽署人用印'}}
        </h4>
        <div v-if="getSignaturePage()" class="alert alert-success mb-0 py-2 px-3" role="alert">
          <i class="fas fa-info-circle pe-2"></i>
          您有第 <span class="text-danger">{{ getSignaturePage() }}</span> 頁需要進行簽署或用印。
        </div>
      </div>
      <!--
      <div v-if="isEdit" id="editTourbutton" class="mb-2 tooltip__wrapper ms-auto">
        <button type="button" class="px-1 btn btn-lg btn-warning rounded-pill opacity-75" style="width: 48px;"
          v-on:click="tourHandler">
          <i class="far fa-street-view"></i>
        </button>
        <div class="tooltip__text">導覽小幫手</div>
      </div>
      -->
    </div>
    <div class="row" style="height: calc(100vh - 145px);">
      <!-- 合約影像檔 -->
      <div class="contract__wrapper">
        <div class="contract__arrow--left">
          <button type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="上一頁"
            class="btn btn-primary rounded-pill opacity-50"
            :class="{'btn-secondary opacity-25 disabled' : selectedPage === 1}" v-on:click="commitData('prev')">
            <i class="fas fa-chevron-left"></i>
          </button>
        </div>
        <div id="pdf__wrapper" class="card pdf__wrapper">
          @{
            await Html.RenderPartialAsync("~/Views/ContractConsole/Module/ShowContractImage.cshtml", _model);
          }
        </div>
        <div class="contract__arrow--right">
          <button type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="下一頁"
            class="btn btn-primary rounded-pill opacity-50"
            :class="{'btn-secondary opacity-25 disabled' : selectedPage === PageCount}" v-on:click="commitData('next')">
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      </div>
      <!-- 操作介面 -->
      <div class="options__wrapper pt-sm-3 pt-xl-0">
        <div id="toAffix" class="row m-0 p-0">
          <form method="post" enctype="multipart/form-data" class="ps-1 pe-3 pb-3">
            <!-- 文件名稱 -->
            <div class="card p-3 mb-2">
              <h6 class="fw-bolder text-primary">
                <i class="fad fa-file-signature me-1"></i>
                文件名稱
              </h6>
              <span class="fs-13 text-black-50">
                文件編號： {{ ContractNo }}
              </span>
              <span class="fs-14">
                {{ Title }}
              </span>
            </div>
            <!-- 簽署人設定 -->
            <div v-if="isEdit">
              <template>
                <div class="card p-3 pb-0 mb-2">
                  <h6 class="fw-bolder text-primary">
                    <i class="fad fa-users me-1"></i>
                    簽署人
                  </h6>
                  <div class="pb-3">
                    <p class="my-0 py-2 lh-sm">
                      <small>
                        <i class="fas fa-exclamation-circle text-danger me-1"></i>
                        請點選簽署人再設定簽署區域。
                      </small>
                    </p>
                    <template>
                      <div class="input-group flex-nowrap bg-white">
                        <span class="input-group-text">
                          <span class="fs-12 signator" :class="currentSignator.btnClass">
                          </span>
                        </span>
                        <button
                          class="btn btn-outline-secondary d-flex align-items-center justify-content-between  dropdown-toggle flex-fill fs-14"
                          data-bs-toggle="dropdown" aria-expanded="false">
                          {{ nameFilter(currentSignator.Name) || '請選擇簽署人' }}
                        </button>
                        <ul class="dropdown-menu">
                          <li v-for="(item, idx) in signatories" :key=" idx">
                            <a class="dropdown-item fs-14" v-on:click="selectCompany(item)">{{ item.Name }}</a>
                          </li>
                        </ul>
                      </div>
                    </template>
                  </div>
                </div>
                <div class="card p-3 mb-1">
                  <h6 class="fw-bolder text-primary">
                    <i class="fad fa-tasks-alt me-1"></i>
                    簽署選項
                  </h6>
                  <div>
                    <label class="form-label fw-bolder fs-13" for="PageIndex">選擇簽署所在頁碼</label>
                    <select v-model="selectedPage" id="PageIndex" name="PageIndex" class="form-select form-select-sm"
                      v-on:change="pageHandler">
                      <option v-for="(page, index) in PageCount" :key="index" :value="page">第{{ page }}頁</option>
                    </select>
                  </div>
                  <div class="divider border-primary opacity-50 my-3"></div>
                  <div>
                    <div class="card p-2 border-primary opacity-75">
                      <div class="row">
                        <div class="col mt-0 py-1 d-flex align-items-center">
                          <label for="defaultWidth" class="fw-bolder pe-2">寬</label>
                          <input v-model.trim="defaultWidth" type="number" min="0" id="defaultWidth"
                            class="form-control form-control-sm" v-on:keyup="checkNumber('defaultWidth', defaultWidth)">
                        </div>
                        <div class="col mt-0 py-1 d-flex align-items-center">
                          <label for="defaultHeight" class="fw-bolder pe-2">高</label>
                          <input v-model.trim="defaultHeight" type="number" min="0" id="defaultHeight"
                            class="form-control form-control-sm"
                            v-on:keyup="checkNumber('defaultHeight', defaultHeight)">
                        </div>
                      </div>
                    </div>
                    <!--
                    <div class="divider border-primary opacity-50"></div>
                    -->
                    <button type="button" v-on:click="setSealHandler('1')" class="btn btn-brown w-100 mt-3">
                      <i class="fas fa-stamp"></i> 簽章
                    </button>
                    <button type="button" v-on:click="setSealHandler('2')" class="btn btn-brown w-100 mt-2">
                      <i class="fas fa-calendar-alt"></i> 日期
                    </button>
                    <button type="button" v-on:click="setSealHandler('3')" class="btn btn-brown w-100 mt-2">
                      <i class="fas fa-text"></i> 文字
                    </button>
                  </div>
                </div>
              </template>
            </div>
            <!-- 簽署人簽章 -->
            <div v-else>
              <div class="p-3 ps-0 pb-0 mb-1 options--show">
                <h6 class="fw-bolder text-primary">
                  <i class="fad fa-users me-1"></i>
                  簽署人簽章
                </h6>
              </div>
              <div class="card p-3 mb-1 options--show">
                <h6 class="fw-bolder text-primary">
                  <i class="fad fa-tasks-alt me-1"></i>
                  簽署選項
                </h6>
                <div class="pb-3">
                  <label class="form-label fw-bolder" for="PageIndex">選擇簽署所在頁碼</label>
                  <select v-model="selectedPage" id="PageIndex" name="PageIndex" class="form-select form-select-sm"
                    v-on:change="pageHandler">
                    <option v-for="(page, index) in PageCount" :key="index" :value="page">第{{ page }}頁</option>
                  </select>
                </div>
                <p class="my-0 lh-sm">
                  <small>
                    <i class="fas fa-exclamation-circle text-danger me-1"></i>
                    請點選簽署區塊進行編輯。
                  </small>
                </p>
              </div>
            </div>
            <!-- 操作按鈕 -->
            <div v-if="isEdit" class="row g-2 my-0">
              <div class="col-md-4 py-1">
                <button type="button" class="btn btn-secondary opacity-50 w-100" v-on:click="cancelHandler">
                  取消
                </button>
              </div>
              <div class="col py-1">
                <button type="button" class="btn btn-primary opacity-75 w-100 fw-bolder" v-on:click="commitContract">
                  送出文件
                </button>
              </div>
            </div>
            <div v-else class="row g-2 my-0">
              <div class="col-lg-3 col-xl-6 py-1">
                <button type="button" class="btn btn-danger opacity-75 w-100" v-on:click="resetSignature">
                  <i class="fas fa-eraser"></i> 清除用印
                </button>
              </div>
              <!--
              <div class="col-lg-3 col-xl-6 py-1">
                <button type="button" class="btn btn-danger opacity-75 w-100" v-on:click="abortHandler">
                  <i class="fas fa-share"></i> 終止文件
                </button>
              </div>
              -->
              <div class="col-lg-3 col-xl-6 py-1">
                <button type="button" class="btn btn-secondary opacity-50 w-100" v-on:click="backSearch">
                  返回文件列表
                </button>
              </div>
              <div class="col py-1">
                <button type="button" class="btn btn-primary opacity-75 w-100 fw-bolder" v-on:click="commitContract">
                  送出文件
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>

  <!-- 日期輸入 Dialog -->
  <div class="modal fade" id="dateModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="dateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">日期格式</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form method="post" enctype="multipart/form-data" class="pt-3 pb-3 text-center">
            <div class="row g-3">
              <div class="col-md-6 col-sm-12"
                v-on:click="useDateHandler(`中華民國 ${ rocYear } 年 ${ month } 月 ${ day } 日`)">
                <div class="card shadow-sm block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">中華民國 {{ rocYear }} 年 {{ month }} 月 {{ day }} 日</span>
                </div>
              </div>
              <div class="col-md-6 col-sm-12" v-on:click="useDateHandler(`${ year } / ${ month } / ${ day }`)">
                <div class="card shadow-sm block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">{{ year }} / {{ month }} / {{ day }}</span>
                </div>
              </div>
              <div class="col-md-6 col-sm-12" v-on:click="useDateHandler(`${ month } / ${ day } / ${ year }`)">
                <div class="card shadow-sm block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">{{ month }} / {{ day }} / {{ year }}</span>
                </div>
              </div>
              <div class="col-md-6 col-sm-12" v-on:click="useDateHandler(`${ day } / ${ month } / ${ year }`)">
                <div class="card shadow-sm block--hover">
                  <span class="h6 fw-bolder mb-0 py-4">{{ day }} / {{ month }} / {{ year }}</span>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- 文字輸入 Dialog -->
  <div class="modal fade" id="textModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="textModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">文字</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body pb-0">
          <textarea type="text" v-model:trim="noteItem" id="noteItem" name="inputText" class="form-control"
            v-on:keyup="addNote"></textarea>
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" id="noteItemBtn" class="btn btn-primary opacity-75"
            :class="{ 'invisible' : isNoteEmpty }" tabindex="-1" role="button" v-on:click="createVirtualTextArea">
            使用
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- 取消 Dialog -->
  <div class="modal fade" id="cancelModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="cancelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered ">
      <div class="modal-content">
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title" id="staticBackdropLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="pt-0 modal-body text-center">
          <div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i>
          </div>
          <div class="h5 fw-bolder lh-base">確定取消本次新增？</div>
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary opacity-50" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="confirmCancel">確定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 退回 Dialog -->
  <div class="modal fade" id="abortModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="abortModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered ">
      <div class="modal-content">
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title" id="staticBackdropLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center h5 fw-bolder">終止文件後，資料將被清除，確定終止？</div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary opacity-50" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="abortContract">確定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- PDF 預覽 Dialog -->
  <div class="modal fade" id="pdfModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="pdfModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">合約預覽</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body pb-0">
          <!-- PDF 內嵌頁面 -->
          <div class="card pdf__wrapper">
            @{
              await Html.RenderPartialAsync("~/Views/ContractConsole/Module/ShowContractImage.cshtml", _model);
            }
          </div>
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 訊息 Dialog -->
  <div class="modal fade" id="infoModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body text-center h5 fw-bolder pt-5">
          <div v-html="infoMsg"></div>
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
            v-on:click="isCloseHandler">關閉</button>
        </div>
      </div>
    </div>
  </div>

</div>
<script>
  // 取得上傳 PDF 總頁數
  const { ContractNo, Title, CurrentStep, KeyID: contractID, PageCount, Parties } = @Html.Raw(contractRefsJson);

  /**
   * param {Number} StepEnum 文件狀態
    * 0: Initial - 開始,
    * 1: Config - 設定,
    * 3: FieldSet - 欄位設定,
    * 5: Establish - 建立,
    * 6: Sealing - 用印中,
    * 7: Sealed - 用印完成,
    * 10: DigitalSigning - 簽章中,
    * 11: DigitalSigned - 簽章完成,
    * 16: Browsed - 瀏覽,
    * 17: Terminated - 已終止,
    * 18: Committed - 完成,
    * 19: Revoked - 撤銷,
   */
  var app = new Vue({
    el: '#AffixPdfSealImage',
    data() {
      return {
        ContractNo,
        Title,
        CurrentStep,
        PageCount,
        Parties,
        contractID,
        selectedPage: 1,
        noteItem: null, // 輸入的文字
        isNoteEmpty: true, // 輸入文字欄位狀態
        hasDuplicateContractor: false,
        selectedContractor: [
          {
            id: '0',
            text: null,
            isDuplicate: false
          }
        ],
        companyList: [],
        signatories: [],
        form: {
          ContractID: null,
          EncUID: null,
          FieldSettings: [],
        },
        currentSignator: {},
        currentCompany: {},
        signaturePositionsTemp: [], // 設定簽屬區域列表
        contractSignaturePositions: [],
        contractSignaturePositionsTemp: [],
        currentSeal: {},
        day: null,
        month: null,
        year: null,
        rocYear: null,
        scrolly: 0,
        scrollType: null,
        inputType: [
          { text: '簽章', value: '1' },
          { text: '日期', value: '2' },
          { text: '文字', value: '3' },
        ],
        usedStampList: [], // 簽署人用印的資料(文字/印章)
        infoMsg: null,
        isCanael: false,
        isCreate: false,
        isClear: false,
        isReject: false,
        sealTempList: [],
        stampType: 'company',
        defaultWidth: 130,
        defaultHeight: 130
      };
    },
    computed: {
      isEdit() {
        return this.CurrentStep === 1;
      },
      isContractorEmpty() {
        const isZero = this.selectedContractor[0]?.id === '0';
        const isEmpty = this.selectedContractor.length === 1;
        return isZero && isEmpty;
      }
    },
    mounted() {
      this.init();
      this.scrollHeight();
      setTimeout(() => {
        if (!this.isEdit) {
          // 取出當前簽署人簽署區塊資料
          this.getContractor();
          // 簽約方進入先清除用印以免用印未送出產生圖檔重疊
          this.resetSignatureOnLoad();
        }
      }, 100)
    },
    methods: {
      init() {
        const signatoriesMap = this.Parties.map((item, index) => {
          return {
            ...item,
            btnClass: this.signatorColor(index),
            ItemClass: `vmBox__wrapper--bg0${index}`
          }
        });

        this.form.ContractID = this.contractID;
        this.signatories = signatoriesMap;
        // 簽署人選單預帶第一筆
        this.selectCompany(signatoriesMap[0]);
        this.getDate();

        // 若為第一次登入，顯示歡迎視窗並進入導覽流程
        // window.addEventListener('load', (event) => {
        //   if (!localStorage.getItem("isEditTour")) {
        //     // 初始化 網頁導覽
        //     const tourguide = new Tourguide({ steps });
        //     tourguide.start();
        //     localStorage.setItem("isEditTour", true);
        //   }
        // });
      },

      // 取得簽署人顏色設定
      signatorColor(idx) {
        if (idx < 6) {
          return `signator--color${idx}`;
        } else {
          return 'signator--colorDefault';
        }
      },

      // 卷軸滾動高度
      scrollHeight() {
        const pdfWrapper = document.querySelector("#pdf__wrapper");
        pdfWrapper.addEventListener('scroll', () => {
          this.scrolly = pdfWrapper.scrollTop.toFixed(2);
        });
      },

      // 取的日期資料 
      getDate() {
        let objectDate = new Date();
        this.day = objectDate.getDate();
        this.month = objectDate.getMonth() + 1;
        this.year = objectDate.getFullYear();
        this.rocYear = this.year - 1911;
      },

      // 合約簽署設定查詢
      // 取出當前簽署人簽署區塊資料
      getContractor() {
        const currentUser = this.Parties.filter(item => item.IsCurrentUserCompany)[0];
        const companyID = currentUser.KeyID;
        this.getFeildSetting(contractID, companyID);
      },

      // 取得用印範圍資訊
      getFeildSetting(ContractID, CompanyID) {
        //console.log({ ContractID, CompanyID });
        const payload = { ContractID, CompanyID };
        showLoading();
        postData('@(Url.Action("FeildSettings", "ContractConsole"))', payload)
          .then((res) => {
            const { hasError, data, message } = res;
            if (!hasError) {
              // 成功
              // 初始化
              this.contractSignaturePositions = [];
              this.contractSignaturePositionsTemp = [];
              const getSignaturePositions = data.map(item => {
                const { positionID, companyID, marginLeft, marginTop, pageIndex, requestID, scaleHeight, scaleWidth, type } = item;
                return {
                  ID: positionID,
                  CompanyID: companyID,
                  MarginLeft: marginLeft,
                  MarginTop: marginTop,
                  PageIndex: pageIndex,
                  RequestID: requestID,
                  ScaleHeight: scaleHeight,
                  ScaleWidth: scaleWidth,
                  Type: type,
                  ItemClass: `vmBox__wrapper--bg00`
                };
              });
              this.contractSignaturePositions = [...getSignaturePositions];
              this.contractSignaturePositionsTemp = [...getSignaturePositions];
              this.loadPageItem(this.selectedPage - 1);
            } else {
              // 失敗
              const { ContractID } = message;
              const contractIDString = ContractID ? ContractID.join(', ') : '資料有誤';
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${contractIDString} </div>`;
              $("#infoModal").modal("show");
            }
            hideLoading();
          })
      },

      // 選擇簽約方
      selectCompany(signator) {
        this.currentSignator = signator;
      },

      // 編輯欄 選擇頁碼
      pageHandler() {
        loadContractPage(this.selectedPage - 1);
        this.loadPageItem(this.selectedPage - 1);
      },

      // 頁面 選擇頁碼
      commitData(step) {
        const currentPage = this.selectedPage;
        if (isNaN(currentPage)) {
          return;
        }
        if (step === 'next') {
          this.selectedPage = currentPage < this.PageCount ? this.selectedPage + 1 : this.selectedPage;
        } else {
          this.selectedPage = currentPage > 0 ? this.selectedPage - 1 : this.selectedPage;
        }
        loadContractPage(this.selectedPage - 1);
        this.loadPageItem(this.selectedPage - 1);
      },

      // 載入頁面元件
      loadPageItem(pageIndex) {
        const contractArea = document.querySelector("#contractImg");
        if (contractArea) {
          contractArea.innerHTML = '';
        }
        if (this.isEdit) {
          const pageitem = this.signaturePositionsTemp.filter(item => item.PageIndex === this.selectedPage - 1);
          if (pageitem.length > 0) {
            pageitem.forEach(item => this.getComponent(item));
          }
        } else {
          const pageitem = this.contractSignaturePositions.filter(item => item.PageIndex === this.selectedPage - 1);
          pageitem.forEach(item => this.getCompanyComponent(item));
        }
      },

      // 產生圈選元件
      getComponent(itemObj) {
        const { Id: uuid, MarginLeft, MarginTop, SealScale, ScaleWidth, ScaleHeight, Type, PageIndex, canEdit, UserId, ItemClass } = itemObj;
        // 產生一個虛擬 textBox
        const contractArea = document.querySelector("#contractImg");
        const textBox = document.createElement("div");
        // id 動態產生
        textBox.id = uuid;
        textBox.setAttribute('class', 'vmBox__wrapper');
        textBox.setAttribute('style', `top: ${MarginTop}px;left:${MarginLeft}px;width:${ScaleWidth}px;height:${ScaleHeight}px;`);

        const typeText = this.inputType.filter(item => item.value === Type)[0].text;

        contractArea.appendChild(textBox);
        textBox.classList.add(ItemClass);
        // 產生文字內容並放到 textBox
        textBox.innerHTML = `
          <div class="vmBox__note">${typeText}</div>
          <div id="vmBox-${uuid}-subtext" class="vmBox__subtext">拖曳至指定位置</div>
          <div id="vmBox-${uuid}-scale" class="vmBox__scale"></div>
          <button id="vmBox-${uuid}-remove" class="btn btn-sm vmBox__delete"><i class="far fa-times"></i></button>
          <button id="vmBox-${uuid}-check" class="btn btn-sm vmBox__check"><i class="far fa-check"></i></button>
          <button id="vmBox-${uuid}-edit" class="btn btn-sm vmBox__edit hide"><i class="fas fa-pencil"></i></button>`;

        const subtext = document.querySelector(`#vmBox-${uuid}-subtext`);
        const scaleBox = document.querySelector(`#vmBox-${uuid}-scale`);
        const removeBox = document.querySelector(`#vmBox-${uuid}-remove`);
        const useBox = document.querySelector(`#vmBox-${uuid}-check`);
        const editBox = document.querySelector(`#vmBox-${uuid}-edit`);

        if (canEdit) {
          subtext.classList.remove('hide');
          scaleBox.classList.remove('hide');
          removeBox.classList.remove('hide');
          useBox.classList.remove('hide');
          editBox.classList.add('hide');
          textBox.style.cursor = 'move';
        } else {
          subtext.classList.add('hide');
          scaleBox.classList.add('hide');
          removeBox.classList.add('hide');
          useBox.classList.add('hide');
          editBox.classList.remove('hide');
          textBox.style.cursor = 'default';
        }

        this.operator({ uuid, contractArea, textBox, removeBox, scaleBox, useBox, editBox, subtext });

      },

      // 產生乙方用印元件
      getCompanyComponent(itemObj) {
        const { ID: uuid, MarginLeft, MarginTop, ScaleHeight, ScaleWidth, Type, ItemClass } = itemObj;
        // 產生一個虛擬 textBox
        const contractArea = document.querySelector("#contractImg");
        const textBox = document.createElement("div");
        // id 動態產生
        textBox.id = uuid;
        textBox.setAttribute('class', 'vmBox__wrapper vmBox__compantEdit');
        textBox.setAttribute('style', `top: ${MarginTop}px;left:${MarginLeft}px;width:${ScaleWidth}px;height:${ScaleHeight}px;`);
        const typeText = this.inputType.filter(item => item.value === `${Type}`)[0].text;
        contractArea.appendChild(textBox);

        textBox.classList.add(ItemClass);
        // 產生文字內容並放到 textBox
        textBox.innerHTML = `
          <div id="vmBox-${uuid}-edit" class="vmBox--edit">
            <div class="vmBox__note">${typeText}</div>
          </div>
          <div id="vmBox-${uuid}-subtext" class="vmBox__subtext">點擊區塊進行編輯</div>
          <button id="useSeal-${uuid}" class="btn btn-success opacity-75 btn-sm vmUse"> 套用 </utton>
          `;

        const editBox = document.querySelector(`#vmBox-${uuid}-edit`);
        editBox.onclick = () => {
          // 簽章
          if (Type === 1) {
            // 一次只能出現一個 editItem
            const children = contractArea.children;
            children.forEach(item => item.classList.remove('editItem'));

            textBox.classList.add('editItem');
            this.sealHandler();
          };

          // 日期
          if (Type === 2) {
            const children = contractArea.children;
            children.forEach(item => item.classList.remove('editItem'));

            textBox.classList.add('editItem');
            this.dateHandler();
          };

          // 文字
          if (Type === 3) {
            const children = contractArea.children;
            children.forEach(item => item.classList.remove('editItem'));

            textBox.classList.add('editItem');
            this.textHandler();
          };
        };
      },

      // 開啟印鑑 Modal
      sealHandler() {
        if ($('#sealModal').length > 0) {
          $('#sealModal').modal('show');
        } else {
          showLoading();
          $.ajax({
            type: 'POST',
            url: '@(Url.Action("ShowSealModal", "UserProfile"))',
            data: JSON.stringify({}),
            type: "POST",
            //dataType: "json",
            contentType: "application/json;charset=utf-8",
            success: function (data) {
              hideLoading();
              if ($.isPlainObject(data)) {
                if (data.result) {
                } else {
                  alertModal(data.message);
                }
              } else {
                $(data).appendTo($('body'));
              }
            },
            error: function (xhr, ajaxOptions, thrownError) {
              hideLoading();
              console.log(xhr.status);
              console.log(thrownError);
            }
          });
        }
      },

      // 開啟 日期輸入Modal
      dateHandler() {
        $('#dateModal').modal('show');
      },

      // 選擇日期格式
      useDateHandler(dateString) {
        $('#dateModal').modal('hide');
        this.createVirtualText(dateString);
      },

      // 開啟 文字輸入Modal
      textHandler() {
        this.noteItem = null;
        $('#textModal').modal('show');
      },

      // 置入文字-顯示使用按鈕
      addNote() {
        // 有輸入文字才會顯示使用按鈕
        this.isNoteEmpty = this.noteItem?.length === 0;
      },

      // 建立文字虛擬框
      createVirtualTextArea() {
        $('#textModal').modal('hide');
        this.createVirtualText(this.noteItem);
      },

      // 開啟 取消合約 Modal
      cancelHandler(msg) {
        $('#cancelModal').modal('show');
      },

      // 取消新增合約
      confirmCancel() {
        $('#cancelModal').modal('hide');
        this.cancelContract();
      },

      // 取消新增的合約
      cancelContract() {
        const self = this;
        showLoading();
        $.post(
          '@Html.Raw(Url.Action("DeleteContract", "ContractConsole"))',
          { 'KeyID': self.contractID },
          function (data) {
            if ($.isPlainObject(data)) {
              hideLoading();
              if (data.result) {
                // 成功
                self.infoMsg = `<div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base">文件已取消</div>`;
                self.isCanael = true;
              } else {
                // 失敗
                self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${data.message.replace(/、/g, '<br>')} </div>`;
              }
              $("#infoModal").modal("show");
            } else {
              $(data).appendTo($('body'));
            }
          });
      },

      // 開啟退回合約 Model
      abortHandler() {
        $('#abortModal').modal('show');
      },

      // 退回合約 
      abortContract() {
        const self = this;
        $('#abortModal').modal('hide');
        showLoading();
        $.post(
          '@Html.Raw(Url.Action("AbortContract", "ContractConsole"))',
          { 'KeyID': contractID },
          function (data) {
            hideLoading();
            if ($.isPlainObject(data)) {
              if (data.result) {
                // 成功
                self.infoMsg = `<div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base"> 合約已退回。</div>`;
                self.isReject = true;
              } else {
                // 失敗
                self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${data.message.replace(/、/g, '<br>')} </div>`;
              }
              $("#infoModal").modal("show");
            } else {
              $(data).appendTo($('body'));
            }
          });
      },

      // 導覽小幫手
      tourHandler() {
        // 初始化 網頁導覽
        const tourguide = new Tourguide({ steps });
        tourguide.start();
      },

      // 開啟預覽 Modal
      openPdfModal() {
        $('#pdfModal').modal('show');
      },

      // 取得待簽署的頁碼
      getSignaturePage() {
        // 簽暑人送出合約前，先檢查是否有漏填的簽章
        const signatureCount = this.contractSignaturePositions.length;
        if (signatureCount > 0) {
          let signaturePage = this.contractSignaturePositions.map(item => {
            return item.PageIndex + 1;
          });
          // 去重複
          // 由小到大排序
          signaturePage = [...new Set(signaturePage)].sort((a, b) => a - b).join('、 ');
          return signaturePage;
        }
      },

      // 送出合約
      commitContract() {
        const self = this;
        const { ContractID } = this.form;
        const hasVm = this.signaturePositionsTemp.length > 0;
        const signerInfo = this.Parties.map(({ Name, KeyID }) => ({ Name, KeyID }));
        const signerIdArray = this.Parties.map(({ Name, KeyID }) => KeyID);
        const payload = {};
        let positionsMap = [];

        if (hasVm) {
          positionsMap = this.signaturePositionsTemp.map(item => {
            const { Id, UserId, MarginTop, MarginLeft, ScaleWidth, ScaleHeight, SealScale, PageIndex, Type } = item;
            return {
              ID: Id,
              CompanyID: UserId,
              TYPE: Type,
              PAGEINDEX: PageIndex,
              SCALEWIDTH: ScaleWidth,
              SCALEHEIGHT: ScaleHeight,
              MARGINLEFT: MarginLeft,
              MARGINTOP: MarginTop,
              SEALSCALE: SealScale,
            }
          });
        }

        if (this.isEdit) {
          const signCompanyId = this.signaturePositionsTemp.filter(item => signerIdArray.includes(item.UserId)).map(({ UserId }) => UserId);
          const notSignCompany = signerInfo.filter(item => !signCompanyId.includes(item.KeyID)).map(item => item.Name);
          // 全部沒圈選
          if (!hasVm) {
            this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base">請設定簽署人簽章區域</div>`;
            $("#infoModal").modal("show");
            return;
          };

          // 部分沒圈選
          if (notSignCompany.length > 0) {
            this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base">${notSignCompany.join('、')} 請設定簽署人簽章區域</div>`;
            $("#infoModal").modal("show");
            return;
          }
        } else {
          // 簽暑人送出合約前，先檢查是否有漏填的簽章
          const signatureCount = this.contractSignaturePositions.length;
          if (signatureCount > 0) {
            let signaturePage = this.contractSignaturePositions.map(item => {
              return item.PageIndex + 1;
            });
            // 去重複
            signaturePage = [...new Set(signaturePage)].sort((a, b) => a - b).join('、 ');
            this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base">請檢查第 ${signaturePage} 頁尚未簽署完成</div>`;
            $("#infoModal").modal("show");
            return;
          };
        }

        if (this.isEdit) {
          payload.ContractID = ContractID;
          payload.FieldSettings = positionsMap;
        } else {
          payload.KeyID = ContractID;
        }

        showLoading();
        if (this.isEdit) {
          postData('@(Url.Action("FeildSettingsUpdate", "ContractConsole"))', payload)
            .then((res) => {
              const { hasError, data, message } = res;
              if (!hasError) {
                // 文件已填寫並用印完畢則建立合約
                self.established(ContractID);
              } else {
                // 失敗
                self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message.replace(/、/g, '<br>')} </div>`;
                hideLoading();
                $("#infoModal").modal("show");
              }
            })
        } else {
          postData('@(Url.Action("AcceptContract", "ContractConsole"))', payload)
            .then((res) => {
              const { result, dataItem, message } = res;
              if (result) {
                // 成功
                self.infoMsg = `<div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base"> ${dataItem.title} <br> (${dataItem.contractNo}) <br> 合約已用印 </div>`;
                self.isCreate = true;
              } else {
                // 失敗
                self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message ? message : '資料有誤'} </div>`;
              }
              hideLoading();
              $("#infoModal").modal("show");
            })
        }

      },

      // 建立合約(文件)
      established(ContractID) {
        const payload = { ContractID };
        this.isCreate = true;

        //showLoading();
        console.log('loading')
        postData('@(Url.Action("Establish", "ContractConsole"))', payload)
          .then((res) => {
            const { hasError, data, message } = res;
            if (!hasError) {
              // 成功
              // 開啟訊息視窗
              this.infoMsg = `<div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base">文件已建立。</div>`;
            } else {
              // 失敗
              const { ContractID } = message;
              const contractIDString = ContractID ? ContractID.join(', ') : '資料有誤';
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${contractIDString} </div>`;
            }
            hideLoading();
            $("#infoModal").modal("show");
          })
      },

      // 清除用印
      resetSignature() {
        const self = this;
        clearErrors();
        const payload = {
          KeyID: $global.viewModel.KeyID,
          PageIndex: this.selectedPage - 1,
        };

        showLoading();
        // Post API
        // 解決重複跑三次的問題，不用Form submit的方式做
        $.post('@Html.Raw(Url.Action("ResetPdfSignature", "ContractConsole"))', payload, function (data) {
          if (data.result) {
            // 成功
            if (self.isEdit) {
              self.sealTempList = [];
            } else {
              // 簽署人清除用印後要還原用印區塊
              self.contractSignaturePositions = [...self.contractSignaturePositionsTemp];
              self.usedStampList = [];
              self.currentSeal = {};
              self.loadPageItem(self.selectedPage - 1);
            }
            loadContractPage(self.selectedPage - 1);
            // 開啟訊息視窗
            self.infoMsg = `<div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base"> 已清除用印</div>`;
            self.isClear = true;
            hideLoading();
            $("#infoModal").modal("show");
          }
          else {
            // 失敗
            self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${data.message.replace(/、/g, '<br>')} </div>`;
            hideLoading();
            $("#infoModal").modal("show");
          }

        });
      },

      // onLoad 清除用印
      resetSignatureOnLoad() {
        const self = this;
        clearErrors();
        const payload = {
          KeyID: $global.viewModel.KeyID,
          PageIndex: this.selectedPage - 1,
        };
        showLoading();
        // Post API
        // 解決重複跑三次的問題，不用Form submit的方式做
        $.post('@Html.Raw(Url.Action("ResetPdfSignature", "ContractConsole"))', payload, function (data) {
          if (data.result) {
            // 成功
            self.loadPageItem(self.selectedPage - 1);
            loadContractPage(self.selectedPage - 1);
            setTimeout(() => {
              hideLoading();
            }, 500);
          }
          else {
            // 失敗
            self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${data.message.replace(/、/g, '<br>')} </div>`;
            hideLoading();
            $("#infoModal").modal("show");
          }
        });
      },

      /********** 用印區塊 ***********/
      // 虛擬文字框
      createVirtualText(noteString) {
        const self = this;
        const contractArea = document.querySelector("#contractImg");
        const editItem = document.querySelector('.editItem'); // 編輯中檔案

        if (!editItem) {
          // 產生一個虛擬 textBox
          const textBox = document.createElement("div");
          // id 動態產生
          const uuid = ui_uuid8();
          textBox.id = uuid;
          textBox.setAttribute('class', 'vmNote');
          textBox.setAttribute('style', `top: calc(${(contractArea.offsetTop + Number(self.scrolly))}px); left: calc(${(contractArea.offsetWidth - 220) / 2}px);`);
          document.querySelector("#contractImg").appendChild(textBox);
          // 產生文字內容並放到 textBox
          textBox.innerHTML = `
            <div id="note-${uuid}-text" class="note">${noteString}</div>
            <div id="scaleText-${uuid}" class="vmScale"></div>
            <button id="delNote-${uuid}" class="btn btn-sm vmDelete"><i class="far fa-times"></i></button>
            <button id="useAllNote-${uuid}" class="btn btn-success opacity-75 btn-sm vmUseAll"> 套用文件 </button>
            <button id="useNote-${uuid}" class="btn btn-success opacity-75 btn-sm vmUse"> 套用 </utton>`;

          // 未套用前一次只能新增一個虛擬框
          const currentId = this.currentSeal.Id;
          if (currentId) {
            const currentNote = document.querySelector(`#${currentId}`);
            if (currentNote) {
              currentNote.remove();
            }
          }

          const textInput = document.querySelector(`#note-${uuid}-text`);

          // 將新增的文字檔資料暫存
          const noteData = {
            Id: textBox.id,
            Note: noteString,
            currentItem: textBox,
            MarginTop: (textBox.offsetTop / 37.7).toFixed(2),
            MarginLeft: (textBox.offsetLeft / 37.7).toFixed(2),
            SealScale: 100, // 目前寬度取值用這個
            Width: 220,
            Height: `${textInput.offsetHeight}px`,
            PageIndex: this.selectedPage - 1
          }
          this.currentSeal.Id = uuid;

          // 滑鼠拖曳效果
          textBox.onmousedown = (ev) => {
            this.dragHandler(ev, noteData, contractArea);
          };

          // 文字區塊縮放效果
          const scale = document.querySelector(`#scaleText-${uuid}`);
          scale.onmousedown = (ev) => {
            this.scaleHandler(ev, noteData, textInput, contractArea);
          };

          // 取消文字區塊
          const deleteNote = document.querySelector(`#delNote-${uuid}`);
          deleteNote.onmousedown = (ev) => {
            this.deleteHandler(ev, noteData, contractArea);
          };

          // 套用 - 文字區塊
          const useNote = document.querySelector(`#useNote-${uuid}`);
          useNote.onmousedown = (ev) => {
            this.useNoteHandler(ev, noteData, contractArea, false);
          };

          // 套用整份文件 - 文字區塊
          const useAllNote = document.querySelector(`#useAllNote-${uuid}`);
          useAllNote.onmousedown = (ev) => {
            this.useNoteHandler(ev, noteData, contractArea, true);
          };
        } else {
          const self = this;
          // 未套用前一次只能新增一個虛擬框
          const currentItemFilter = this.usedStampList.filter(item => item.Id !== editItem.id);
          this.usedStampList = currentItemFilter;

          // 簽署人用印
          editItem.innerHTML = '';
          editItem.innerHTML = `
          <div id="note-${editItem.id}-text" class="vmBox__text">${noteString}</div>
          <button id="useNote-${editItem.id}" class="btn btn-success opacity-75 btn-sm vmUse"> 套用 </utton>
          `;

          const textInput = document.querySelector(`#note-${editItem.id}-text`);

          // 將新增的文字檔資料暫存
          const noteData = {
            Id: editItem.id,
            Note: noteString,
            currentItem: editItem,
            MarginTop: (editItem.offsetTop / 37.7).toFixed(2),
            MarginLeft: (editItem.offsetLeft / 37.7).toFixed(2),
            SealScale: 100, // 目前寬度取值用這個
            Width: editItem.offsetWidth,
            Height: editItem.offsetHeight,
            PageIndex: this.selectedPage - 1
          }

          // 用印暫存列表
          this.usedStampList.push(noteData);

          // 套用 - 文字區塊
          const useNote = document.querySelector(`#useNote-${editItem.id}`);
          useNote.onmousedown = (ev) => {
            const sealFilter = self.usedStampList.filter(item => item.Id === editItem.id)[0];
            self.useNoteHandler(ev, sealFilter, contractArea, false);
          };
        }
      },

      // 滑鼠拖曳效果
      dragHandler(ev, noteData, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻擋瀏覽器的預設行為
        oEvent.preventDefault();
        const { Id, Note, currentItem, MarginTop, MarginLeft, SealScale, Width, Height, PageIndex } = noteData;
        const disX = oEvent.clientX - currentItem.offsetLeft;
        const disY = oEvent.clientY - currentItem.offsetTop;
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          let x = ev.clientX - disX;
          let y = ev.clientY - disY;

          // 文字區塊移動時的邊界判斷-必須在文件內的範圍
          x = x <= 0 ? 0 : x;
          x = x >= contractArea.offsetWidth - currentItem.offsetWidth ? contractArea.offsetWidth - currentItem.offsetWidth : x;
          y = y <= 0 ? 0 : y;
          y = y >= contractArea.offsetHeight - currentItem.offsetHeight ? contractArea.offsetHeight - currentItem.offsetHeight : y;
          currentItem.style.left = x + 'px';
          currentItem.style.top = y + 'px';
          // MarginLeft: 左邊界(cm)
          // MarginTop: 上邊界(cm)
          noteData.MarginLeft = (x / 37.7).toFixed(2);
          noteData.MarginTop = (y / 37.7).toFixed(2);
        }
        // 文字區塊移出文件範圍取消移動是,防止移動過快觸發滑鼠移出事件，導致滑鼠彈起事件失效
        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        // 鼠標彈起後停止移動
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 文字區塊縮放效果
      scaleHandler(ev, noteData, textInput, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        const { Id, Note, currentItem, MarginTop, MarginLeft, SealScale, Width, Height, PageIndex } = noteData;
        const pos = {
          'w': currentItem.offsetWidth,
          'h': currentItem.offsetHeight,
          'x': ev.clientX,
          'y': ev.clientY
        };
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          // 設置文字區塊的最小縮放為100*30
          let w = Math.max(160, ev.clientX - pos.x + pos.w);
          let h = Math.max(30, ev.clientY - pos.y + pos.h);

          // 設置文字區塊的最大寬高
          currentItem.style.width = `${w}px`;
          currentItem.style.height = h > textInput.offsetHeight ? `${h}px` : `${textInput.offsetHeight}px`;
          noteData.Width = w;
          noteData.Height = h;
        }
        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 取消文字區塊
      deleteHandler(ev, noteData, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        noteData.currentItem.remove();

        this.currentSeal = {};
        this.noteItem = null;

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 套用文字區塊
      useNoteHandler(ev, noteData, contractArea, status) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        noteData.SealScale = (Number(noteData.Width) / 37.795).toFixed(2);
        noteData.Width = (Number(noteData.Width) / 37.795).toFixed(2);
        noteData.Height = (Number(noteData.Height) / 37.795).toFixed(2);
        // 調整最後顯示位置
        noteData.MarginTop = (Number(noteData.MarginTop) + 0.2).toFixed(2);
        noteData.MarginLeft = (Number(noteData.MarginLeft) + 0.2).toFixed(2);

        // 套用文字區塊
        this.commitNote(noteData, status);

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      unBinding(contractArea) {
        contractArea.onmousemove = null;
        contractArea.onmouseup = null;
      },

      // 儲存 - 套用文字區塊
      commitNote(noteData, doAllPages) {
        const self = this;
        clearErrors();
        const { Id, Note, currentItem, MarginTop, MarginLeft, SealScale, Width, Height, PageIndex } = noteData
        // 目前IronPdf文字區塊的 width 是取 SealScale 的值，所以 SealScale 先定義 Width 的值
        const payload = {
          Id,
          Note,
          SealScale,
          MarginTop,
          MarginLeft,
          Width,
          Height,
          PageIndex,
          DoAllPages: doAllPages,
          KeyID: $global.viewModel.KeyID
        }
        showLoading();
        $.post('@Html.Raw(Url.Action("CommitPdfNote", "ContractConsole"))', payload, function (res) {
          hideLoading();
          console.log({res})
          if ($.isPlainObject(res)) {
            if (res.result) {
              if (!this.isEdit) {
                // 套用一筆 contractSignaturePositions 要刪掉一筆紀錄才能計算有幾筆還未用簽
                const contractFilter = self.contractSignaturePositions.filter(item => item.ID !== Id);
                self.contractSignaturePositions = contractFilter;

                const usedStampFilter = self.usedStampList.filter(item => item.Id !== Id);
                self.usedStampList = usedStampFilter;
              }

              self.currentSeal = {};
              self.noteItem = null;
              loadContractPage(PageIndex);

              if (currentItem) {
                currentItem.remove();
              }
            }
            else {
              alertModal(res.message);
            }
          } else {
            $(res).appendTo($('body'));
          }
        });
      },

      /********** 圈選區塊 ***********/
      // 設定簽署人印鑑區塊
      setSealHandler(type) {
        const self = this;
        const contractArea = document.querySelector("#contractImg");
        const pdfWrapper = document.querySelector("#pdf__wrapper");

        // 產生一個虛擬 textBox
        const textBox = document.createElement("div");
        // id 動態產生
        const uuid = ui_uuid8();
        textBox.id = uuid;
        textBox.setAttribute('class', 'vmBox__wrapper');
        // 預設尺寸
        if (type === '2') {
          this.stampType = 'date';
        }
        if (type === '3') {
          this.stampType = 'text';
        }

        textBox.setAttribute('style', `width: ${self.defaultWidth}px; height: ${self.defaultHeight}px; top: ${(contractArea.offsetTop + Number.parseInt(self.scrolly, 10))}px; left: ${(contractArea.offsetWidth - self.defaultWidth) / 2}px;`);

        const typeText = this.inputType.filter(item => item.value === type)[0].text;

        contractArea.appendChild(textBox);
        if (this.currentSignator.ItemClass) {
          textBox.classList.add(this.currentSignator.ItemClass);
        }
        // 產生文字內容並放到 textBox
        textBox.innerHTML = `
          <div class="vmBox__note">${typeText}</div>
          <div id="vmBox-${uuid}-subtext" class="vmBox__subtext"> 拖曳至指定位置 </div>
          <div id="vmBox-${uuid}-scale" class="vmBox__scale"></div>
          <button id="vmBox-${uuid}-remove" class="btn btn-sm vmBox__delete"><i class="far fa-times"></i></button>
          <button id="vmBox-${uuid}-check" class="btn btn-sm vmBox__check"><i class="far fa-check"></i></button>
          <button id="vmBox-${uuid}-edit" class="btn btn-sm vmBox__edit hide"><i class="fas fa-pencil"></i></button>`;
        const subtext = document.querySelector(`#vmBox-${uuid}-subtext`);
        const scaleBox = document.querySelector(`#vmBox-${uuid}-scale`);
        const removeBox = document.querySelector(`#vmBox-${uuid}-remove`);
        const useBox = document.querySelector(`#vmBox-${uuid}-check`);
        const editBox = document.querySelector(`#vmBox-${uuid}-edit`);

        const vmSeal = {
          Id: uuid,
          Type: type,
          PageIndex: this.selectedPage - 1,
          SealScale: 100,
          ScaleWidth: this.defaultWidth,
          ScaleHeight: this.defaultHeight,
          MarginLeft: `${(contractArea.offsetWidth - self.defaultWidth) / 2}`,
          MarginTop: `${(contractArea.offsetTop + Number.parseInt(self.scrolly, 10))}`,
          canEdit: true,
          UserId: this.currentSignator.KeyID || null,
          ItemClass: this.currentSignator.ItemClass || null,
        };

        this.signaturePositionsTemp.push(vmSeal);
        this.operator({ uuid, contractArea, textBox, removeBox, scaleBox, useBox, editBox, subtext });
      },

      operator({ uuid, contractArea, textBox, removeBox, scaleBox, useBox, editBox, subtext }) {
        const currentBox = this.signaturePositionsTemp.filter(item => item.Id === uuid)[0];
        // 滑鼠拖曳效果
        if (textBox) {
          textBox.onmousedown = (ev) => {
            if (currentBox.canEdit) {
              this.vmDragHandler(ev, uuid, textBox, contractArea);
            }
          };
        }

        // 區塊縮放效果
        if (scaleBox) {
          scaleBox.onmousedown = (ev) => {
            this.vmScaleHandler(ev, uuid, textBox, contractArea);
          };
        }

        // 取消區塊
        if (removeBox) {
          removeBox.onmousedown = (ev) => {
            this.vmRemoveHandler(ev, uuid, textBox, contractArea);
          };
        }

        // 套用區塊
        if (useBox) {
          useBox.onmousedown = (ev) => {
            this.vmUseHandler(ev, uuid, contractArea, textBox, removeBox, scaleBox, useBox, editBox, subtext);
          };
        }

        // 編輯區塊
        if (editBox) {
          editBox.onmousedown = (ev) => {
            this.vmEditHandler(ev, uuid, contractArea, textBox, removeBox, scaleBox, useBox, editBox, subtext);
          };
        }
      },

      // 滑鼠拖曳效果
      vmDragHandler(ev, uuid, textBox, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻擋瀏覽器的預設行為
        oEvent.preventDefault();
        const disX = oEvent.clientX - textBox.offsetLeft;
        const disY = oEvent.clientY - textBox.offsetTop;
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          let x = ev.clientX - disX;
          let y = ev.clientY - disY;

          // 文字區塊移動時的邊界判斷-必須在文件內的範圍
          x = x <= 0 ? 0 : x;
          x = x >= contractArea.offsetWidth - textBox.offsetWidth ? contractArea.offsetWidth - textBox.offsetWidth : x;
          y = y <= 0 ? 0 : y;
          y = y >= contractArea.offsetHeight - textBox.offsetHeight ? contractArea.offsetHeight - textBox.offsetHeight : y;
          textBox.style.left = x + 'px';
          textBox.style.top = y + 'px';
          let MarginLeft = x.toFixed(2);
          let MarginTop = y.toFixed(2);
          // MarginLeft: 左邊界(cm)
          // MarginTop: 上邊界(cm)

          // 設定 簽署人區塊時要記錄上邊界和左邊界
          if (uuid) {
            self.signaturePositionsTemp.forEach(item => {
              if (item.Id === uuid) {
                item.MarginLeft = MarginLeft;
                item.MarginTop = MarginTop;
              }
            })
          }

        }
        // 文字區塊移出文件範圍取消移動是,防止移動過快觸發滑鼠移出事件，導致滑鼠彈起事件失效
        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        // 署標彈起後停止移動
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 圈選區塊縮放效果
      vmScaleHandler(ev, uuid, textBox, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        const pos = {
          'w': textBox.offsetWidth,
          'h': textBox.offsetHeight,
          'x': ev.clientX,
          'y': ev.clientY
        };
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          // 設置區塊的最小縮放為 35*35
          let w = Math.max(35, ev.clientX - pos.x + pos.w);
          let h = Math.max(35, ev.clientY - pos.y + pos.h);

          // 設置區塊的最大寬高
          textBox.style.width = w + 'px';
          textBox.style.height = h + 'px';
          // 設定 簽署人區塊時要記錄寬高
          if (uuid) {
            self.signaturePositionsTemp.forEach(item => {
              if (item.Id === uuid) {
                item.ScaleWidth = w;
                item.ScaleHeight = h;
              }
              self.defaultWidth = w;
              self.defaultHeight = h;
            })
          }
        }
        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 取消區塊
      vmRemoveHandler(ev, uuid, textBox, contractArea) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        textBox.remove();

        self.signaturePositionsTemp = self.signaturePositionsTemp.filter(item => item.Id !== uuid);

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 套用區塊
      vmUseHandler(ev, uuid, contractArea, textBox, scaleBox, removeBox, useBox, editBox, subtext) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        subtext.classList.add('hide');
        scaleBox.classList.add('hide');
        removeBox.classList.add('hide');
        useBox.classList.add('hide');
        editBox.classList.remove('hide');
        textBox.style.cursor = 'default';

        this.signaturePositionsTemp.forEach(item => {
          if (item.Id === uuid) {
            item.canEdit = false;
          }
        });

        this.operator(uuid, contractArea, textBox, scaleBox, removeBox, useBox, editBox, subtext);

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 編輯區塊
      vmEditHandler(ev, uuid, contractArea, textBox, scaleBox, removeBox, useBox, editBox, subtext) {
        const self = this;
        const oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        subtext.classList.remove('hide');
        scaleBox.classList.remove('hide');
        removeBox.classList.remove('hide');
        useBox.classList.remove('hide');
        editBox.classList.add('hide');
        textBox.style.cursor = 'move';

        this.signaturePositionsTemp.forEach(item => {
          if (item.Id === uuid) {
            item.canEdit = true;
          }
        });

        this.operator(uuid, contractArea, textBox, scaleBox, removeBox, useBox, editBox, subtext);

        contractArea.onmouseleave = function () {
          self.unBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          self.unBinding(contractArea);
        }
      },

      // 關閉訊息Modal後的導頁
      isCloseHandler() {
        if (this.isCanael || this.isCreate || this.isReject) {
          this.isCanael = false;
          this.isCreate = false;
          this.isReject = false;
          window.location.href = '@(Url.Action("ListToStampIndex", "ContractConsole"))';
        };
        if (this.isClear) {
          this.isClear = false;
        };
      },

      // 返回文件查詢
      backSearch() {
        window.location.href = '@(Url.Action("ListToStampIndex", "ContractConsole"))';
      },

      // 檢核輸入寬高，預設最小寬高為 35
      checkNumber(key, value) {
        if (!value) {
          this[key] = 35;
        }
      },

      // 文字轉換
      nameFilter(name) {
        return name?.length > 18 ? `${name.substring(0, 18)}...` : name;
      }
    },
  });
</script>

<script>
  // 選擇印鑑
  function useSealHandler(sealID, id) {
    $('#sealModal').modal('hide');
    const contractArea = document.querySelector("#contractImg");
    const pageItem = document.querySelector("#pdf__wrapper");
    const editItem = document.querySelector('.editItem');

    if (!editItem) {
      // 產生一個虛擬 sealBox
      const sealBox = document.createElement("div");
      // id 動態產生
      const uuid = ui_uuid8();
      sealBox.id = uuid;
      sealBox.setAttribute('class', 'vmSeal');
      sealBox.setAttribute('style', `top: calc(${(contractArea.offsetTop + Number.parseInt($(pageItem).scrollTop()))}px); left: calc(${(contractArea.offsetWidth - 170) / 2}px);`);
      document.querySelector("#contractImg").appendChild(sealBox);
      // 產生印章並放到 sealBox
      sealBox.innerHTML = `
      <img id="seal-${uuid}-img" class="sealimg h-100" src="${document.getElementById(id).getAttribute('src')}">
      <div id="scale-${uuid}" class="vmScale"></div>
      <button id="del-${uuid}" class="btn btn-sm vmDelete"><i class="far fa-times"></i></button>
      <button id="useAllSeal-${uuid}" class="btn btn-success opacity-75 btn-sm vmUseAll">套用文件</button>
      <button id="useSeal-${uuid}" class="btn btn-success opacity-75 btn-sm vmUse">套用</button>`;

      // 未套用前一次只能新增一個虛擬框
      const currentId = app.$data.currentSeal.Id;
      if (currentId) {
        const currentSeal = document.querySelector(`#${currentId}`);
        if (currentSeal) {
          currentSeal.remove();
        }
      }

      // 取得圖片類型 (用印 / 簽名)
      const stampType = $global.viewModel.stampType ? $global.viewModel.stampType : 'seal';
      const sealImg = document.querySelector(`#seal-${uuid}-img`);
      const sealImgWidth = sealImg.width;
      const sealImgHeight = sealImg.offsetHeight;
      var hScale = ((sealImgWidth / sealImg.naturalWidth) * 100);

      // 設置框最小縮放為160*30
      var w = Math.max(160, sealImgWidth)
      var h = Math.max(30, sealImgHeight)

      // 設置圖片虛擬框的寬高
      sealBox.style.width = w <= sealImgWidth ? `${sealImgWidth}px` : `${w}px`;
      sealBox.style.height = h + 'px';

      // 顯示和實際貼圖的比例差了 1.2 倍
      // 使用簽名時，不需要乘 1.2，原因待查
      let sealData = {
        Id: sealBox.id,
        SealID: sealID,
        currentItem: sealBox,
        SealScale: stampType === 'seal' ? (hScale * 1.2).toFixed(2) : hScale,
        MarginLeft: (sealBox.offsetLeft / 37.7).toFixed(2),
        MarginTop: (sealBox.offsetTop / 37.7).toFixed(2),
        stampType: stampType,
        useSeal: true,
        PageIndex: app.$data.selectedPage - 1
      }
      app.$data.currentSeal.Id = uuid;

      // 滑鼠拖曳效果
      sealBox.onmousedown = function (ev) {
        var oEvent = ev;
        // 阻擋瀏覽器的預設行為
        oEvent.preventDefault();
        var disX = oEvent.clientX - sealBox.offsetLeft;
        var disY = oEvent.clientY - sealBox.offsetTop;
        contractArea.onmousemove = function (ev) {
          oEvent = ev;
          oEvent.preventDefault();
          var x = oEvent.clientX - disX;
          var y = oEvent.clientY - disY;

          // 圖形移動時的邊界判斷-必須在文件內的範圍
          x = x <= 0 ? 0 : x;
          x = x >= contractArea.offsetWidth - sealBox.offsetWidth ? contractArea.offsetWidth - sealBox.offsetWidth : x;
          y = y <= 0 ? 0 : y;
          y = y >= contractArea.offsetHeight - sealBox.offsetHeight ? contractArea.offsetHeight - sealBox.offsetHeight : y;
          sealBox.style.left = x + 'px';
          sealBox.style.top = y + 'px';
          // MarginLeft: 左邊界(cm)
          // MarginTop: 上邊界(cm)
          sealData.MarginLeft = (x / 37.795).toFixed(2);
          sealData.MarginTop = (y / 37.795).toFixed(2);
        }
        // 圖形移出文件範圍取消移動是,防止移動過快觸發滑鼠移出事件，導致滑鼠彈起事件失效
        contractArea.onmouseleave = function () {
          sealUnBinding(contractArea);
        }
        // 署標彈起後停止移動
        contractArea.onmouseup = function () {
          sealUnBinding(contractArea);
        }
      }
      // 圖片縮放效果
      const scale = document.querySelector(`#scale-${uuid}`);
      scale.onmousedown = function (ev) {
        var oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        var pos = {
          'w': sealBox.offsetWidth,
          'h': sealBox.offsetHeight,
          'x': oEvent.clientX,
          'y': oEvent.clientY
        };
        contractArea.onmousemove = function (ev) {
          ev.preventDefault();
          // 設置圖片的最小縮放為160*30
          var w = Math.max(160, ev.clientX - pos.x + pos.w)
          var h = Math.max(30, ev.clientY - pos.y + pos.h)

          // 設置圖片的寬高
          const sealImgHeight = sealImg.offsetHeight;
          sealBox.style.width = w <= sealImg.width ? `${sealImg.width}px` : `${w}px`;
          sealBox.style.height = h + 'px';

          // 取得圖片縮放 % 比
          // 顯示和實際貼圖的比例差了 1.2 倍
          // 使用簽名時，不需要乘 1.2，原因待查
          hScale = ((sealImg.width / sealImg.naturalWidth) * 100);
          // var vScale = ((sealImg.height / sealImg.naturalHeight) * 100);
          sealData.SealScale = stampType === 'seal' ? hScale * 1.2 : hScale;
        }
        contractArea.onmouseleave = function () {
          sealUnBinding(contractArea);
        };

        contractArea.onmouseup = function () {
          sealUnBinding(contractArea);
        };
      }

      // 取消印鑑輸入框
      const deleteSeal = document.querySelector(`#del-${uuid}`);
      deleteSeal.onmousedown = function (ev) {
        var oEvent = ev;
        // 阻止冒泡,避免縮放時觸發移動事件
        oEvent.stopPropagation();
        oEvent.preventDefault();
        sealBox.remove();
        sealData = {};

        contractArea.onmouseleave = function () {
          sealUnBinding(contractArea);
        }
        contractArea.onmouseup = function () {
          sealUnBinding(contractArea);
        }
      }

      // 套用整份文件印鑑檔
      const useAllSeal = document.querySelector(`#useAllSeal-${uuid}`);
      useAllSeal.onmousedown = function (ev) {
        applySealHandler(ev, sealData, contractArea, true);
      }

      // 套用印鑑檔
      const useSeal = document.querySelector(`#useSeal-${uuid}`);
      useSeal.onmousedown = function (ev) {
        applySealHandler(ev, sealData, contractArea, false);
      }
    } else {
      // 未套用前一次只能選擇一個虛擬框
      const currentItemFilter = app.$data.usedStampList.filter(item => item.Id !== editItem.id);
      app.$data.usedStampList = currentItemFilter;

      // 簽署人用印 - 選擇印鑑後置入用印區塊
      const sealBox = document.querySelector(`#${editItem.id}`);
      editItem.innerHTML = '';
      editItem.innerHTML = `      
      <div id="vmBox-${editItem.id}-edit" class="vmBox--edit">
        <img id="seal-${editItem.id}-img" class="sealimg h-100" src="${document.getElementById(id).getAttribute('src')}">
      </div>
      <button id="useSeal-${editItem.id}" class="btn btn-success opacity-75 btn-sm vmUse"> 套用 </utton>
      `;
      const sealImg = document.querySelector(`#seal-${editItem.id}-img`);
      const stampType = $global.viewModel.stampType ? $global.viewModel.stampType : 'seal';
      // 圖片寬高設定
      const vmH = editItem.offsetHeight;
      const vmW = editItem.offsetWidth;
      let h = sealImg.height;
      let w = sealImg.width;

      if (w >= vmW) {
        sealImg.classList.remove('h-100');
        sealImg.classList.add('w-100');
      }
      hScale = (sealImg.height / sealImg.naturalHeight).toFixed(2);
      wScale = (sealImg.width / sealImg.naturalWidth).toFixed(2);

      // 將新增的印鑑檔資料暫存
      const sealData = {
        Id: editItem.id,
        SealID: sealID,
        currentItem: editItem,
        // 縮放比以高度為基準
        SealScale: hScale,
        MarginLeft: (editItem.offsetLeft / 37.7).toFixed(2),
        MarginTop: (editItem.offsetTop / 37.7).toFixed(2),
        stampType: stampType,
        useSeal: true,
        PageIndex: app.$data.selectedPage - 1
      }

      // 用印暫存列表
      app.$data.usedStampList.push(sealData);

      // 套用印鑑檔
      const useSeal = document.querySelector(`#useSeal-${editItem.id}`);
      useSeal.onmousedown = function (ev) {
        const sealFilter = app.$data.usedStampList.filter(item => item.Id === editItem.id)[0];
        applySealHandler(ev, sealFilter, contractArea, false);
      }

      // 編輯印章
      const editBox = document.querySelector(`#vmBox-${editItem.id}-edit`);
      editBox.addEventListener('click', function () {
        // 一次只能出現一個 editItem
        const children = contractArea.children;
        children.forEach(item => item.classList.remove('editItem'));
        sealBox.classList.add('editItem');
        // 簽章
        app.sealHandler();
      })
    }
  };

  // 套用印鑑檔
  function applySealHandler(ev, sealFilter, contractArea, doAllPages) {
    var oEvent = ev;
    // 阻止冒泡,避免縮放時觸發移動事件
    oEvent.stopPropagation();
    oEvent.preventDefault();
    // 套用印鑑

    commitSignature(sealFilter, doAllPages);

    contractArea.onmouseleave = function () {
      sealUnBinding(contractArea);
    }
    contractArea.onmouseup = function () {
      sealUnBinding(contractArea);
    }
  };

  // 儲存 - 套用印鑑檔
  function commitSignature(sealData, doAllPages) {
    clearErrors();
    const { Id, SealID, currentItem, SealScale, MarginLeft, MarginTop, stampType, useSeal, PageIndex } = sealData;
    const payload = {
      SealID,
      SealScale,
      MarginLeft,
      MarginTop,
      stampType,
      PageIndex,
      DoAllPages: doAllPages,
      KeyID: $global.viewModel.KeyID
    };
    showLoading();
    $.post('@Html.Raw(Url.Action("CommitPdfSignature", "ContractConsole"))', payload, function (data) {
      hideLoading();
      if ($.isPlainObject(data)) {
        if (data.result) {
          if (app.isEdit) {
            // 用印暫存列表
            app.$data.sealTempList.push(sealData);
          } else {
            if (useSeal) {
              // 套用一筆 contractSignaturePositions 要刪掉一筆紀錄才能計算有幾筆還未用簽
              const listData = app.$data.contractSignaturePositions;
              const listDataFilter = listData.filter(item => item.ID !== Id);
              app.$data.contractSignaturePositions = listDataFilter;

              const usedStampFilter = app.$data.usedStampList.filter(item => item.Id !== Id);
              app.$data.usedStampList = usedStampFilter;
            }
          }
          app.$data.currentSeal = {};
          currentItem && currentItem.remove();
          loadContractPage(PageIndex);
        } else {
          alertModal(data.message);
        }
      } else {
        $(data).appendTo($('body'));
      }
    });
  };

  // 新增印鑑檔
  function addSealHandler() {
    var event = event || window.event;
    if (event.target.form != undefined) {
      $(event.target.form).ajaxForm({
        url: '@Html.Raw(Url.Action("CommitSealTemplate", "UserProfile"))',
        data: $global.viewModel,
        beforeSubmit: function () {
          showLoading();
        },
        success: function (data) {
          hideLoading();
          if ($.isPlainObject(data)) {
            if (data.result) {
            } else {
              alertModal(data.message);
            }
          }
          else {
            $(data).insertBefore($('#addSeal'));
          }
        },
        error: function (xhr, ajaxOptions, thrownError) {
          hideLoading();
          console.log(xhr.status);
          alertModal(thrownError);
        }
      }).submit();
    }
  };

  // 新增簽名檔
  function addSignature(sealUrl) {
    if (sealUrl == null || sealUrl == '') {
      return;
    }
    var index = sealUrl.indexOf(',');
    var viewModel = {
      'SealData': sealUrl.substring(index + 1)
    };

    showLoading();
    $.ajax({
      type: 'POST',
      url: '@(Url.Action("CommitSignatureTemplate", "UserProfile"))',
      data: JSON.stringify(viewModel),
      type: "POST",
      //dataType: "json",
      contentType: "application/json;charset=utf-8",
      success: function (data) {
        hideLoading();
        if ($.isPlainObject(data)) {
          if (data.result) {
          } else {
            alertModal(data.message);
          }
        }
        else {
          $('#addSignature').append(data);
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        hideLoading();
        console.log(xhr.status);
        console.log(thrownError);
      }
    });
  };

  function sealUnBinding(contractArea) {
    contractArea.onmousemove = null;
    contractArea.onmouseup = null;
  };

  // 載入當前頁面
  function loadContractPage(pageIndex) {
    showLoading();
    $.post('@Html.Raw(Url.Action("LoadContractPage", "ContractConsole"))', { 'KeyID': contractID, 'PageIndex': pageIndex }, function (data) {
      hideLoading();
      if ($.isPlainObject(data)) {
        $('#contractImg').css(data);
      } else {
        $(data).appendTo($('body'));
      }
    });
  };

  // 導覽小幫手
  //const steps = [
  //  {
  //    selector: '#step1',
  //    step: 1,
  //    title: 'Step 1：指定合約雙方',
  //    content: '選擇合約雙方：<ul><li>指定起約人：選擇甲方。</li><li>指定簽署人：選擇乙方 (可複選)。</li></ul>'
  //  },
  //  {
  //    selector: '#step2',
  //    step: 2,
  //    title: 'Step 2：文件審閱',
  //    content: '若上傳的合約已經用完印，<br>請起約方或簽約方在文件審閱的地方打勾，就可以省略用印的步驟。<br>直接送出文件。'
  //  },
  //  {
  //    selector: '#step3',
  //    step: 3,
  //    title: 'Step 3：創建欄位',
  //    content: '<ul><li>先選擇要編輯的頁面。</li><li>如果需要用印、簽名或填寫註記、壓日期，請使用下方按鈕新增：<ul></li><li>簽名或蓋章：可以新增簽名檔或印章並置入文件內。</li><li>日期：可以新增日期在文件上。</li><li>文字：可以新增文字備註在文件上。</li></ul></li></ul>'
  //  },
  //  {
  //    selector: '#step4',
  //    step: 4,
  //    title: '相關操作',
  //    content: '<ul><li>清除用印：若要重新編輯合約，可點選清除用印。</li><li>取消：取消這份合約。</li><li>退回合約：若覺得這份合約尚有疑慮，可選擇退回合約。</li></ul>'
  //  },
  //  {
  //    selector: '#step5',
  //    step: 5,
  //    title: '編輯畫面',
  //    content: '合約編輯畫面，可以拖曳、縮放邊及區域，<br>確認好位置後按「套用」可將編輯區塊套用在該頁面。<br>按「套用全部」可將編輯區塊套用在全部頁面。'
  //  }
  //];
</script>
