@{
  Layout = "~/Views/Shared/MasterPage.cshtml";
  <script src="~/js/api.js"></script>
}

<div id="userProdile" class="container-lg py-4">
  <section class="mb-2">
    <div class="row align-items-center">
      <div class="col-6">
        <h4 class="mb-0 fw-bolder">簽署者設定</h4>
      </div>
      <div class="col-6 text-end">
        <div class="ms-auto tooltip__wrapper">
          <button type="button" class="btn btn-lg btn-success rounded-pill opacity-75" v-on:click="editData('addNew')">
            <i class="fal fa-file-plus"></i>
          </button>
          <div class="tooltip__text">新增簽署者</div>
        </div>
      </div>
    </div>
  </section>

  <!-- 使用者資料查詢列表 -->
  <section>
    <div v-if="contractorList.length > 0">
      <div class="card shadow-sm p-2 mb-3 table-responsive">
        <table class="table table-hover mb-0">
          <thead>
            <tr>
              <th scope="col">簽署者PID</th>
              <th scope="col">簽署者Title</th>
              <th scope="col">電子郵件</th>
              <th scope="col" class="text-center">功能</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(contractor, index) in contractorList" :key="`c_${index}`">
              <td class="fs-13">{{ contractor.pid }}</td>
              <td class="fs-13">{{ contractor.title }}</td>
              <td class="fs-13">{{ contractor.email }}</td>
              <td class="text-nowrap text-center">
                <!-- 編輯 -->
                <span v-if="contractor.isOperator" class="tooltip__wrapper mx-1">
                  <button type="button" class="btn btn-sm btn-primary opacity-75 rounded-pill icon__rounded"
                    v-on:click="editData('edit', contractor)">
                    <i class="fal fa-edit"></i>
                  </button>
                  <div class="tooltip__text">修改</div>
                </span>
                <!-- 發送密碼修改通知 -->
                 <span v-if="contractor.isOperator" class="tooltip__wrapper mx-1">
                    <button type="button" id="ApplyPassword"
                            class="btn btn-sm btn-success opacity-75 rounded-pill icon__rounded"
                                            v-on:click="sendApplyPassword(contractor.uid)">
                        <i class="far fa-envelope"></i>
                    </button>
                    <div class="tooltip__text">發送密碼修改通知</div>
                </span>
                <span class="text-black-50 opacity-75"> | </span>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <!-- 分頁模組 -->
      <div class="row g-3 align-items-center justify-content-between">
        <div class="col-auto">
          <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mb-0">
              <!-- 第一頁 -->
              <li class=" page-item" :class="{'disabled' : page === 1}">
                <a class="page-link" v-on:click="firstPage">
                  <i class="far fa-step-backward"></i>
                </a>
              </li>
              <!-- 前一頁 -->
              <li class=" page-item" :class="{'disabled' : page === 1}">
                <a class="page-link" v-on:click="previousPage">
                  <i class="fal fa-chevron-left"></i>
                </a>
              </li>
              <!-- 頁面列表 -->
              <li v-for="n in totalPages" :key="n" :v-model="page" class="page-item" :class="{'active' : page === n}">
                <a class="page-link" v-on:click="changePage(n)">{{ n }}</a>
              </li>
              <!-- 下一頁 -->
              <li class="page-item" :class="{'disabled' : page === totalPages}">
                <a class="page-link" v-on:click="nextPage">
                  <i class="fal fa-chevron-right"></i>
                </a>
              </li>
              <!-- 最後一頁 -->
              <li class="page-item" :class="{'disabled' : page === totalPages}">
                <a class="page-link" v-on:click="lastPage">
                  <i class="far fa-step-forward"></i>
                </a>
              </li>
            </ul>
          </nav>
        </div>
        <div class="col-auto">
          <div class="row g-3 align-items-center">
            <div class="col-auto fs-13">
              <label for="PageSize">每頁筆數：</label>
            </div>
            <div class="col-auto">
              <select v-model="pageSize" class="form-select form-control-sm" name="PageSize" id="PageSize"
                v-on:change="resetPageSize">
                <option>10</option>
                <option>30</option>
                <option>50</option>
                <option>100</option>
                <option>200</option>
              </select>
            </div>
            <div class="col-auto fs-13">
              共 {{ totalPages }} 頁，{{ totalRecordCount }} 筆
            </div>
          </div>
        </div>
      </div>
    </div>
    <div v-else class="card shadow-sm p-3 text-center">
      <span class="text-primary opacity-75" style="font-size: 50px;">
        <i class="fad fa-folder-open"></i>
      </span>
      <span class="text-primary opacity-75 fw-bolder">目前尚無使用者資料</span>
    </div>
  </section>

  <!-- 確認 Dialog -->
  <div class="modal fade" id="confirmModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered ">
      <div class="modal-content">
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title" id="staticBackdropLabel"></h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center h5 fw-bolder" v-html="confirmMsg"></div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button type="button" class="btn btn-secondary opacity-50" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="confirmHandler()">確定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 新增 Dialog -->
  <div class="modal fade" id="addNewModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="addNewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title fw-bolder" id="staticBackdropLabel">{{ editTitle }}簽署者資料</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form v-on:submit.prevent method="post" enctype="multipart/form-data">
            <div class="container">
              <div class="row row-cols-1 m-3 mb-lg-0 data-item">
                <div class="col input__height">
                  <div class="row">
                    <label for="title" class="col-sm-12 col-md-3 col-form-label fw-bolder">簽署人名稱</label>
                    <div class="col-sm-12 col-md-9">
                      <input v-model="formData.Title" type="text" class="form-control form-control-sm"
                        :class="{'is-invalid': isTitle}" id="title" placeholder="公司/單位名稱 - 稱呼/職編"
                        v-on:focus="resetValidate('isTitle')" v-on:blur="validateField('isTitle', formData.Title)" />
                      <div class="invalid-feedback">
                        請輸入簽署人名稱
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col input__height">
                  <div class="row">
                    <label for="userEmail" class="col-sm-12 col-md-3 col-form-label fw-bolder">電子郵件</label>
                    <div class="col-sm-12 col-md-9">
                      <input v-model="formData.EMail" type="text" class="form-control form-control-sm"
                        :class="{'is-invalid': isEMail}" name="EMail" id="userEmail"
                        v-on:focus="resetValidate('isEMail')"
                        v-on:blur="validateField('isEMail', formData.EMail);checkMail('isEMail', formData.EMail)"
                        disabled="none" />
                      <div class="invalid-feedback">
                        請輸入有效的電子郵件
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col input__height">
                  <div class="row">
                    <label for="iRegion" class="col-sm-12 col-md-3 col-form-label fw-bolder">憑證類型</label>
                    <div class="col-sm-12 col-md-9">
                      <select v-model="formData.Region" id="iRegion" name="Region" class="form-select form-select-sm"
                        :class="{'is-invalid': isRegion}" disabled v-on:focus="resetValidate('isRegion')"
                        v-on:blur="validateField('isRegion', formData.Region)">
                        <option v-for="(item, index) in regionList" :key="index" :value="item.value">{{ item.text }}
                        </option>
                      </select>
                      <div class="invalid-feedback">
                        請選擇憑證類型
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
            v-on:click="initialValidate">取消</button>
          <button type="button" class="btn btn-primary" v-on:click="saveHandler">確定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 訊息 Dialog -->
  <div class="modal fade" id="infoModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body text-center h5 fw-bolder pt-5">
          <div v-html="infoMsg"></div>
        </div>
        <div class="modal-footer border-top-0 justify-content-center">
          <button v-if="msgStatus" type="button" class="btn btn-secondary" data-bs-dismiss="modal"
            v-on:click="inquireData">關閉</button>
          <button v-else type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
        </div>
      </div>
    </div>
  </div>

</div>
<script>
  // 憑證類型選單
  const regionList = [
    { text: '請選擇', value: '' },
    { text: '工商憑證', value: 'O' },
    { text: '企業憑證', value: 'E' },
  ];

  var app = new Vue({
    el: '#userProdile',
    data: {
      regionList,
      contractorList: [],
      userId: null,
      formType: 'addNew',
      /**
       * 簽署者基本資料
       * {string} KeyID 登入者 userid
       * {string} EMail 電子郵件
       * {string} Title 簽署者名稱 ex: 測試公司-稱呼
       * {string} Region 憑證類型 E:企業憑證, O:工商憑證(預設)
       */
      // 編輯
      initialFormData: {
        Title: null,
        EMail: null,
        Region: 'O'
      },
      formData: {},
      /** 分頁 options
       * totalRecordCount: 總筆數
       * pageSize: 每頁筆數
       * totalPages: 總頁數
       * page: 目前頁面
       */
      totalRecordCount: 0,
      pageSize: 10,
      page: 1,
      currentUserData: {},
      editType: null,
      confirmMsg: null,
      editTitle: null,
      // 編輯欄位檢核
      isTitle: false,
      isEMail: false,
      isRegion: false,
      infoMsg: null,
      msgStatus: false,
    },
    computed: {
      // 計算總頁數
      totalPages() {
        const totalCount = Number.parseInt(this.totalRecordCount, 10);
        const pageSize = Number.parseInt(this.pageSize, 10);
        return Math.ceil(totalCount / pageSize);
      }
    },
    async created() {
      // 取得當前使用者資料
      await this.getCurrentUserInfo();
      // 載入簽署者資料
      await this.inquireData();
    },
    methods: {
      // 取得當前使用者資料
      getCurrentUserInfo() {
        getData('@(Url.Action("GetUser", "UserProfile"))')
          .then((res) => {
            const { data, hasError, message } = res;
            if (!hasError) {
              // 成功
              this.userId = data.euid;
            } else {
              // 失敗
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message.replace(/、/g, '<br>')} </div>`;
              $("#infoModal").modal("show");
            }
          })
      },

      // 查詢簽署者資料
      inquireData() {
        this.msgStatus = false;
        // 表單資料
        this.page = 1;
        this.fetchAPI();
      },

      // 取得簽署者列表
      fetchAPI() {
        showLoading();
        // Post API
        postData('@(Url.Action("GetOperators", "Task"))')
          .then((res) => {
            hideLoading();
            const { data, hasError, message, url } = res;
            if (!hasError) {
              // 成功 - 取得簽署人清單
              this.contractorList = data;
              this.totalRecordCount = this.contractorList.length;
            } else {
              // 失敗
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message.replace(/、/g, '<br>')} </div>`;
              $("#infoModal").modal("show");
            }
          })
      },

      // 新增 / 編輯 表單Modal
      editData(type, data) {
        $('#addNewModal').modal('show');

        const isNew = type === 'addNew';
        const emailEl = document.querySelector('#userEmail');
        this.formType = type;
        this.editTitle = isNew ? '新增' : '編輯';
        if (type === 'addNew') {
          this.formData = JSON.parse(JSON.stringify(this.initialFormData));
          this.formData.KeyID = this.userId;
          emailEl.removeAttribute('disabled');
        };
        if (type === 'edit') {
          const { email: EMail, uid: KeyID, title: Title, region: Region } = data;
          this.formData = { EMail, KeyID, Title, Region };
          emailEl.setAttribute('disabled', '');
        };
      },

      // 開啟確認視窗
      confirmHandler() {
        if (this.editType === 'canEditStamp') {
          this.setEditStamp();
        }
        if (this.editType === 'stop') {
          this.setStop();
        }
        if (this.editType === 'delete') {
          this.confirmDel();
        }
        $("#confirmModal").modal('hide');
      },

      // 儲存表單
      saveHandler() {
        // 輸入欄位檢核
        this.isTitle = !this.formData.Title;
        this.isEMail = !this.formData.EMail;
        this.isRegion = !this.formData.Region;

        if (this.formType === 'addNew') {
          // 檢核email格式是否正確
          this.checkMail('isEMail', this.formData.EMail);
          // 如果檢核通過，就會送出表單
          if (this.isTitle || this.isEMail || this.isRegion) return;
        } else {
          if (this.isTitle || this.isEMail) return;
        }

        const { KeyID, Title, EMail, Region } = this.formData;
        let payload = {};

        if (this.formType === 'addNew') {
          payload = { KeyID, Title, EMail, Region }
        } else {
          payload = { KeyID, Title }
        };

        showLoading();
        // 新增
        if (this.formType === 'addNew') {
          postData('@(Url.Action("CreateOperator", "UserProfile"))', payload)
            .then((res) => {
              const { data, hasError, message, url } = res;
              this.msgStatus = !hasError;
              hideLoading();
              if (!hasError) {
                // 成功 - 取得簽署人清單
                $('#addNewModal').modal('hide');
                this.contractorList = data;
                this.totalRecordCount = this.contractorList.length;
                this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base">
                ${this.formData.Title}<br>新增成功</div>`;
                $("#infoModal").modal("show");
              } else {
                // 失敗
                $('#addNewModal').modal('hide');
                this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message.replace(/、/g, '<br>')} </div>`;
                $("#infoModal").modal("show");
              }
            });
        };
        // 編輯
        if (this.formType === 'edit') {
          postData('@(Url.Action("UpdateOperator", "UserProfile"))', payload)
            .then((res) => {
              const { data, hasError, message, url } = res;
              this.msgStatus = !hasError;
              hideLoading();
              if (!hasError) {
                // 成功 - 取得簽署人清單
                $('#addNewModal').modal('hide');
                this.contractorList = data;
                this.totalRecordCount = this.contractorList.length;
                this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base">
                ${this.formData.Title}<br>更新成功</div>`;
                $("#infoModal").modal("show");
              } else {
                // 失敗
                $('#addNewModal').modal('hide');
                this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message.replace(/、/g, '<br>')} </div>`;
                $("#infoModal").modal("show");
              }
            });
        }
      },
            // 發送密碼修改申請
            sendApplyPassword(uid
            ) {
                showLoading();
                const payload = {
                    UID: uid,
                    Item: "createPassword"
                };
                $.ajax({
                    url: '@(Url.Action("PasswordApply", "Account"))',
                    data: JSON.stringify(payload),
                    type: "POST",
                    //dataType: "json",
                    contentType: "application/json;charset=utf-8",
                    success: function (data) {
                        if (data.hasError) {
                            app.infoMsg = `
                    <div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="fas fa-exclamation-circle"></i></div>
                    <div>${data.message}</div>`;
                            $('#infoModal').modal('show');
                        } else {
                            app.infoMsg = `
                    <div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div>
                    <div>已發送email</div>`;
                            $('#infoModal').modal('show');
                        }
                        hideLoading();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        hideLoading();
                        //alertModal(thrownError);
                        app.infoMsg = `
                  <div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="fas fa-exclamation-circle"></i></div>
                  <div>${thrownError}</div>`;
                        $('#infoModal').modal('show');
                        console.log(xhr.status);
                        console.log(thrownError);
                    }
                });
            },
      // 輸入 email 欄位驗證
      checkMail(status, contactEmail) {
        const emailRegex = /^[A-Za-z0-9._%+-]+@@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
        const checkEmail = emailRegex.test(contactEmail);
        this[status] = !checkEmail;
      },

      // 欄位檢核
      validateField(status, data) {
        this[status] = !data;
      },

      // 初始化檢核
      initialValidate() {
        const validateList = [
          'isTitle',
          'isEMail',
          'isRegion',
        ];
        validateList.forEach(item => this.resetValidate(item));
      },

      // Reset 欄位檢核
      resetValidate(status) {
        this[status] = false;
      },

      // 設定每頁筆數
      resetPageSize() {
        // 重新查詢列表並回傳資料
        // 每次切換時，都要回到第1頁z
        this.page = 1;
        this.fetchAPI();
      },

      // 換頁
      changePage(page) {
        this.page = page;
        // 重新查詢列表並回傳資料
        this.fetchAPI();
      },

      // 第一頁
      firstPage() {
        this.page = 1;
        // 重新查詢列表並回傳資料
        this.fetchAPI();
      },

      // 前一頁
      previousPage() {
        const currentPage = Number.parseInt(this.page, 10);
        this.page = currentPage > 1 ? this.page - 1 : currentPage;
        // 重新查詢列表並回傳資料
        this.fetchAPI();
      },

      // 下一頁
      nextPage() {
        const currentPage = Number.parseInt(this.page, 10);
        this.page = currentPage < this.totalPages ? this.page + 1 : currentPage;
        // 重新查詢列表並回傳資料
        this.fetchAPI();
      },
      
      // 最後一頁
      lastPage() {
        this.page = this.totalPages;
        // 重新查詢列表並回傳資料
        this.fetchAPI();
      },
    }
  });
</script>
