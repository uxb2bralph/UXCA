@*
For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model ContractHome.Models.Dto.DigitalSignModal
@{

}

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta http-equiv="x-ua-compatible" content="ie=edge" />
  <title>安心簽 UX SIGN 數位簽章管理系統</title>
  <!-- MDB icon -->
  <link rel="icon" href="~/images/uxSign.ico" type="image/x-icon" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="~/css/fontawesome/all.css" />
  <!-- Google Fonts Roboto -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900">
  <!-- Boostrap -->
  <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
  <!-- 網站設定樣式 -->
  <link rel="stylesheet" href="~/css/site.css" />
  <script type="text/javascript" src="~/lib/jquery/dist/jquery.js"></script>
  <script type="text/javascript" src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
  <script src="~/js/vue.js"></script>
  @{
    await Html.RenderPartialAsync("~/Views/Shared/CommonScriptInclude.cshtml");
    <script src="~/js/api.js"></script>
  }
</head>

<body>
  <div id="DigitalSignModal" class="container mt-5">
    <div v-if="!isValidated" class="card">
      <div class="card-body">
        <h5 class="modal-title fw-bolder" id="staticBackdropLabel">
          {{ certStatus === 'certValidate' ? '憑證驗證' : '憑證註冊' }}
        </h5>
        <div class="card-text">
          <div v-if="certStatus === 'certValidate'" class="pb-3">為確保簽署憑證的有效性及正確性，將進行憑證驗證。</div>
          <div v-else class="pb-3">為確保簽署憑證的有效性及正確性，將進行憑證註冊。</div>
          <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
            <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
              <path
                d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
            </symbol>
            <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
              <path
                d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
            </symbol>
            <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
              <path
                d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
            </symbol>
          </svg>
          <div class="alert alert-primary d-flex align-items-center" role="alert">
            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:">
              <use xlink:href="#info-fill" />
            </svg>
            <div>
              請準備好讀卡機及工商憑證 / 自然人憑證以進行身分綁定。
              <br>
              請先安裝
              <a title="https://api-hisecurecdn.cdn.hinet.net/HiCOS_Client.zip"
                href="https://api-hisecurecdn.cdn.hinet.net/HiCOS_Client.zip"
                class="alert-link text-decoration-underline">HiCOS卡片管理工具(ZIP)</a>
              ，可協助檢查用戶IC卡與讀卡機驅動程式是否安裝成功，IC卡能否讀取，並提供PIN碼驗證，簽章驗章與加解密功能檢測。
              <a title="HICOS卡片管理工具使用說明(PDF)" href="http://moica.nat.gov.tw/download/File/HiCOS.pdf"
                class="alert-link text-decoration-underline">HICOS卡片管理工具使用說明(PDF)</a>
            </div>
          </div>
          <div class="container">
            <div class="row pt-3 pb-3 mb-3 border-bottom border-1">
              <div class="col input__height">
                <div class="row">
                  <label for="Pin" class="col-sm-12 col-md-2 col-form-label fs-14 fw-bolder">PIN碼</label>
                  <div class="col-sm-12 col-md-10">
                    <input ref="pin" v-model="signature.pin" type="password" class="form-control" name="Pin" id="Pin" />
                    <div class="invalid-feedback text-end">
                      {{ '請輸入卡片PIN碼' }}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div v-if="signatureInfo.message || signatureInfo.message2">
            <div class="alert alert-danger d-flex align-items-center" role="alert">
              <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:">
                <use xlink:href="#exclamation-triangle-fill" />
              </svg>
              <div>
                {{ signatureInfo.message }} <br> {{ signatureInfo.message2 }}
              </div>
            </div>
          </div>
          <!-- 卡片簽章資訊，除錯時用 -->
          <!--
            <div v-if="signatureInfo.ret_code === 0" class="alert alert-success" role="alert">
              <dl class="row">
                <dt class="col-md-3">cardSN (卡號)：</dt>
                <dd class="col-md-9">{{signatureInfo.cardSN}}</dd>
                <dt class="col-md-3">ret_code (結果)：</dt>
                <dd class="col-md-9">{{signatureInfo.ret_code}}</dd>
                <dt class="col-md-3">signature (簽章值)：</dt>
                <dd class="col-md-9 text-break">{{signatureInfo.signature}}</dd>
                <dt class="col-md-3">certb64 (憑證)：</dt>
                <dd class="col-md-9 text-break">{{signatureInfo.certb64}}</dd>
              </dl>
            </div>
            -->
        </div>
        <div class="d-flex justify-content-center">
          <button type="button" class="btn btn-secondary opacity-75 mx-1" v-on:click="backToSomewhere">取消</button>
          <button type="button" class="btn btn-primary mx-1" v-on:click="getUserCert">
            {{ certStatus === 'certValidate' ? '憑證驗證' : '憑證註冊' }}
          </button>
        </div>
      </div>
    </div>

    <div v-else class="card">
      <div class="card-body">
        <h5 class="card-title fw-bolder" id="staticBackdropLabel">簽署文件</h5>
        <div class="card-text">
          <div class="card d-flex flex-row align-items-center justify-content-center p-3 mb-4">
            <div class="text-center fs-1 cornflowerBlue pe-3">
              <i class="fad fa-file-signature fa-lg"></i>
            </div>
            <div>
              <div class="h6 fw-bolder">
                文件編號： <span v-html="contractNo"></span>
              </div>
              <div class="h6 fw-bolder">
                文件名稱： <span v-html="contractTitle"></span>
              </div>
            </div>
          </div>
          <div class="text-center h5 fw-bolder">
            您將代表 <span class="text-primary opacity-75">" <span v-html="companyName"></span> "</span> 對此文件進行數位簽署
          </div>
          <div class="pt-3 text-center">
            <span>如同意簽署，則您的個人資訊紕露亦遵循 服務條款 及 隱私權政策 的規範。</span>
            <div class="d-flex align-items-center justify-content-center pt-2 fs-6 fw-bold">
              <input class="form-check-input mt-0 me-2" type="checkbox" id="agree" v-on:change="checkAgree">
              <label class="form-check-label text-primary" for="agree">
                我已閱讀並同意遵守 <a class="link" href="@Url.Action("Personal", "Home")">個資保護</a> 及 <a class="link"
                  href="@Url.Action("Privacy", "Home")">隱私政策</a>
              </label>
            </div>
          </div>
          <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
            <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
              <path
                d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
            </symbol>
          </svg>
          <div class="alert alert-danger d-flex align-items-center justify-content-center mt-4" role="alert">
            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:">
              <use xlink:href="#info-fill" />
            </svg>
            <div class="fs-14 fw-bolder">
              簽章成功後，本文件即具有正式法律效力。
            </div>
          </div>
        </div>
        <div class="d-flex justify-content-center">
          <button type="button" class="btn btn-secondary opacity-75 mx-1" id="backToSomewhere"
            v-on:click="backToSomewhere">取消</button>
          <button type="button" id="confirmSign" class="btn btn-primary mx-1" :class="{ disabled: !agree }"
            v-on:click="confirmSignHandler">確定</button>
        </div>
      </div>
    </div>
    <!-- 訊息 Dialog -->
    <div class="modal fade" id="infoModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
      aria-labelledby="infoModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-body text-center h5 fw-bolder pt-5">
            <div v-html="infoMsg"></div>
          </div>
          <div class="modal-footer border-top-0 justify-content-center">
            <button v-if="isCommitSuccess" type="button" class="btn btn-secondary" data-bs-dismiss="modal"
              v-on:click="backToSomewhere">關閉</button>
            <button v-else type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="signBox" class="p-5"></div>
</body>
<script>
  var app = new Vue({
    el: '#DigitalSignModal',
    data() {
      return {
        contractID: '@(Model.ContractID)',
        contractNo: '@(Model.ContractNo)',
        contractTitle: '@(Model.ContractTitle)',
        companyName: '@(Model.CompanyName)',
        agree: false,
        // 憑證簽章
        signature: {
          type: 'PKCS1',
          tbs: '',
          tbsEncoding: 'none',
          pin: '',
          hashAlgorithm: 'SHA256',
          nonce: '',
          withCardSN: 'false'
        },
        // 取得簽章資訊
        signatureInfoInit: {
          cardSN: null,
          ret_code: null,
          signature: null,
          certb64: null,
          last_error: null,
          message: null,
          message2: null,
        },
        certStatus: null,
        signatureInfo: {},
        certInfo: null,
        currentUserInfo: {},
        isValidated: false,
        infoMsg: null,
        isCommitSuccess: false,
      }
    },
    mounted() {
      // 取得當前使用者資料
      this.getCurrentUserInfo();

      // 憑證通道
      window.addEventListener("message", receiveMessage, false);
    },
    methods: {
      // 初始化憑證檢查
      getUserCertForm(status) {
        this.certStatus = status;
        this.signature.pin = '';
        this.signatureInfo = { ...this.signatureInfoInit };
      },

      // 取得當前使用者資料
      getCurrentUserInfo() {
        getData('@(Url.Action("GetUser", "UserProfile"))')
          .then((res) => {
            const { data, hasError, message } = res;
            if (!hasError) {
              // 成功
              this.currentUserInfo = data;
              this.signature.tbs = data.userName;
              this.checkSignExchange();
            } else {
              // 失敗
              console.log('error')
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message.replace(/、/g, '<br>')} </div>`;
              $("#infoModal").modal("show");
            }
          })
      },

      // 企業用戶(非以證換證)不用檢驗憑證
      checkSignExchange() {
        if (this.currentUserInfo.isSignExchange) {
          // 憑證檢驗
          this.isValidated = false;
          this.getUserCertForm('certValidate');
          // 先不檢驗
          // this.isValidated = true;
        } else {
          this.isValidated = true;
        }
      },

      // 導頁
      backToSomewhere() {
        window.location.href = '@(Url.Action("Logout", "Account"))';
      },

      // 讀取個資同意
      checkAgree() {
        this.agree = !this.agree;
      },

      // 進行簽署
      confirmSignHandler() {
        const self = this;
        showLoading();
        $.post('@Html.Raw(Url.Action("CommitDigitalSignature", "ContractConsole"))', {
          'KeyID': self.contractID,
          'Signature': null
        }, function (res) {
          hideLoading();
          if ($.isPlainObject(res)) {
            const { data, hasError, message, result } = res;
            if (result) {
              // 成功
              self.infoMsg = `<div class="pb-2 text-success opacity-75" style="font-size: 4rem"><i class="far fa-check-circle"></i></div><div class="lh-base">${contractTitle}( ${contractNo} )<br>簽署完成！</div>`;
              self.isCommitSuccess = true;
            } else {
              // 失敗
              self.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message} </div>`;
            }
            $('#infoModal').modal('show');
          } else {
            $(res).appendTo($('#signBox'));
          }
        });
      },

      // 讀取憑證
      getUserCert() {
        const isPin = !!this.signature.pin;
        // 檢核是否有輸入卡片 PIN 碼
        if (!isPin) {
          this.$refs.pin.classList.add('is-invalid');
          return;
        } else {
          this.$refs.pin.classList.remove('is-invalid');
        }

        popupForm = window.open(
          "http://localhost:61161/popupForm",
          "popupForm",
          "height=200, width=80, left=100, top=20"
        );
        popupForm.postMessage("hello there!", "http://localhost:61161");
        timeout = setTimeout(() => {
          popupForm.close();
          alert("尚未安裝元件");
        }, 5000);
      },

      // 憑證綁定
      certRegister() {
        this.infoMsg = null;
        const { certb64, signature } = this.signatureInfo;
        const payload = {
          B64Cert: certb64,
          Signature: signature,
        }
        if (!certb64 || !signature) return;
        showLoading();
        postData('@(Url.Action("Post", "IdentityCert"))', payload)
          .then((res) => {
            const { HasError, Data, Message } = res;
            if (!HasError) {
              // 成功
              $("#userCertModal").modal("hide");
              // 綁定成功後再進行憑證驗證
              console.log('註冊成功，憑證已綁定');
              this.certValidate();
            } else {
              // 失敗
              const { EUID, Signature, B64Cert } = Message;
              const signatureString = EUID ? EUID.join(', ') : Signature ? Signature.join(', ') : B64Cert ? B64Cert.join(', ') : '資料有誤';
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${signatureString} </div>`;
              $("#infoModal").modal("show");
            }
            hideLoading();
          })
      },

      // 憑證驗證
      certValidate() {
        this.infoMsg = null;
        const { signature } = this.signatureInfo;
        if (!signature) return;
        const payload = {
          Signature: signature,
        }
        showLoading();
        postData('@(Url.Action("Validate", "IdentityCert"))', payload)
          .then((res) => {
            const { HasError, Data, Message } = res;
            if (!HasError) {
              // 成功
              console.log('憑證驗證ok');
              this.isValidated = true;
            } else {
              // 失敗
              const { EUID, Signature, B64Cert, IdentityCert } = Message;
              if (!!IdentityCert) {
                const identityCertString = IdentityCert.join(', ');
                // 未註冊憑證時，執行註冊程序
                console.log('未註冊憑證');
                this.certRegister();
              } else {
                const signatureString = EUID ? EUID.join(', ') : Signature ? Signature.join(', ') : B64Cert ? B64Cert.join(', ') : '資料有誤';
                this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${signatureString} </div>`;
                $("#infoModal").modal("show");
              }
            }
            hideLoading();
          })
      },

      // 憑證檢查是否和公司或個人登錄資訊相符
      userValidate() {
        this.infoMsg = null;
        const { certb64, signature } = this.signatureInfo;
        const payload = {
          B64Cert: certb64,
          Signature: signature,
        }
        if (!certb64 || !signature) return;
        showLoading();
        postData('@(Url.Action("ValidateBySubject", "IdentityCert"))', payload)
          .then((res) => {
            const { hasError, data, message } = res;
            console.log({ hasError, data, message });
            if (!hasError) {
              // 成功
              console.log('憑證驗證ok');
              this.isValidated = true;
            } else {
              // 失敗
              this.infoMsg = `<div class="pb-2 text-danger opacity-75" style="font-size: 4rem"><i class="far fa-exclamation-circle"></i></div><div class="lh-base"> ${message} </div>`;
              $("#infoModal").modal("show");
            }
            hideLoading();
          })
      },
    }
  });

  let popupForm;
  let timeout;

  function receiveMessage(event) {
    if (event.origin !== "http://localhost:61161") return;

    let ret = JSON.parse(event.data);
    if (ret.func === "getTbs") {
      clearTimeout(timeout);

      // 進行數位簽章
      const tbsData = {
        func: "MakeSignature",
        signatureType: app.$data.signature.type,
        tbs: app.$data.signature.tbs,
        tbsEncoding: app.$data.signature.tbsEncoding,
        pin: app.$data.signature.pin,
        hashAlgorithm: app.$data.signature.hashAlgorithm,
        nonce: app.$data.signature.nonce,
        withCardSN: app.$data.signature.withCardSN,
      };
      popupForm.postMessage(JSON.stringify(tbsData), "*");
    } else {
      // 將簽章結果寫入欄位
      const result = JSON.parse(event.data);
      if (result) {
        app.$data.signatureInfo.cardSN = result.cardSN;
        app.$data.signatureInfo.ret_code = result.ret_code;
        app.$data.signatureInfo.signature = result.signature;
        app.$data.signatureInfo.certb64 = result.certb64;
        app.$data.signatureInfo.last_error = result.last_error;
        app.$data.signatureInfo.message = result.message || null;
        app.$data.signatureInfo.message2 = result.message2 || null;
      }
      // 憑證檢查是否和公司或個人登錄資訊相符
      app.userValidate();

      // 憑證如果未認證，就註冊後再驗證 (驗證註冊綁定功能先關掉)
      //if (app.$data.certStatus === 'certValidate') {
      //  app.certValidate();
      //} else {
      //  app.certRegister();
      //}
    }
  }
</script>