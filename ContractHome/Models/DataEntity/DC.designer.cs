#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContractHome.Models.DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertCDS_Document(CDS_Document instance);
    partial void UpdateCDS_Document(CDS_Document instance);
    partial void DeleteCDS_Document(CDS_Document instance);
    partial void InsertCHT_Token(CHT_Token instance);
    partial void UpdateCHT_Token(CHT_Token instance);
    partial void DeleteCHT_Token(CHT_Token instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertContractingIntent(ContractingIntent instance);
    partial void UpdateContractingIntent(ContractingIntent instance);
    partial void DeleteContractingIntent(ContractingIntent instance);
    partial void InsertContractingParty(ContractingParty instance);
    partial void UpdateContractingParty(ContractingParty instance);
    partial void DeleteContractingParty(ContractingParty instance);
    partial void InsertContractingUser(ContractingUser instance);
    partial void UpdateContractingUser(ContractingUser instance);
    partial void DeleteContractingUser(ContractingUser instance);
    partial void InsertContractNoteRequest(ContractNoteRequest instance);
    partial void UpdateContractNoteRequest(ContractNoteRequest instance);
    partial void DeleteContractNoteRequest(ContractNoteRequest instance);
    partial void InsertContractSealRequest(ContractSealRequest instance);
    partial void UpdateContractSealRequest(ContractSealRequest instance);
    partial void DeleteContractSealRequest(ContractSealRequest instance);
    partial void InsertContractSignature(ContractSignature instance);
    partial void UpdateContractSignature(ContractSignature instance);
    partial void DeleteContractSignature(ContractSignature instance);
    partial void InsertContractSignaturePositionRequest(ContractSignaturePositionRequest instance);
    partial void UpdateContractSignaturePositionRequest(ContractSignaturePositionRequest instance);
    partial void DeleteContractSignaturePositionRequest(ContractSignaturePositionRequest instance);
    partial void InsertContractSignatureRequest(ContractSignatureRequest instance);
    partial void UpdateContractSignatureRequest(ContractSignatureRequest instance);
    partial void DeleteContractSignatureRequest(ContractSignatureRequest instance);
    partial void InsertContractUserSignature(ContractUserSignature instance);
    partial void UpdateContractUserSignature(ContractUserSignature instance);
    partial void DeleteContractUserSignature(ContractUserSignature instance);
    partial void InsertContractUserSignatureRequest(ContractUserSignatureRequest instance);
    partial void UpdateContractUserSignatureRequest(ContractUserSignatureRequest instance);
    partial void DeleteContractUserSignatureRequest(ContractUserSignatureRequest instance);
    partial void InsertDocumentProcessLog(DocumentProcessLog instance);
    partial void UpdateDocumentProcessLog(DocumentProcessLog instance);
    partial void DeleteDocumentProcessLog(DocumentProcessLog instance);
    partial void InsertIdentityCert(IdentityCert instance);
    partial void UpdateIdentityCert(IdentityCert instance);
    partial void DeleteIdentityCert(IdentityCert instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrganizationStatus(OrganizationStatus instance);
    partial void UpdateOrganizationStatus(OrganizationStatus instance);
    partial void DeleteOrganizationStatus(OrganizationStatus instance);
    partial void InsertOrganizationToken(OrganizationToken instance);
    partial void UpdateOrganizationToken(OrganizationToken instance);
    partial void DeleteOrganizationToken(OrganizationToken instance);
    partial void InsertOrganizationUser(OrganizationUser instance);
    partial void UpdateOrganizationUser(OrganizationUser instance);
    partial void DeleteOrganizationUser(OrganizationUser instance);
    partial void InsertSealTemplate(SealTemplate instance);
    partial void UpdateSealTemplate(SealTemplate instance);
    partial void DeleteSealTemplate(SealTemplate instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUserRoleDefinition(UserRoleDefinition instance);
    partial void UpdateUserRoleDefinition(UserRoleDefinition instance);
    partial void DeleteUserRoleDefinition(UserRoleDefinition instance);
    #endregion
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CDS_Document> CDS_Document
		{
			get
			{
				return this.GetTable<CDS_Document>();
			}
		}
		
		public System.Data.Linq.Table<CHT_Token> CHT_Token
		{
			get
			{
				return this.GetTable<CHT_Token>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contract
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<ContractingIntent> ContractingIntent
		{
			get
			{
				return this.GetTable<ContractingIntent>();
			}
		}
		
		public System.Data.Linq.Table<ContractingParty> ContractingParty
		{
			get
			{
				return this.GetTable<ContractingParty>();
			}
		}
		
		public System.Data.Linq.Table<ContractingUser> ContractingUser
		{
			get
			{
				return this.GetTable<ContractingUser>();
			}
		}
		
		public System.Data.Linq.Table<ContractNoteRequest> ContractNoteRequest
		{
			get
			{
				return this.GetTable<ContractNoteRequest>();
			}
		}
		
		public System.Data.Linq.Table<ContractSealRequest> ContractSealRequest
		{
			get
			{
				return this.GetTable<ContractSealRequest>();
			}
		}
		
		public System.Data.Linq.Table<ContractSignature> ContractSignature
		{
			get
			{
				return this.GetTable<ContractSignature>();
			}
		}
		
		public System.Data.Linq.Table<ContractSignaturePositionRequest> ContractSignaturePositionRequest
		{
			get
			{
				return this.GetTable<ContractSignaturePositionRequest>();
			}
		}
		
		public System.Data.Linq.Table<ContractSignatureRequest> ContractSignatureRequest
		{
			get
			{
				return this.GetTable<ContractSignatureRequest>();
			}
		}
		
		public System.Data.Linq.Table<ContractUserSignature> ContractUserSignature
		{
			get
			{
				return this.GetTable<ContractUserSignature>();
			}
		}
		
		public System.Data.Linq.Table<ContractUserSignatureRequest> ContractUserSignatureRequest
		{
			get
			{
				return this.GetTable<ContractUserSignatureRequest>();
			}
		}
		
		public System.Data.Linq.Table<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this.GetTable<DocumentProcessLog>();
			}
		}
		
		public System.Data.Linq.Table<IdentityCert> IdentityCert
		{
			get
			{
				return this.GetTable<IdentityCert>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organization
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationStatus> OrganizationStatus
		{
			get
			{
				return this.GetTable<OrganizationStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationToken> OrganizationToken
		{
			get
			{
				return this.GetTable<OrganizationToken>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationUser> OrganizationUser
		{
			get
			{
				return this.GetTable<OrganizationUser>();
			}
		}
		
		public System.Data.Linq.Table<SealTemplate> SealTemplate
		{
			get
			{
				return this.GetTable<SealTemplate>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfile
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRole
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleDefinition> UserRoleDefinition
		{
			get
			{
				return this.GetTable<UserRoleDefinition>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDS_Document")]
	public partial class CDS_Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private System.Nullable<int> _DocType;
		
		private System.DateTime _DocDate;
		
		private System.Nullable<int> _CurrentStep;
		
		private System.Nullable<int> _ChannelID;
		
		private System.Nullable<int> _ProcessType;
		
		private EntityRef<Contract> _Contract;
		
		private EntitySet<DocumentProcessLog> _DocumentProcessLog;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnDocTypeChanging(System.Nullable<int> value);
    partial void OnDocTypeChanged();
    partial void OnDocDateChanging(System.DateTime value);
    partial void OnDocDateChanged();
    partial void OnCurrentStepChanging(System.Nullable<int> value);
    partial void OnCurrentStepChanged();
    partial void OnChannelIDChanging(System.Nullable<int> value);
    partial void OnChannelIDChanged();
    partial void OnProcessTypeChanging(System.Nullable<int> value);
    partial void OnProcessTypeChanged();
    #endregion
		
		public CDS_Document()
		{
			this._Contract = default(EntityRef<Contract>);
			this._DocumentProcessLog = new EntitySet<DocumentProcessLog>(new Action<DocumentProcessLog>(this.attach_DocumentProcessLog), new Action<DocumentProcessLog>(this.detach_DocumentProcessLog));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocType", DbType="Int")]
		public System.Nullable<int> DocType
		{
			get
			{
				return this._DocType;
			}
			set
			{
				if ((this._DocType != value))
				{
					this.OnDocTypeChanging(value);
					this.SendPropertyChanging();
					this._DocType = value;
					this.SendPropertyChanged("DocType");
					this.OnDocTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime NOT NULL")]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStep", DbType="Int")]
		public System.Nullable<int> CurrentStep
		{
			get
			{
				return this._CurrentStep;
			}
			set
			{
				if ((this._CurrentStep != value))
				{
					this.OnCurrentStepChanging(value);
					this.SendPropertyChanging();
					this._CurrentStep = value;
					this.SendPropertyChanged("CurrentStep");
					this.OnCurrentStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelID", DbType="Int")]
		public System.Nullable<int> ChannelID
		{
			get
			{
				return this._ChannelID;
			}
			set
			{
				if ((this._ChannelID != value))
				{
					this.OnChannelIDChanging(value);
					this.SendPropertyChanging();
					this._ChannelID = value;
					this.SendPropertyChanged("ChannelID");
					this.OnChannelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessType", DbType="Int")]
		public System.Nullable<int> ProcessType
		{
			get
			{
				return this._ProcessType;
			}
			set
			{
				if ((this._ProcessType != value))
				{
					this.OnProcessTypeChanging(value);
					this.SendPropertyChanging();
					this._ProcessType = value;
					this.SendPropertyChanged("ProcessType");
					this.OnProcessTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contract_CDS_Document", Storage="_Contract", ThisKey="DocID", OtherKey="ContractID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.CDS_Document = null;
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.CDS_Document = this;
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DocumentProcessLog_CDS_Document", Storage="_DocumentProcessLog", ThisKey="DocID", OtherKey="DocID", DeleteRule="CASCADE")]
		public EntitySet<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this._DocumentProcessLog;
			}
			set
			{
				this._DocumentProcessLog.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.CDS_Document = this;
		}
		
		private void detach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.CDS_Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHT_Token")]
	public partial class CHT_Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _Email;
		
		private string _Token;
		
		private string _ClusterID;
		
		private string _ApplicationKey;
		
		private string _ThirdPartyClusterID;
		
		private EntityRef<Organization> _Organization;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnClusterIDChanging(string value);
    partial void OnClusterIDChanged();
    partial void OnApplicationKeyChanging(string value);
    partial void OnApplicationKeyChanged();
    partial void OnThirdPartyClusterIDChanging(string value);
    partial void OnThirdPartyClusterIDChanged();
    #endregion
		
		public CHT_Token()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClusterID", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ClusterID
		{
			get
			{
				return this._ClusterID;
			}
			set
			{
				if ((this._ClusterID != value))
				{
					this.OnClusterIDChanging(value);
					this.SendPropertyChanging();
					this._ClusterID = value;
					this.SendPropertyChanged("ClusterID");
					this.OnClusterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationKey", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ApplicationKey
		{
			get
			{
				return this._ApplicationKey;
			}
			set
			{
				if ((this._ApplicationKey != value))
				{
					this.OnApplicationKeyChanging(value);
					this.SendPropertyChanging();
					this._ApplicationKey = value;
					this.SendPropertyChanged("ApplicationKey");
					this.OnApplicationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdPartyClusterID", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ThirdPartyClusterID
		{
			get
			{
				return this._ThirdPartyClusterID;
			}
			set
			{
				if ((this._ThirdPartyClusterID != value))
				{
					this.OnThirdPartyClusterIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdPartyClusterID = value;
					this.SendPropertyChanged("ThirdPartyClusterID");
					this.OnThirdPartyClusterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CHT_Token_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true, DeleteOnNull=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.CHT_Token = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.CHT_Token = this;
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private string _FilePath;
		
		private string _ContractNo;
		
		private string _Title;
		
		private System.Data.Linq.Binary _ContractContent;
		
		private System.Nullable<bool> _IsPassStamp;
		
		private System.Nullable<int> _UserInProgress;
		
		private int _CompanyID;
		
		private System.Nullable<System.DateTime> _NotifyUntilDate;
		
		private System.Nullable<int> _CreateUID;
		
		private EntityRef<CDS_Document> _CDS_Document;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntitySet<ContractingParty> _ContractingParty;
		
		private EntitySet<ContractingUser> _ContractingUser;
		
		private EntitySet<ContractNoteRequest> _ContractNoteRequest;
		
		private EntitySet<ContractSealRequest> _ContractSealRequest;
		
		private EntityRef<ContractSignature> _ContractSignature;
		
		private EntitySet<ContractSignaturePositionRequest> _ContractSignaturePositionRequest;
		
		private EntitySet<ContractSignatureRequest> _ContractSignatureRequest;
		
		private EntityRef<ContractUserSignature> _ContractUserSignature;
		
		private EntitySet<ContractUserSignatureRequest> _ContractUserSignatureRequest;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContractContentChanging(System.Data.Linq.Binary value);
    partial void OnContractContentChanged();
    partial void OnIsPassStampChanging(System.Nullable<bool> value);
    partial void OnIsPassStampChanged();
    partial void OnUserInProgressChanging(System.Nullable<int> value);
    partial void OnUserInProgressChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnNotifyUntilDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNotifyUntilDateChanged();
    partial void OnCreateUIDChanging(System.Nullable<int> value);
    partial void OnCreateUIDChanged();
    #endregion
		
		public Contract()
		{
			this._CDS_Document = default(EntityRef<CDS_Document>);
			this._Organization = default(EntityRef<Organization>);
			this._UserProfile = default(EntityRef<UserProfile>);
			this._ContractingParty = new EntitySet<ContractingParty>(new Action<ContractingParty>(this.attach_ContractingParty), new Action<ContractingParty>(this.detach_ContractingParty));
			this._ContractingUser = new EntitySet<ContractingUser>(new Action<ContractingUser>(this.attach_ContractingUser), new Action<ContractingUser>(this.detach_ContractingUser));
			this._ContractNoteRequest = new EntitySet<ContractNoteRequest>(new Action<ContractNoteRequest>(this.attach_ContractNoteRequest), new Action<ContractNoteRequest>(this.detach_ContractNoteRequest));
			this._ContractSealRequest = new EntitySet<ContractSealRequest>(new Action<ContractSealRequest>(this.attach_ContractSealRequest), new Action<ContractSealRequest>(this.detach_ContractSealRequest));
			this._ContractSignature = default(EntityRef<ContractSignature>);
			this._ContractSignaturePositionRequest = new EntitySet<ContractSignaturePositionRequest>(new Action<ContractSignaturePositionRequest>(this.attach_ContractSignaturePositionRequest), new Action<ContractSignaturePositionRequest>(this.detach_ContractSignaturePositionRequest));
			this._ContractSignatureRequest = new EntitySet<ContractSignatureRequest>(new Action<ContractSignatureRequest>(this.attach_ContractSignatureRequest), new Action<ContractSignatureRequest>(this.detach_ContractSignatureRequest));
			this._ContractUserSignature = default(EntityRef<ContractUserSignature>);
			this._ContractUserSignatureRequest = new EntitySet<ContractUserSignatureRequest>(new Action<ContractUserSignatureRequest>(this.attach_ContractUserSignatureRequest), new Action<ContractUserSignatureRequest>(this.detach_ContractUserSignatureRequest));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._CDS_Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(256)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractNo", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(64)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractContent", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ContractContent
		{
			get
			{
				return this._ContractContent;
			}
			set
			{
				if ((this._ContractContent != value))
				{
					this.OnContractContentChanging(value);
					this.SendPropertyChanging();
					this._ContractContent = value;
					this.SendPropertyChanged("ContractContent");
					this.OnContractContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPassStamp", DbType="Bit")]
		public System.Nullable<bool> IsPassStamp
		{
			get
			{
				return this._IsPassStamp;
			}
			set
			{
				if ((this._IsPassStamp != value))
				{
					this.OnIsPassStampChanging(value);
					this.SendPropertyChanging();
					this._IsPassStamp = value;
					this.SendPropertyChanged("IsPassStamp");
					this.OnIsPassStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInProgress", DbType="Int")]
		public System.Nullable<int> UserInProgress
		{
			get
			{
				return this._UserInProgress;
			}
			set
			{
				if ((this._UserInProgress != value))
				{
					this.OnUserInProgressChanging(value);
					this.SendPropertyChanging();
					this._UserInProgress = value;
					this.SendPropertyChanged("UserInProgress");
					this.OnUserInProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyUntilDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> NotifyUntilDate
		{
			get
			{
				return this._NotifyUntilDate;
			}
			set
			{
				if ((this._NotifyUntilDate != value))
				{
					this.OnNotifyUntilDateChanging(value);
					this.SendPropertyChanging();
					this._NotifyUntilDate = value;
					this.SendPropertyChanged("NotifyUntilDate");
					this.OnNotifyUntilDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateUID", DbType="Int")]
		public System.Nullable<int> CreateUID
		{
			get
			{
				return this._CreateUID;
			}
			set
			{
				if ((this._CreateUID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreateUIDChanging(value);
					this.SendPropertyChanging();
					this._CreateUID = value;
					this.SendPropertyChanged("CreateUID");
					this.OnCreateUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contract_CDS_Document", Storage="_CDS_Document", ThisKey="ContractID", OtherKey="DocID", IsForeignKey=true, DeleteOnNull=true)]
		public CDS_Document CDS_Document
		{
			get
			{
				return this._CDS_Document.Entity;
			}
			set
			{
				CDS_Document previousValue = this._CDS_Document.Entity;
				if (((previousValue != value) 
							|| (this._CDS_Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CDS_Document.Entity = null;
						previousValue.Contract = null;
					}
					this._CDS_Document.Entity = value;
					if ((value != null))
					{
						value.Contract = this;
						this._ContractID = value.DocID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("CDS_Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contract_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Contract.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Contract.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contract_UserProfile", Storage="_UserProfile", ThisKey="CreateUID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Contract.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Contract.Add(this);
						this._CreateUID = value.UID;
					}
					else
					{
						this._CreateUID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingParty_Contract", Storage="_ContractingParty", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="CASCADE")]
		public EntitySet<ContractingParty> ContractingParty
		{
			get
			{
				return this._ContractingParty;
			}
			set
			{
				this._ContractingParty.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingUser_Contract", Storage="_ContractingUser", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="NO ACTION")]
		public EntitySet<ContractingUser> ContractingUser
		{
			get
			{
				return this._ContractingUser;
			}
			set
			{
				this._ContractingUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractNoteRequest_Contract", Storage="_ContractNoteRequest", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="CASCADE")]
		public EntitySet<ContractNoteRequest> ContractNoteRequest
		{
			get
			{
				return this._ContractNoteRequest;
			}
			set
			{
				this._ContractNoteRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSealRequest_Contract", Storage="_ContractSealRequest", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="CASCADE")]
		public EntitySet<ContractSealRequest> ContractSealRequest
		{
			get
			{
				return this._ContractSealRequest;
			}
			set
			{
				this._ContractSealRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignature_Contract", Storage="_ContractSignature", ThisKey="ContractID", OtherKey="ContractID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public ContractSignature ContractSignature
		{
			get
			{
				return this._ContractSignature.Entity;
			}
			set
			{
				ContractSignature previousValue = this._ContractSignature.Entity;
				if (((previousValue != value) 
							|| (this._ContractSignature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractSignature.Entity = null;
						previousValue.Contract = null;
					}
					this._ContractSignature.Entity = value;
					if ((value != null))
					{
						value.Contract = this;
					}
					this.SendPropertyChanged("ContractSignature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignaturePositionRequest_Contract", Storage="_ContractSignaturePositionRequest", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="CASCADE")]
		public EntitySet<ContractSignaturePositionRequest> ContractSignaturePositionRequest
		{
			get
			{
				return this._ContractSignaturePositionRequest;
			}
			set
			{
				this._ContractSignaturePositionRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignatureRequest_Contract", Storage="_ContractSignatureRequest", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="CASCADE")]
		public EntitySet<ContractSignatureRequest> ContractSignatureRequest
		{
			get
			{
				return this._ContractSignatureRequest;
			}
			set
			{
				this._ContractSignatureRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignature_Contract", Storage="_ContractUserSignature", ThisKey="ContractID", OtherKey="ContractID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public ContractUserSignature ContractUserSignature
		{
			get
			{
				return this._ContractUserSignature.Entity;
			}
			set
			{
				ContractUserSignature previousValue = this._ContractUserSignature.Entity;
				if (((previousValue != value) 
							|| (this._ContractUserSignature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractUserSignature.Entity = null;
						previousValue.Contract = null;
					}
					this._ContractUserSignature.Entity = value;
					if ((value != null))
					{
						value.Contract = this;
					}
					this.SendPropertyChanged("ContractUserSignature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignatureRequest_Contract", Storage="_ContractUserSignatureRequest", ThisKey="ContractID", OtherKey="ContractID", DeleteRule="CASCADE")]
		public EntitySet<ContractUserSignatureRequest> ContractUserSignatureRequest
		{
			get
			{
				return this._ContractUserSignatureRequest;
			}
			set
			{
				this._ContractUserSignatureRequest.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractingParty(ContractingParty entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractingParty(ContractingParty entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractingUser(ContractingUser entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractingUser(ContractingUser entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractNoteRequest(ContractNoteRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractNoteRequest(ContractNoteRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractSealRequest(ContractSealRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractSealRequest(ContractSealRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractSignaturePositionRequest(ContractSignaturePositionRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractSignaturePositionRequest(ContractSignaturePositionRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractSignatureRequest(ContractSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractSignatureRequest(ContractSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_ContractUserSignatureRequest(ContractUserSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractUserSignatureRequest(ContractUserSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractingIntent")]
	public partial class ContractingIntent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IntentID;
		
		private string _Description;
		
		private EntitySet<ContractingParty> _ContractingParty;
		
		private EntitySet<SealTemplate> _SealTemplate;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIntentIDChanging(int value);
    partial void OnIntentIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ContractingIntent()
		{
			this._ContractingParty = new EntitySet<ContractingParty>(new Action<ContractingParty>(this.attach_ContractingParty), new Action<ContractingParty>(this.detach_ContractingParty));
			this._SealTemplate = new EntitySet<SealTemplate>(new Action<SealTemplate>(this.attach_SealTemplate), new Action<SealTemplate>(this.detach_SealTemplate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IntentID
		{
			get
			{
				return this._IntentID;
			}
			set
			{
				if ((this._IntentID != value))
				{
					this.OnIntentIDChanging(value);
					this.SendPropertyChanging();
					this._IntentID = value;
					this.SendPropertyChanged("IntentID");
					this.OnIntentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingParty_ContractingIntent", Storage="_ContractingParty", ThisKey="IntentID", OtherKey="IntentID", DeleteRule="NO ACTION")]
		public EntitySet<ContractingParty> ContractingParty
		{
			get
			{
				return this._ContractingParty;
			}
			set
			{
				this._ContractingParty.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SealTemplate_ContractingIntent", Storage="_SealTemplate", ThisKey="IntentID", OtherKey="IntentID", DeleteRule="NO ACTION")]
		public EntitySet<SealTemplate> SealTemplate
		{
			get
			{
				return this._SealTemplate;
			}
			set
			{
				this._SealTemplate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractingParty(ContractingParty entity)
		{
			this.SendPropertyChanging();
			entity.ContractingIntent = this;
		}
		
		private void detach_ContractingParty(ContractingParty entity)
		{
			this.SendPropertyChanging();
			entity.ContractingIntent = null;
		}
		
		private void attach_SealTemplate(SealTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ContractingIntent = this;
		}
		
		private void detach_SealTemplate(SealTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ContractingIntent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractingParty")]
	public partial class ContractingParty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private int _CompanyID;
		
		private System.Nullable<int> _IntentID;
		
		private System.Nullable<bool> _IsInitiator;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<ContractingIntent> _ContractingIntent;
		
		private EntityRef<Organization> _Organization;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnIntentIDChanging(System.Nullable<int> value);
    partial void OnIntentIDChanged();
    partial void OnIsInitiatorChanging(System.Nullable<bool> value);
    partial void OnIsInitiatorChanged();
    #endregion
		
		public ContractingParty()
		{
			this._Contract = default(EntityRef<Contract>);
			this._ContractingIntent = default(EntityRef<ContractingIntent>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentID", DbType="Int")]
		public System.Nullable<int> IntentID
		{
			get
			{
				return this._IntentID;
			}
			set
			{
				if ((this._IntentID != value))
				{
					if (this._ContractingIntent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIntentIDChanging(value);
					this.SendPropertyChanging();
					this._IntentID = value;
					this.SendPropertyChanged("IntentID");
					this.OnIntentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInitiator", DbType="Bit")]
		public System.Nullable<bool> IsInitiator
		{
			get
			{
				return this._IsInitiator;
			}
			set
			{
				if ((this._IsInitiator != value))
				{
					this.OnIsInitiatorChanging(value);
					this.SendPropertyChanging();
					this._IsInitiator = value;
					this.SendPropertyChanged("IsInitiator");
					this.OnIsInitiatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingParty_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractingParty.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractingParty.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingParty_ContractingIntent", Storage="_ContractingIntent", ThisKey="IntentID", OtherKey="IntentID", IsForeignKey=true)]
		public ContractingIntent ContractingIntent
		{
			get
			{
				return this._ContractingIntent.Entity;
			}
			set
			{
				ContractingIntent previousValue = this._ContractingIntent.Entity;
				if (((previousValue != value) 
							|| (this._ContractingIntent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractingIntent.Entity = null;
						previousValue.ContractingParty.Remove(this);
					}
					this._ContractingIntent.Entity = value;
					if ((value != null))
					{
						value.ContractingParty.Add(this);
						this._IntentID = value.IntentID;
					}
					else
					{
						this._IntentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContractingIntent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingParty_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.ContractingParty.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.ContractingParty.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractingUser")]
	public partial class ContractingUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private int _UserID;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<ContractUserSignatureRequest> _ContractUserSignatureRequest;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public ContractingUser()
		{
			this._Contract = default(EntityRef<Contract>);
			this._UserProfile = default(EntityRef<UserProfile>);
			this._ContractUserSignatureRequest = default(EntityRef<ContractUserSignatureRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingUser_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractingUser.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractingUser.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingUser_UserProfile", Storage="_UserProfile", ThisKey="UserID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ContractingUser.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ContractingUser.Add(this);
						this._UserID = value.UID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignatureRequest_ContractingUser", Storage="_ContractUserSignatureRequest", ThisKey="ContractID,UserID", OtherKey="ContractID,UserID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public ContractUserSignatureRequest ContractUserSignatureRequest
		{
			get
			{
				return this._ContractUserSignatureRequest.Entity;
			}
			set
			{
				ContractUserSignatureRequest previousValue = this._ContractUserSignatureRequest.Entity;
				if (((previousValue != value) 
							|| (this._ContractUserSignatureRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractUserSignatureRequest.Entity = null;
						previousValue.ContractingUser = null;
					}
					this._ContractUserSignatureRequest.Entity = value;
					if ((value != null))
					{
						value.ContractingUser = this;
					}
					this.SendPropertyChanged("ContractUserSignatureRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractNoteRequest")]
	public partial class ContractNoteRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _ContractID;
		
		private System.Nullable<System.DateTime> _StampDate;
		
		private string _Note;
		
		private System.Nullable<int> _StampUID;
		
		private System.Nullable<double> _SealScale;
		
		private System.Nullable<double> _MarginTop;
		
		private System.Nullable<double> _MarginLeft;
		
		private System.Nullable<int> _PageIndex;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnStampDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStampDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnStampUIDChanging(System.Nullable<int> value);
    partial void OnStampUIDChanged();
    partial void OnSealScaleChanging(System.Nullable<double> value);
    partial void OnSealScaleChanged();
    partial void OnMarginTopChanging(System.Nullable<double> value);
    partial void OnMarginTopChanged();
    partial void OnMarginLeftChanging(System.Nullable<double> value);
    partial void OnMarginLeftChanged();
    partial void OnPageIndexChanging(System.Nullable<int> value);
    partial void OnPageIndexChanged();
    #endregion
		
		public ContractNoteRequest()
		{
			this._Contract = default(EntityRef<Contract>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL")]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StampDate
		{
			get
			{
				return this._StampDate;
			}
			set
			{
				if ((this._StampDate != value))
				{
					this.OnStampDateChanging(value);
					this.SendPropertyChanging();
					this._StampDate = value;
					this.SendPropertyChanged("StampDate");
					this.OnStampDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampUID", DbType="Int")]
		public System.Nullable<int> StampUID
		{
			get
			{
				return this._StampUID;
			}
			set
			{
				if ((this._StampUID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStampUIDChanging(value);
					this.SendPropertyChanging();
					this._StampUID = value;
					this.SendPropertyChanged("StampUID");
					this.OnStampUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealScale", DbType="Float")]
		public System.Nullable<double> SealScale
		{
			get
			{
				return this._SealScale;
			}
			set
			{
				if ((this._SealScale != value))
				{
					this.OnSealScaleChanging(value);
					this.SendPropertyChanging();
					this._SealScale = value;
					this.SendPropertyChanged("SealScale");
					this.OnSealScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginTop", DbType="Float")]
		public System.Nullable<double> MarginTop
		{
			get
			{
				return this._MarginTop;
			}
			set
			{
				if ((this._MarginTop != value))
				{
					this.OnMarginTopChanging(value);
					this.SendPropertyChanging();
					this._MarginTop = value;
					this.SendPropertyChanged("MarginTop");
					this.OnMarginTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginLeft", DbType="Float")]
		public System.Nullable<double> MarginLeft
		{
			get
			{
				return this._MarginLeft;
			}
			set
			{
				if ((this._MarginLeft != value))
				{
					this.OnMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._MarginLeft = value;
					this.SendPropertyChanged("MarginLeft");
					this.OnMarginLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageIndex", DbType="Int")]
		public System.Nullable<int> PageIndex
		{
			get
			{
				return this._PageIndex;
			}
			set
			{
				if ((this._PageIndex != value))
				{
					this.OnPageIndexChanging(value);
					this.SendPropertyChanging();
					this._PageIndex = value;
					this.SendPropertyChanged("PageIndex");
					this.OnPageIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractNoteRequest_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractNoteRequest.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractNoteRequest.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractNoteRequest_UserProfile", Storage="_UserProfile", ThisKey="StampUID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ContractNoteRequest.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ContractNoteRequest.Add(this);
						this._StampUID = value.UID;
					}
					else
					{
						this._StampUID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractSealRequest")]
	public partial class ContractSealRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _ContractID;
		
		private int _SealID;
		
		private System.Nullable<System.DateTime> _StampDate;
		
		private System.Data.Linq.Binary _SealImage;
		
		private System.Nullable<int> _StampUID;
		
		private System.Nullable<double> _SealScale;
		
		private System.Nullable<double> _MarginTop;
		
		private System.Nullable<double> _MarginLeft;
		
		private System.Nullable<int> _PageIndex;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<SealTemplate> _SealTemplate;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnSealIDChanging(int value);
    partial void OnSealIDChanged();
    partial void OnStampDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStampDateChanged();
    partial void OnSealImageChanging(System.Data.Linq.Binary value);
    partial void OnSealImageChanged();
    partial void OnStampUIDChanging(System.Nullable<int> value);
    partial void OnStampUIDChanged();
    partial void OnSealScaleChanging(System.Nullable<double> value);
    partial void OnSealScaleChanged();
    partial void OnMarginTopChanging(System.Nullable<double> value);
    partial void OnMarginTopChanged();
    partial void OnMarginLeftChanging(System.Nullable<double> value);
    partial void OnMarginLeftChanged();
    partial void OnPageIndexChanging(System.Nullable<int> value);
    partial void OnPageIndexChanged();
    #endregion
		
		public ContractSealRequest()
		{
			this._Contract = default(EntityRef<Contract>);
			this._SealTemplate = default(EntityRef<SealTemplate>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL")]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealID", DbType="Int NOT NULL")]
		public int SealID
		{
			get
			{
				return this._SealID;
			}
			set
			{
				if ((this._SealID != value))
				{
					if (this._SealTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSealIDChanging(value);
					this.SendPropertyChanging();
					this._SealID = value;
					this.SendPropertyChanged("SealID");
					this.OnSealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StampDate
		{
			get
			{
				return this._StampDate;
			}
			set
			{
				if ((this._StampDate != value))
				{
					this.OnStampDateChanging(value);
					this.SendPropertyChanging();
					this._StampDate = value;
					this.SendPropertyChanged("StampDate");
					this.OnStampDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealImage", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SealImage
		{
			get
			{
				return this._SealImage;
			}
			set
			{
				if ((this._SealImage != value))
				{
					this.OnSealImageChanging(value);
					this.SendPropertyChanging();
					this._SealImage = value;
					this.SendPropertyChanged("SealImage");
					this.OnSealImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampUID", DbType="Int")]
		public System.Nullable<int> StampUID
		{
			get
			{
				return this._StampUID;
			}
			set
			{
				if ((this._StampUID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStampUIDChanging(value);
					this.SendPropertyChanging();
					this._StampUID = value;
					this.SendPropertyChanged("StampUID");
					this.OnStampUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealScale", DbType="Float")]
		public System.Nullable<double> SealScale
		{
			get
			{
				return this._SealScale;
			}
			set
			{
				if ((this._SealScale != value))
				{
					this.OnSealScaleChanging(value);
					this.SendPropertyChanging();
					this._SealScale = value;
					this.SendPropertyChanged("SealScale");
					this.OnSealScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginTop", DbType="Float")]
		public System.Nullable<double> MarginTop
		{
			get
			{
				return this._MarginTop;
			}
			set
			{
				if ((this._MarginTop != value))
				{
					this.OnMarginTopChanging(value);
					this.SendPropertyChanging();
					this._MarginTop = value;
					this.SendPropertyChanged("MarginTop");
					this.OnMarginTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginLeft", DbType="Float")]
		public System.Nullable<double> MarginLeft
		{
			get
			{
				return this._MarginLeft;
			}
			set
			{
				if ((this._MarginLeft != value))
				{
					this.OnMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._MarginLeft = value;
					this.SendPropertyChanged("MarginLeft");
					this.OnMarginLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageIndex", DbType="Int")]
		public System.Nullable<int> PageIndex
		{
			get
			{
				return this._PageIndex;
			}
			set
			{
				if ((this._PageIndex != value))
				{
					this.OnPageIndexChanging(value);
					this.SendPropertyChanging();
					this._PageIndex = value;
					this.SendPropertyChanged("PageIndex");
					this.OnPageIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSealRequest_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractSealRequest.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractSealRequest.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSealRequest_SealTemplate", Storage="_SealTemplate", ThisKey="SealID", OtherKey="SealID", IsForeignKey=true)]
		public SealTemplate SealTemplate
		{
			get
			{
				return this._SealTemplate.Entity;
			}
			set
			{
				SealTemplate previousValue = this._SealTemplate.Entity;
				if (((previousValue != value) 
							|| (this._SealTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SealTemplate.Entity = null;
						previousValue.ContractSealRequest.Remove(this);
					}
					this._SealTemplate.Entity = value;
					if ((value != null))
					{
						value.ContractSealRequest.Add(this);
						this._SealID = value.SealID;
					}
					else
					{
						this._SealID = default(int);
					}
					this.SendPropertyChanged("SealTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSealRequest_UserProfile", Storage="_UserProfile", ThisKey="StampUID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ContractSealRequest.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ContractSealRequest.Add(this);
						this._StampUID = value.UID;
					}
					else
					{
						this._StampUID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractSignature")]
	public partial class ContractSignature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private int _CompanyID;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<ContractSignatureRequest> _ContractSignatureRequest;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public ContractSignature()
		{
			this._Contract = default(EntityRef<Contract>);
			this._ContractSignatureRequest = default(EntityRef<ContractSignatureRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if ((this._Contract.HasLoadedOrAssignedValue || this._ContractSignatureRequest.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._ContractSignatureRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignature_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractSignature = null;
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractSignature = this;
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignature_ContractSignatureRequest", Storage="_ContractSignatureRequest", ThisKey="ContractID,CompanyID", OtherKey="ContractID,CompanyID", IsForeignKey=true)]
		public ContractSignatureRequest ContractSignatureRequest
		{
			get
			{
				return this._ContractSignatureRequest.Entity;
			}
			set
			{
				ContractSignatureRequest previousValue = this._ContractSignatureRequest.Entity;
				if (((previousValue != value) 
							|| (this._ContractSignatureRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractSignatureRequest.Entity = null;
						previousValue.ContractSignature.Remove(this);
					}
					this._ContractSignatureRequest.Entity = value;
					if ((value != null))
					{
						value.ContractSignature.Add(this);
						this._ContractID = value.ContractID;
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._ContractID = default(int);
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("ContractSignatureRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractSignaturePositionRequest")]
	public partial class ContractSignaturePositionRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _ContractID;
		
		private System.Nullable<int> _ContractorID;
		
		private string _PositionID;
		
		private System.Nullable<double> _ScaleWidth;
		
		private System.Nullable<double> _ScaleHeight;
		
		private System.Nullable<double> _MarginTop;
		
		private System.Nullable<double> _MarginLeft;
		
		private short _Type;
		
		private System.Nullable<int> _PageIndex;
		
		private System.Nullable<int> _OperatorID;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnContractorIDChanging(System.Nullable<int> value);
    partial void OnContractorIDChanged();
    partial void OnPositionIDChanging(string value);
    partial void OnPositionIDChanged();
    partial void OnScaleWidthChanging(System.Nullable<double> value);
    partial void OnScaleWidthChanged();
    partial void OnScaleHeightChanging(System.Nullable<double> value);
    partial void OnScaleHeightChanged();
    partial void OnMarginTopChanging(System.Nullable<double> value);
    partial void OnMarginTopChanged();
    partial void OnMarginLeftChanging(System.Nullable<double> value);
    partial void OnMarginLeftChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnPageIndexChanging(System.Nullable<int> value);
    partial void OnPageIndexChanged();
    partial void OnOperatorIDChanging(System.Nullable<int> value);
    partial void OnOperatorIDChanged();
    #endregion
		
		public ContractSignaturePositionRequest()
		{
			this._Contract = default(EntityRef<Contract>);
			this._Organization = default(EntityRef<Organization>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL")]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="Int")]
		public System.Nullable<int> ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleWidth", DbType="Float")]
		public System.Nullable<double> ScaleWidth
		{
			get
			{
				return this._ScaleWidth;
			}
			set
			{
				if ((this._ScaleWidth != value))
				{
					this.OnScaleWidthChanging(value);
					this.SendPropertyChanging();
					this._ScaleWidth = value;
					this.SendPropertyChanged("ScaleWidth");
					this.OnScaleWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleHeight", DbType="Float")]
		public System.Nullable<double> ScaleHeight
		{
			get
			{
				return this._ScaleHeight;
			}
			set
			{
				if ((this._ScaleHeight != value))
				{
					this.OnScaleHeightChanging(value);
					this.SendPropertyChanging();
					this._ScaleHeight = value;
					this.SendPropertyChanged("ScaleHeight");
					this.OnScaleHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginTop", DbType="Float")]
		public System.Nullable<double> MarginTop
		{
			get
			{
				return this._MarginTop;
			}
			set
			{
				if ((this._MarginTop != value))
				{
					this.OnMarginTopChanging(value);
					this.SendPropertyChanging();
					this._MarginTop = value;
					this.SendPropertyChanged("MarginTop");
					this.OnMarginTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginLeft", DbType="Float")]
		public System.Nullable<double> MarginLeft
		{
			get
			{
				return this._MarginLeft;
			}
			set
			{
				if ((this._MarginLeft != value))
				{
					this.OnMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._MarginLeft = value;
					this.SendPropertyChanged("MarginLeft");
					this.OnMarginLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageIndex", DbType="Int")]
		public System.Nullable<int> PageIndex
		{
			get
			{
				return this._PageIndex;
			}
			set
			{
				if ((this._PageIndex != value))
				{
					this.OnPageIndexChanging(value);
					this.SendPropertyChanging();
					this._PageIndex = value;
					this.SendPropertyChanged("PageIndex");
					this.OnPageIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorID", DbType="Int")]
		public System.Nullable<int> OperatorID
		{
			get
			{
				return this._OperatorID;
			}
			set
			{
				if ((this._OperatorID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperatorIDChanging(value);
					this.SendPropertyChanging();
					this._OperatorID = value;
					this.SendPropertyChanged("OperatorID");
					this.OnOperatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignaturePositionRequest_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractSignaturePositionRequest.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractSignaturePositionRequest.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignaturePositionRequest_Organization", Storage="_Organization", ThisKey="ContractorID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.ContractSignaturePositionRequest.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.ContractSignaturePositionRequest.Add(this);
						this._ContractorID = value.CompanyID;
					}
					else
					{
						this._ContractorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignaturePositionRequest_UserProfile", Storage="_UserProfile", ThisKey="OperatorID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ContractSignaturePositionRequest.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ContractSignaturePositionRequest.Add(this);
						this._OperatorID = value.UID;
					}
					else
					{
						this._OperatorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractSignatureRequest")]
	public partial class ContractSignatureRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private int _CompanyID;
		
		private System.Nullable<int> _SignerID;
		
		private System.Nullable<System.DateTime> _SignatureDate;
		
		private string _RequestPath;
		
		private string _ResponsePath;
		
		private System.Nullable<double> _SealScale;
		
		private System.Data.Linq.Binary _SealImage;
		
		private System.Nullable<double> _MarginTop;
		
		private System.Nullable<double> _MarginLeft;
		
		private System.Nullable<int> _PageIndex;
		
		private System.Nullable<System.DateTime> _StampDate;
		
		private string _RequestTicket;
		
		private EntitySet<ContractSignature> _ContractSignature;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnSignerIDChanging(System.Nullable<int> value);
    partial void OnSignerIDChanged();
    partial void OnSignatureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignatureDateChanged();
    partial void OnRequestPathChanging(string value);
    partial void OnRequestPathChanged();
    partial void OnResponsePathChanging(string value);
    partial void OnResponsePathChanged();
    partial void OnSealScaleChanging(System.Nullable<double> value);
    partial void OnSealScaleChanged();
    partial void OnSealImageChanging(System.Data.Linq.Binary value);
    partial void OnSealImageChanged();
    partial void OnMarginTopChanging(System.Nullable<double> value);
    partial void OnMarginTopChanged();
    partial void OnMarginLeftChanging(System.Nullable<double> value);
    partial void OnMarginLeftChanged();
    partial void OnPageIndexChanging(System.Nullable<int> value);
    partial void OnPageIndexChanged();
    partial void OnStampDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStampDateChanged();
    partial void OnRequestTicketChanging(string value);
    partial void OnRequestTicketChanged();
    #endregion
		
		public ContractSignatureRequest()
		{
			this._ContractSignature = new EntitySet<ContractSignature>(new Action<ContractSignature>(this.attach_ContractSignature), new Action<ContractSignature>(this.detach_ContractSignature));
			this._Contract = default(EntityRef<Contract>);
			this._Organization = default(EntityRef<Organization>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignerID", DbType="Int")]
		public System.Nullable<int> SignerID
		{
			get
			{
				return this._SignerID;
			}
			set
			{
				if ((this._SignerID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignerIDChanging(value);
					this.SendPropertyChanging();
					this._SignerID = value;
					this.SendPropertyChanged("SignerID");
					this.OnSignerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SignatureDate
		{
			get
			{
				return this._SignatureDate;
			}
			set
			{
				if ((this._SignatureDate != value))
				{
					this.OnSignatureDateChanging(value);
					this.SendPropertyChanging();
					this._SignatureDate = value;
					this.SendPropertyChanged("SignatureDate");
					this.OnSignatureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestPath", DbType="NVarChar(256)")]
		public string RequestPath
		{
			get
			{
				return this._RequestPath;
			}
			set
			{
				if ((this._RequestPath != value))
				{
					this.OnRequestPathChanging(value);
					this.SendPropertyChanging();
					this._RequestPath = value;
					this.SendPropertyChanged("RequestPath");
					this.OnRequestPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsePath", DbType="NVarChar(256)")]
		public string ResponsePath
		{
			get
			{
				return this._ResponsePath;
			}
			set
			{
				if ((this._ResponsePath != value))
				{
					this.OnResponsePathChanging(value);
					this.SendPropertyChanging();
					this._ResponsePath = value;
					this.SendPropertyChanged("ResponsePath");
					this.OnResponsePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealScale", DbType="Float")]
		public System.Nullable<double> SealScale
		{
			get
			{
				return this._SealScale;
			}
			set
			{
				if ((this._SealScale != value))
				{
					this.OnSealScaleChanging(value);
					this.SendPropertyChanging();
					this._SealScale = value;
					this.SendPropertyChanged("SealScale");
					this.OnSealScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealImage", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SealImage
		{
			get
			{
				return this._SealImage;
			}
			set
			{
				if ((this._SealImage != value))
				{
					this.OnSealImageChanging(value);
					this.SendPropertyChanging();
					this._SealImage = value;
					this.SendPropertyChanged("SealImage");
					this.OnSealImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginTop", DbType="Float")]
		public System.Nullable<double> MarginTop
		{
			get
			{
				return this._MarginTop;
			}
			set
			{
				if ((this._MarginTop != value))
				{
					this.OnMarginTopChanging(value);
					this.SendPropertyChanging();
					this._MarginTop = value;
					this.SendPropertyChanged("MarginTop");
					this.OnMarginTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginLeft", DbType="Float")]
		public System.Nullable<double> MarginLeft
		{
			get
			{
				return this._MarginLeft;
			}
			set
			{
				if ((this._MarginLeft != value))
				{
					this.OnMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._MarginLeft = value;
					this.SendPropertyChanged("MarginLeft");
					this.OnMarginLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageIndex", DbType="Int")]
		public System.Nullable<int> PageIndex
		{
			get
			{
				return this._PageIndex;
			}
			set
			{
				if ((this._PageIndex != value))
				{
					this.OnPageIndexChanging(value);
					this.SendPropertyChanging();
					this._PageIndex = value;
					this.SendPropertyChanged("PageIndex");
					this.OnPageIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StampDate
		{
			get
			{
				return this._StampDate;
			}
			set
			{
				if ((this._StampDate != value))
				{
					this.OnStampDateChanging(value);
					this.SendPropertyChanging();
					this._StampDate = value;
					this.SendPropertyChanged("StampDate");
					this.OnStampDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTicket", DbType="NVarChar(64)")]
		public string RequestTicket
		{
			get
			{
				return this._RequestTicket;
			}
			set
			{
				if ((this._RequestTicket != value))
				{
					this.OnRequestTicketChanging(value);
					this.SendPropertyChanging();
					this._RequestTicket = value;
					this.SendPropertyChanged("RequestTicket");
					this.OnRequestTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignature_ContractSignatureRequest", Storage="_ContractSignature", ThisKey="ContractID,CompanyID", OtherKey="ContractID,CompanyID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSignature> ContractSignature
		{
			get
			{
				return this._ContractSignature;
			}
			set
			{
				this._ContractSignature.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignatureRequest_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractSignatureRequest.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractSignatureRequest.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignatureRequest_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.ContractSignatureRequest.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.ContractSignatureRequest.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignatureRequest_UserProfile", Storage="_UserProfile", ThisKey="SignerID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ContractSignatureRequest.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ContractSignatureRequest.Add(this);
						this._SignerID = value.UID;
					}
					else
					{
						this._SignerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractSignature(ContractSignature entity)
		{
			this.SendPropertyChanging();
			entity.ContractSignatureRequest = this;
		}
		
		private void detach_ContractSignature(ContractSignature entity)
		{
			this.SendPropertyChanging();
			entity.ContractSignatureRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractUserSignature")]
	public partial class ContractUserSignature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private int _UserID;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<ContractUserSignatureRequest> _ContractUserSignatureRequest;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public ContractUserSignature()
		{
			this._Contract = default(EntityRef<Contract>);
			this._ContractUserSignatureRequest = default(EntityRef<ContractUserSignatureRequest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if ((this._Contract.HasLoadedOrAssignedValue || this._ContractUserSignatureRequest.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._ContractUserSignatureRequest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignature_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractUserSignature = null;
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractUserSignature = this;
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignature_ContractUserSignatureRequest", Storage="_ContractUserSignatureRequest", ThisKey="ContractID,UserID", OtherKey="ContractID,UserID", IsForeignKey=true)]
		public ContractUserSignatureRequest ContractUserSignatureRequest
		{
			get
			{
				return this._ContractUserSignatureRequest.Entity;
			}
			set
			{
				ContractUserSignatureRequest previousValue = this._ContractUserSignatureRequest.Entity;
				if (((previousValue != value) 
							|| (this._ContractUserSignatureRequest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractUserSignatureRequest.Entity = null;
						previousValue.ContractUserSignature.Remove(this);
					}
					this._ContractUserSignatureRequest.Entity = value;
					if ((value != null))
					{
						value.ContractUserSignature.Add(this);
						this._ContractID = value.ContractID;
						this._UserID = value.UserID;
					}
					else
					{
						this._ContractID = default(int);
						this._UserID = default(int);
					}
					this.SendPropertyChanged("ContractUserSignatureRequest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractUserSignatureRequest")]
	public partial class ContractUserSignatureRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractID;
		
		private int _UserID;
		
		private System.Nullable<int> _SignerID;
		
		private System.Nullable<System.DateTime> _SignatureDate;
		
		private string _RequestPath;
		
		private string _ResponsePath;
		
		private System.Nullable<double> _SealScale;
		
		private System.Data.Linq.Binary _SealImage;
		
		private System.Nullable<double> _MarginTop;
		
		private System.Nullable<double> _MarginLeft;
		
		private System.Nullable<int> _PageIndex;
		
		private System.Nullable<System.DateTime> _StampDate;
		
		private string _RequestTicket;
		
		private System.Nullable<bool> _SignatureDone;
		
		private EntitySet<ContractUserSignature> _ContractUserSignature;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<ContractingUser> _ContractingUser;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(int value);
    partial void OnContractIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSignerIDChanging(System.Nullable<int> value);
    partial void OnSignerIDChanged();
    partial void OnSignatureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSignatureDateChanged();
    partial void OnRequestPathChanging(string value);
    partial void OnRequestPathChanged();
    partial void OnResponsePathChanging(string value);
    partial void OnResponsePathChanged();
    partial void OnSealScaleChanging(System.Nullable<double> value);
    partial void OnSealScaleChanged();
    partial void OnSealImageChanging(System.Data.Linq.Binary value);
    partial void OnSealImageChanged();
    partial void OnMarginTopChanging(System.Nullable<double> value);
    partial void OnMarginTopChanged();
    partial void OnMarginLeftChanging(System.Nullable<double> value);
    partial void OnMarginLeftChanged();
    partial void OnPageIndexChanging(System.Nullable<int> value);
    partial void OnPageIndexChanged();
    partial void OnStampDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStampDateChanged();
    partial void OnRequestTicketChanging(string value);
    partial void OnRequestTicketChanged();
    partial void OnSignatureDoneChanging(System.Nullable<bool> value);
    partial void OnSignatureDoneChanged();
    #endregion
		
		public ContractUserSignatureRequest()
		{
			this._ContractUserSignature = new EntitySet<ContractUserSignature>(new Action<ContractUserSignature>(this.attach_ContractUserSignature), new Action<ContractUserSignature>(this.detach_ContractUserSignature));
			this._Contract = default(EntityRef<Contract>);
			this._ContractingUser = default(EntityRef<ContractingUser>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if ((this._Contract.HasLoadedOrAssignedValue || this._ContractingUser.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if ((this._ContractingUser.HasLoadedOrAssignedValue || this._UserProfile.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignerID", DbType="Int")]
		public System.Nullable<int> SignerID
		{
			get
			{
				return this._SignerID;
			}
			set
			{
				if ((this._SignerID != value))
				{
					this.OnSignerIDChanging(value);
					this.SendPropertyChanging();
					this._SignerID = value;
					this.SendPropertyChanged("SignerID");
					this.OnSignerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SignatureDate
		{
			get
			{
				return this._SignatureDate;
			}
			set
			{
				if ((this._SignatureDate != value))
				{
					this.OnSignatureDateChanging(value);
					this.SendPropertyChanging();
					this._SignatureDate = value;
					this.SendPropertyChanged("SignatureDate");
					this.OnSignatureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestPath", DbType="NVarChar(256)")]
		public string RequestPath
		{
			get
			{
				return this._RequestPath;
			}
			set
			{
				if ((this._RequestPath != value))
				{
					this.OnRequestPathChanging(value);
					this.SendPropertyChanging();
					this._RequestPath = value;
					this.SendPropertyChanged("RequestPath");
					this.OnRequestPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsePath", DbType="NVarChar(256)")]
		public string ResponsePath
		{
			get
			{
				return this._ResponsePath;
			}
			set
			{
				if ((this._ResponsePath != value))
				{
					this.OnResponsePathChanging(value);
					this.SendPropertyChanging();
					this._ResponsePath = value;
					this.SendPropertyChanged("ResponsePath");
					this.OnResponsePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealScale", DbType="Float")]
		public System.Nullable<double> SealScale
		{
			get
			{
				return this._SealScale;
			}
			set
			{
				if ((this._SealScale != value))
				{
					this.OnSealScaleChanging(value);
					this.SendPropertyChanging();
					this._SealScale = value;
					this.SendPropertyChanged("SealScale");
					this.OnSealScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealImage", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SealImage
		{
			get
			{
				return this._SealImage;
			}
			set
			{
				if ((this._SealImage != value))
				{
					this.OnSealImageChanging(value);
					this.SendPropertyChanging();
					this._SealImage = value;
					this.SendPropertyChanged("SealImage");
					this.OnSealImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginTop", DbType="Float")]
		public System.Nullable<double> MarginTop
		{
			get
			{
				return this._MarginTop;
			}
			set
			{
				if ((this._MarginTop != value))
				{
					this.OnMarginTopChanging(value);
					this.SendPropertyChanging();
					this._MarginTop = value;
					this.SendPropertyChanged("MarginTop");
					this.OnMarginTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginLeft", DbType="Float")]
		public System.Nullable<double> MarginLeft
		{
			get
			{
				return this._MarginLeft;
			}
			set
			{
				if ((this._MarginLeft != value))
				{
					this.OnMarginLeftChanging(value);
					this.SendPropertyChanging();
					this._MarginLeft = value;
					this.SendPropertyChanged("MarginLeft");
					this.OnMarginLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageIndex", DbType="Int")]
		public System.Nullable<int> PageIndex
		{
			get
			{
				return this._PageIndex;
			}
			set
			{
				if ((this._PageIndex != value))
				{
					this.OnPageIndexChanging(value);
					this.SendPropertyChanging();
					this._PageIndex = value;
					this.SendPropertyChanged("PageIndex");
					this.OnPageIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StampDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StampDate
		{
			get
			{
				return this._StampDate;
			}
			set
			{
				if ((this._StampDate != value))
				{
					this.OnStampDateChanging(value);
					this.SendPropertyChanging();
					this._StampDate = value;
					this.SendPropertyChanged("StampDate");
					this.OnStampDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTicket", DbType="NVarChar(64)")]
		public string RequestTicket
		{
			get
			{
				return this._RequestTicket;
			}
			set
			{
				if ((this._RequestTicket != value))
				{
					this.OnRequestTicketChanging(value);
					this.SendPropertyChanging();
					this._RequestTicket = value;
					this.SendPropertyChanged("RequestTicket");
					this.OnRequestTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureDone", DbType="Bit")]
		public System.Nullable<bool> SignatureDone
		{
			get
			{
				return this._SignatureDone;
			}
			set
			{
				if ((this._SignatureDone != value))
				{
					this.OnSignatureDoneChanging(value);
					this.SendPropertyChanging();
					this._SignatureDone = value;
					this.SendPropertyChanged("SignatureDone");
					this.OnSignatureDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignature_ContractUserSignatureRequest", Storage="_ContractUserSignature", ThisKey="ContractID,UserID", OtherKey="ContractID,UserID", DeleteRule="NO ACTION")]
		public EntitySet<ContractUserSignature> ContractUserSignature
		{
			get
			{
				return this._ContractUserSignature;
			}
			set
			{
				this._ContractUserSignature.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignatureRequest_Contract", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true, DeleteOnNull=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractUserSignatureRequest.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractUserSignatureRequest.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignatureRequest_ContractingUser", Storage="_ContractingUser", ThisKey="ContractID,UserID", OtherKey="ContractID,UserID", IsForeignKey=true)]
		public ContractingUser ContractingUser
		{
			get
			{
				return this._ContractingUser.Entity;
			}
			set
			{
				ContractingUser previousValue = this._ContractingUser.Entity;
				if (((previousValue != value) 
							|| (this._ContractingUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractingUser.Entity = null;
						previousValue.ContractUserSignatureRequest = null;
					}
					this._ContractingUser.Entity = value;
					if ((value != null))
					{
						value.ContractUserSignatureRequest = this;
						this._ContractID = value.ContractID;
						this._UserID = value.UserID;
					}
					else
					{
						this._ContractID = default(int);
						this._UserID = default(int);
					}
					this.SendPropertyChanged("ContractingUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignatureRequest_UserProfile", Storage="_UserProfile", ThisKey="UserID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ContractUserSignatureRequest.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ContractUserSignatureRequest.Add(this);
						this._UserID = value.UID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractUserSignature(ContractUserSignature entity)
		{
			this.SendPropertyChanging();
			entity.ContractUserSignatureRequest = this;
		}
		
		private void detach_ContractUserSignature(ContractUserSignature entity)
		{
			this.SendPropertyChanging();
			entity.ContractUserSignatureRequest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentProcessLog")]
	public partial class DocumentProcessLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _DocID;
		
		private System.DateTime _LogDate;
		
		private System.Nullable<int> _Status;
		
		private int _StepID;
		
		private System.Nullable<int> _ActorID;
		
		private string _ClientIP;
		
		private string _ClientDevice;
		
		private EntityRef<CDS_Document> _CDS_Document;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnStepIDChanging(int value);
    partial void OnStepIDChanged();
    partial void OnActorIDChanging(System.Nullable<int> value);
    partial void OnActorIDChanged();
    partial void OnClientIPChanging(string value);
    partial void OnClientIPChanged();
    partial void OnClientDeviceChanging(string value);
    partial void OnClientDeviceChanged();
    #endregion
		
		public DocumentProcessLog()
		{
			this._CDS_Document = default(EntityRef<CDS_Document>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL")]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._CDS_Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepID", DbType="Int NOT NULL")]
		public int StepID
		{
			get
			{
				return this._StepID;
			}
			set
			{
				if ((this._StepID != value))
				{
					this.OnStepIDChanging(value);
					this.SendPropertyChanging();
					this._StepID = value;
					this.SendPropertyChanged("StepID");
					this.OnStepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorID", DbType="Int")]
		public System.Nullable<int> ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientIP", DbType="VarChar(50)")]
		public string ClientIP
		{
			get
			{
				return this._ClientIP;
			}
			set
			{
				if ((this._ClientIP != value))
				{
					this.OnClientIPChanging(value);
					this.SendPropertyChanging();
					this._ClientIP = value;
					this.SendPropertyChanged("ClientIP");
					this.OnClientIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientDevice", DbType="NVarChar(512)")]
		public string ClientDevice
		{
			get
			{
				return this._ClientDevice;
			}
			set
			{
				if ((this._ClientDevice != value))
				{
					this.OnClientDeviceChanging(value);
					this.SendPropertyChanging();
					this._ClientDevice = value;
					this.SendPropertyChanged("ClientDevice");
					this.OnClientDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DocumentProcessLog_CDS_Document", Storage="_CDS_Document", ThisKey="DocID", OtherKey="DocID", IsForeignKey=true, DeleteOnNull=true)]
		public CDS_Document CDS_Document
		{
			get
			{
				return this._CDS_Document.Entity;
			}
			set
			{
				CDS_Document previousValue = this._CDS_Document.Entity;
				if (((previousValue != value) 
							|| (this._CDS_Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CDS_Document.Entity = null;
						previousValue.DocumentProcessLog.Remove(this);
					}
					this._CDS_Document.Entity = value;
					if ((value != null))
					{
						value.DocumentProcessLog.Add(this);
						this._DocID = value.DocID;
					}
					else
					{
						this._DocID = default(int);
					}
					this.SendPropertyChanged("CDS_Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DocumentProcessLog_UserProfile", Storage="_UserProfile", ThisKey="ActorID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.DocumentProcessLog.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.DocumentProcessLog.Add(this);
						this._ActorID = value.UID;
					}
					else
					{
						this._ActorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IdentityCert")]
	public partial class IdentityCert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeqNo;
		
		private string _X509Certificate;
		
		private string _CertificateType;
		
		private int _BindingUID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    partial void OnX509CertificateChanging(string value);
    partial void OnX509CertificateChanged();
    partial void OnCertificateTypeChanging(string value);
    partial void OnCertificateTypeChanged();
    partial void OnBindingUIDChanging(int value);
    partial void OnBindingUIDChanged();
    #endregion
		
		public IdentityCert()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X509Certificate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string X509Certificate
		{
			get
			{
				return this._X509Certificate;
			}
			set
			{
				if ((this._X509Certificate != value))
				{
					this.OnX509CertificateChanging(value);
					this.SendPropertyChanging();
					this._X509Certificate = value;
					this.SendPropertyChanged("X509Certificate");
					this.OnX509CertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificateType", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string CertificateType
		{
			get
			{
				return this._CertificateType;
			}
			set
			{
				if ((this._CertificateType != value))
				{
					this.OnCertificateTypeChanging(value);
					this.SendPropertyChanging();
					this._CertificateType = value;
					this.SendPropertyChanged("CertificateType");
					this.OnCertificateTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BindingUID", DbType="Int NOT NULL")]
		public int BindingUID
		{
			get
			{
				return this._BindingUID;
			}
			set
			{
				if ((this._BindingUID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBindingUIDChanging(value);
					this.SendPropertyChanging();
					this._BindingUID = value;
					this.SendPropertyChanged("BindingUID");
					this.OnBindingUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_IdentityCert_UserProfile", Storage="_UserProfile", ThisKey="BindingUID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.IdentityCert.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.IdentityCert.Add(this);
						this._BindingUID = value.UID;
					}
					else
					{
						this._BindingUID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ContactName;
		
		private string _Fax;
		
		private string _LogoURL;
		
		private string _CompanyName;
		
		private int _CompanyID;
		
		private string _ReceiptNo;
		
		private string _Phone;
		
		private string _ContactFax;
		
		private string _ContactPhone;
		
		private string _ContactMobilePhone;
		
		private string _RegAddr;
		
		private string _UndertakerName;
		
		private string _Addr;
		
		private string _EnglishName;
		
		private string _EnglishAddr;
		
		private string _EnglishRegAddr;
		
		private string _ContactEmail;
		
		private string _UndertakerPhone;
		
		private string _UndertakerFax;
		
		private string _UndertakerMobilePhone;
		
		private string _InvoiceSignature;
		
		private string _UndertakerID;
		
		private string _ContactTitle;
		
		private System.Nullable<int> _CompanyBelongTo;
		
		private System.Nullable<bool> _CanCreateContract;
		
		private EntityRef<CHT_Token> _CHT_Token;
		
		private EntitySet<Contract> _Contract;
		
		private EntitySet<ContractingParty> _ContractingParty;
		
		private EntitySet<ContractSignaturePositionRequest> _ContractSignaturePositionRequest;
		
		private EntitySet<ContractSignatureRequest> _ContractSignatureRequest;
		
		private EntityRef<OrganizationStatus> _OrganizationStatus;
		
		private EntityRef<OrganizationToken> _OrganizationToken;
		
		private EntitySet<OrganizationUser> _OrganizationUser;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnReceiptNoChanging(string value);
    partial void OnReceiptNoChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnContactFaxChanging(string value);
    partial void OnContactFaxChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnContactMobilePhoneChanging(string value);
    partial void OnContactMobilePhoneChanged();
    partial void OnRegAddrChanging(string value);
    partial void OnRegAddrChanged();
    partial void OnUndertakerNameChanging(string value);
    partial void OnUndertakerNameChanged();
    partial void OnAddrChanging(string value);
    partial void OnAddrChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnEnglishAddrChanging(string value);
    partial void OnEnglishAddrChanged();
    partial void OnEnglishRegAddrChanging(string value);
    partial void OnEnglishRegAddrChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnUndertakerPhoneChanging(string value);
    partial void OnUndertakerPhoneChanged();
    partial void OnUndertakerFaxChanging(string value);
    partial void OnUndertakerFaxChanged();
    partial void OnUndertakerMobilePhoneChanging(string value);
    partial void OnUndertakerMobilePhoneChanged();
    partial void OnInvoiceSignatureChanging(string value);
    partial void OnInvoiceSignatureChanged();
    partial void OnUndertakerIDChanging(string value);
    partial void OnUndertakerIDChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnCompanyBelongToChanging(System.Nullable<int> value);
    partial void OnCompanyBelongToChanged();
    partial void OnCanCreateContractChanging(System.Nullable<bool> value);
    partial void OnCanCreateContractChanged();
    #endregion
		
		public Organization()
		{
			this._CHT_Token = default(EntityRef<CHT_Token>);
			this._Contract = new EntitySet<Contract>(new Action<Contract>(this.attach_Contract), new Action<Contract>(this.detach_Contract));
			this._ContractingParty = new EntitySet<ContractingParty>(new Action<ContractingParty>(this.attach_ContractingParty), new Action<ContractingParty>(this.detach_ContractingParty));
			this._ContractSignaturePositionRequest = new EntitySet<ContractSignaturePositionRequest>(new Action<ContractSignaturePositionRequest>(this.attach_ContractSignaturePositionRequest), new Action<ContractSignaturePositionRequest>(this.detach_ContractSignaturePositionRequest));
			this._ContractSignatureRequest = new EntitySet<ContractSignatureRequest>(new Action<ContractSignatureRequest>(this.attach_ContractSignatureRequest), new Action<ContractSignatureRequest>(this.detach_ContractSignatureRequest));
			this._OrganizationStatus = default(EntityRef<OrganizationStatus>);
			this._OrganizationToken = default(EntityRef<OrganizationToken>);
			this._OrganizationUser = new EntitySet<OrganizationUser>(new Action<OrganizationUser>(this.attach_OrganizationUser), new Action<OrganizationUser>(this.detach_OrganizationUser));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoURL", DbType="NVarChar(200)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(128)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptNo", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ReceiptNo
		{
			get
			{
				return this._ReceiptNo;
			}
			set
			{
				if ((this._ReceiptNo != value))
				{
					this.OnReceiptNoChanging(value);
					this.SendPropertyChanging();
					this._ReceiptNo = value;
					this.SendPropertyChanged("ReceiptNo");
					this.OnReceiptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(64)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactFax", DbType="NVarChar(20)")]
		public string ContactFax
		{
			get
			{
				return this._ContactFax;
			}
			set
			{
				if ((this._ContactFax != value))
				{
					this.OnContactFaxChanging(value);
					this.SendPropertyChanging();
					this._ContactFax = value;
					this.SendPropertyChanged("ContactFax");
					this.OnContactFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(20)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactMobilePhone", DbType="NVarChar(20)")]
		public string ContactMobilePhone
		{
			get
			{
				return this._ContactMobilePhone;
			}
			set
			{
				if ((this._ContactMobilePhone != value))
				{
					this.OnContactMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactMobilePhone = value;
					this.SendPropertyChanged("ContactMobilePhone");
					this.OnContactMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegAddr", DbType="NVarChar(256)")]
		public string RegAddr
		{
			get
			{
				return this._RegAddr;
			}
			set
			{
				if ((this._RegAddr != value))
				{
					this.OnRegAddrChanging(value);
					this.SendPropertyChanging();
					this._RegAddr = value;
					this.SendPropertyChanged("RegAddr");
					this.OnRegAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerName", DbType="NVarChar(50)")]
		public string UndertakerName
		{
			get
			{
				return this._UndertakerName;
			}
			set
			{
				if ((this._UndertakerName != value))
				{
					this.OnUndertakerNameChanging(value);
					this.SendPropertyChanging();
					this._UndertakerName = value;
					this.SendPropertyChanged("UndertakerName");
					this.OnUndertakerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addr", DbType="NVarChar(256)")]
		public string Addr
		{
			get
			{
				return this._Addr;
			}
			set
			{
				if ((this._Addr != value))
				{
					this.OnAddrChanging(value);
					this.SendPropertyChanging();
					this._Addr = value;
					this.SendPropertyChanged("Addr");
					this.OnAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishName", DbType="NVarChar(50)")]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishAddr", DbType="NVarChar(256)")]
		public string EnglishAddr
		{
			get
			{
				return this._EnglishAddr;
			}
			set
			{
				if ((this._EnglishAddr != value))
				{
					this.OnEnglishAddrChanging(value);
					this.SendPropertyChanging();
					this._EnglishAddr = value;
					this.SendPropertyChanged("EnglishAddr");
					this.OnEnglishAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishRegAddr", DbType="NVarChar(256)")]
		public string EnglishRegAddr
		{
			get
			{
				return this._EnglishRegAddr;
			}
			set
			{
				if ((this._EnglishRegAddr != value))
				{
					this.OnEnglishRegAddrChanging(value);
					this.SendPropertyChanging();
					this._EnglishRegAddr = value;
					this.SendPropertyChanged("EnglishRegAddr");
					this.OnEnglishRegAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="NVarChar(512)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerPhone", DbType="NVarChar(20)")]
		public string UndertakerPhone
		{
			get
			{
				return this._UndertakerPhone;
			}
			set
			{
				if ((this._UndertakerPhone != value))
				{
					this.OnUndertakerPhoneChanging(value);
					this.SendPropertyChanging();
					this._UndertakerPhone = value;
					this.SendPropertyChanged("UndertakerPhone");
					this.OnUndertakerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerFax", DbType="NVarChar(20)")]
		public string UndertakerFax
		{
			get
			{
				return this._UndertakerFax;
			}
			set
			{
				if ((this._UndertakerFax != value))
				{
					this.OnUndertakerFaxChanging(value);
					this.SendPropertyChanging();
					this._UndertakerFax = value;
					this.SendPropertyChanged("UndertakerFax");
					this.OnUndertakerFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerMobilePhone", DbType="NVarChar(20)")]
		public string UndertakerMobilePhone
		{
			get
			{
				return this._UndertakerMobilePhone;
			}
			set
			{
				if ((this._UndertakerMobilePhone != value))
				{
					this.OnUndertakerMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._UndertakerMobilePhone = value;
					this.SendPropertyChanged("UndertakerMobilePhone");
					this.OnUndertakerMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceSignature", DbType="NVarChar(64)")]
		public string InvoiceSignature
		{
			get
			{
				return this._InvoiceSignature;
			}
			set
			{
				if ((this._InvoiceSignature != value))
				{
					this.OnInvoiceSignatureChanging(value);
					this.SendPropertyChanging();
					this._InvoiceSignature = value;
					this.SendPropertyChanged("InvoiceSignature");
					this.OnInvoiceSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerID", DbType="NVarChar(16)")]
		public string UndertakerID
		{
			get
			{
				return this._UndertakerID;
			}
			set
			{
				if ((this._UndertakerID != value))
				{
					this.OnUndertakerIDChanging(value);
					this.SendPropertyChanging();
					this._UndertakerID = value;
					this.SendPropertyChanged("UndertakerID");
					this.OnUndertakerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTitle", DbType="NVarChar(16)")]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyBelongTo", DbType="Int")]
		public System.Nullable<int> CompanyBelongTo
		{
			get
			{
				return this._CompanyBelongTo;
			}
			set
			{
				if ((this._CompanyBelongTo != value))
				{
					this.OnCompanyBelongToChanging(value);
					this.SendPropertyChanging();
					this._CompanyBelongTo = value;
					this.SendPropertyChanged("CompanyBelongTo");
					this.OnCompanyBelongToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanCreateContract", DbType="Bit")]
		public System.Nullable<bool> CanCreateContract
		{
			get
			{
				return this._CanCreateContract;
			}
			set
			{
				if ((this._CanCreateContract != value))
				{
					this.OnCanCreateContractChanging(value);
					this.SendPropertyChanging();
					this._CanCreateContract = value;
					this.SendPropertyChanged("CanCreateContract");
					this.OnCanCreateContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CHT_Token_Organization", Storage="_CHT_Token", ThisKey="CompanyID", OtherKey="CompanyID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public CHT_Token CHT_Token
		{
			get
			{
				return this._CHT_Token.Entity;
			}
			set
			{
				CHT_Token previousValue = this._CHT_Token.Entity;
				if (((previousValue != value) 
							|| (this._CHT_Token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHT_Token.Entity = null;
						previousValue.Organization = null;
					}
					this._CHT_Token.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
					}
					this.SendPropertyChanged("CHT_Token");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contract_Organization", Storage="_Contract", ThisKey="CompanyID", OtherKey="CompanyID", DeleteRule="NO ACTION")]
		public EntitySet<Contract> Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				this._Contract.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingParty_Organization", Storage="_ContractingParty", ThisKey="CompanyID", OtherKey="CompanyID", DeleteRule="NO ACTION")]
		public EntitySet<ContractingParty> ContractingParty
		{
			get
			{
				return this._ContractingParty;
			}
			set
			{
				this._ContractingParty.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignaturePositionRequest_Organization", Storage="_ContractSignaturePositionRequest", ThisKey="CompanyID", OtherKey="ContractorID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSignaturePositionRequest> ContractSignaturePositionRequest
		{
			get
			{
				return this._ContractSignaturePositionRequest;
			}
			set
			{
				this._ContractSignaturePositionRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignatureRequest_Organization", Storage="_ContractSignatureRequest", ThisKey="CompanyID", OtherKey="CompanyID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSignatureRequest> ContractSignatureRequest
		{
			get
			{
				return this._ContractSignatureRequest;
			}
			set
			{
				this._ContractSignatureRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationStatus_Organization", Storage="_OrganizationStatus", ThisKey="CompanyID", OtherKey="CompanyID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public OrganizationStatus OrganizationStatus
		{
			get
			{
				return this._OrganizationStatus.Entity;
			}
			set
			{
				OrganizationStatus previousValue = this._OrganizationStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationStatus.Entity = null;
						previousValue.Organization = null;
					}
					this._OrganizationStatus.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
					}
					this.SendPropertyChanged("OrganizationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationToken_Organization", Storage="_OrganizationToken", ThisKey="CompanyID", OtherKey="CompanyID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public OrganizationToken OrganizationToken
		{
			get
			{
				return this._OrganizationToken.Entity;
			}
			set
			{
				OrganizationToken previousValue = this._OrganizationToken.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationToken.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationToken.Entity = null;
						previousValue.Organization = null;
					}
					this._OrganizationToken.Entity = value;
					if ((value != null))
					{
						value.Organization = this;
					}
					this.SendPropertyChanged("OrganizationToken");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationUser_Organization", Storage="_OrganizationUser", ThisKey="CompanyID", OtherKey="CompanyID", DeleteRule="NO ACTION")]
		public EntitySet<OrganizationUser> OrganizationUser
		{
			get
			{
				return this._OrganizationUser;
			}
			set
			{
				this._OrganizationUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_ContractingParty(ContractingParty entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_ContractingParty(ContractingParty entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_ContractSignaturePositionRequest(ContractSignaturePositionRequest entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_ContractSignaturePositionRequest(ContractSignaturePositionRequest entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_ContractSignatureRequest(ContractSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_ContractSignatureRequest(ContractSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationUser(OrganizationUser entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationUser(OrganizationUser entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationStatus")]
	public partial class OrganizationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private System.Nullable<int> _LevelID;
		
		private EntityRef<Organization> _Organization;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnLevelIDChanging(System.Nullable<int> value);
    partial void OnLevelIDChanged();
    #endregion
		
		public OrganizationStatus()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int")]
		public System.Nullable<int> LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationStatus_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true, DeleteOnNull=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationStatus = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationStatus = this;
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationToken")]
	public partial class OrganizationToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _X509Certificate;
		
		private string _Thumbprint;
		
		private string _PKCS12;
		
		private System.Nullable<System.Guid> _KeyID;
		
		private System.Nullable<bool> _IsActivated;
		
		private EntityRef<Organization> _Organization;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnX509CertificateChanging(string value);
    partial void OnX509CertificateChanged();
    partial void OnThumbprintChanging(string value);
    partial void OnThumbprintChanged();
    partial void OnPKCS12Changing(string value);
    partial void OnPKCS12Changed();
    partial void OnKeyIDChanging(System.Nullable<System.Guid> value);
    partial void OnKeyIDChanged();
    partial void OnIsActivatedChanging(System.Nullable<bool> value);
    partial void OnIsActivatedChanged();
    #endregion
		
		public OrganizationToken()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X509Certificate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string X509Certificate
		{
			get
			{
				return this._X509Certificate;
			}
			set
			{
				if ((this._X509Certificate != value))
				{
					this.OnX509CertificateChanging(value);
					this.SendPropertyChanging();
					this._X509Certificate = value;
					this.SendPropertyChanged("X509Certificate");
					this.OnX509CertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thumbprint", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Thumbprint
		{
			get
			{
				return this._Thumbprint;
			}
			set
			{
				if ((this._Thumbprint != value))
				{
					this.OnThumbprintChanging(value);
					this.SendPropertyChanging();
					this._Thumbprint = value;
					this.SendPropertyChanged("Thumbprint");
					this.OnThumbprintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PKCS12", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PKCS12
		{
			get
			{
				return this._PKCS12;
			}
			set
			{
				if ((this._PKCS12 != value))
				{
					this.OnPKCS12Changing(value);
					this.SendPropertyChanging();
					this._PKCS12 = value;
					this.SendPropertyChanged("PKCS12");
					this.OnPKCS12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> KeyID
		{
			get
			{
				return this._KeyID;
			}
			set
			{
				if ((this._KeyID != value))
				{
					this.OnKeyIDChanging(value);
					this.SendPropertyChanging();
					this._KeyID = value;
					this.SendPropertyChanged("KeyID");
					this.OnKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit")]
		public System.Nullable<bool> IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationToken_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true, DeleteOnNull=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationToken = null;
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationToken = this;
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationUser")]
	public partial class OrganizationUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _CompanyID;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public OrganizationUser()
		{
			this._Organization = default(EntityRef<Organization>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationUser_Organization", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationUser.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationUser.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationUser_UserProfile", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.OrganizationUser = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.OrganizationUser = this;
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SealTemplate")]
	public partial class SealTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SealID;
		
		private int _Width;
		
		private int _Height;
		
		private string _FilePath;
		
		private string _Intent;
		
		private System.Nullable<int> _IntentID;
		
		private System.Nullable<int> _UID;
		
		private System.Data.Linq.Binary _SealImage;
		
		private System.Nullable<bool> _Disabled;
		
		private EntitySet<ContractSealRequest> _ContractSealRequest;
		
		private EntityRef<ContractingIntent> _ContractingIntent;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSealIDChanging(int value);
    partial void OnSealIDChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnIntentChanging(string value);
    partial void OnIntentChanged();
    partial void OnIntentIDChanging(System.Nullable<int> value);
    partial void OnIntentIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnSealImageChanging(System.Data.Linq.Binary value);
    partial void OnSealImageChanged();
    partial void OnDisabledChanging(System.Nullable<bool> value);
    partial void OnDisabledChanged();
    #endregion
		
		public SealTemplate()
		{
			this._ContractSealRequest = new EntitySet<ContractSealRequest>(new Action<ContractSealRequest>(this.attach_ContractSealRequest), new Action<ContractSealRequest>(this.detach_ContractSealRequest));
			this._ContractingIntent = default(EntityRef<ContractingIntent>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SealID
		{
			get
			{
				return this._SealID;
			}
			set
			{
				if ((this._SealID != value))
				{
					this.OnSealIDChanging(value);
					this.SendPropertyChanging();
					this._SealID = value;
					this.SendPropertyChanged("SealID");
					this.OnSealIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(256)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intent", DbType="NVarChar(64)")]
		public string Intent
		{
			get
			{
				return this._Intent;
			}
			set
			{
				if ((this._Intent != value))
				{
					this.OnIntentChanging(value);
					this.SendPropertyChanging();
					this._Intent = value;
					this.SendPropertyChanged("Intent");
					this.OnIntentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntentID", DbType="Int")]
		public System.Nullable<int> IntentID
		{
			get
			{
				return this._IntentID;
			}
			set
			{
				if ((this._IntentID != value))
				{
					if (this._ContractingIntent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIntentIDChanging(value);
					this.SendPropertyChanging();
					this._IntentID = value;
					this.SendPropertyChanged("IntentID");
					this.OnIntentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealImage", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SealImage
		{
			get
			{
				return this._SealImage;
			}
			set
			{
				if ((this._SealImage != value))
				{
					this.OnSealImageChanging(value);
					this.SendPropertyChanging();
					this._SealImage = value;
					this.SendPropertyChanged("SealImage");
					this.OnSealImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disabled", DbType="Bit")]
		public System.Nullable<bool> Disabled
		{
			get
			{
				return this._Disabled;
			}
			set
			{
				if ((this._Disabled != value))
				{
					this.OnDisabledChanging(value);
					this.SendPropertyChanging();
					this._Disabled = value;
					this.SendPropertyChanged("Disabled");
					this.OnDisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSealRequest_SealTemplate", Storage="_ContractSealRequest", ThisKey="SealID", OtherKey="SealID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSealRequest> ContractSealRequest
		{
			get
			{
				return this._ContractSealRequest;
			}
			set
			{
				this._ContractSealRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SealTemplate_ContractingIntent", Storage="_ContractingIntent", ThisKey="IntentID", OtherKey="IntentID", IsForeignKey=true)]
		public ContractingIntent ContractingIntent
		{
			get
			{
				return this._ContractingIntent.Entity;
			}
			set
			{
				ContractingIntent previousValue = this._ContractingIntent.Entity;
				if (((previousValue != value) 
							|| (this._ContractingIntent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractingIntent.Entity = null;
						previousValue.SealTemplate.Remove(this);
					}
					this._ContractingIntent.Entity = value;
					if ((value != null))
					{
						value.SealTemplate.Add(this);
						this._IntentID = value.IntentID;
					}
					else
					{
						this._IntentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContractingIntent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SealTemplate_UserProfile", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.SealTemplate.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.SealTemplate.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractSealRequest(ContractSealRequest entity)
		{
			this.SendPropertyChanging();
			entity.SealTemplate = this;
		}
		
		private void detach_ContractSealRequest(ContractSealRequest entity)
		{
			this.SendPropertyChanging();
			entity.SealTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _PID;
		
		private string _Password;
		
		private string _Region;
		
		private string _EMail;
		
		private System.Nullable<System.DateTime> _Expiration;
		
		private System.Nullable<int> _Creator;
		
		private string _Password2;
		
		private System.Nullable<int> _LoginFailedCount;
		
		private System.Nullable<System.DateTime> _PasswordUpdatedDate;
		
		private string _OperatorNote;
		
		private System.Nullable<int> _OperatorOwnerUID;
		
		private string _OperatorReceiptNo;
		
		private EntitySet<Contract> _Contract;
		
		private EntitySet<ContractingUser> _ContractingUser;
		
		private EntitySet<ContractNoteRequest> _ContractNoteRequest;
		
		private EntitySet<ContractSealRequest> _ContractSealRequest;
		
		private EntitySet<ContractSignaturePositionRequest> _ContractSignaturePositionRequest;
		
		private EntitySet<ContractSignatureRequest> _ContractSignatureRequest;
		
		private EntitySet<ContractUserSignatureRequest> _ContractUserSignatureRequest;
		
		private EntitySet<DocumentProcessLog> _DocumentProcessLog;
		
		private EntitySet<IdentityCert> _IdentityCert;
		
		private EntityRef<OrganizationUser> _OrganizationUser;
		
		private EntitySet<SealTemplate> _SealTemplate;
		
		private EntityRef<UserProfile> _CreatorUserProfile;
		
		private EntitySet<UserProfile> _UserProfile_UserProfile;
		
		private EntitySet<UserRole> _UserRole;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnExpirationChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationChanged();
    partial void OnCreatorChanging(System.Nullable<int> value);
    partial void OnCreatorChanged();
    partial void OnPassword2Changing(string value);
    partial void OnPassword2Changed();
    partial void OnLoginFailedCountChanging(System.Nullable<int> value);
    partial void OnLoginFailedCountChanged();
    partial void OnPasswordUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordUpdatedDateChanged();
    partial void OnOperatorNoteChanging(string value);
    partial void OnOperatorNoteChanged();
    partial void OnOperatorOwnerUIDChanging(System.Nullable<int> value);
    partial void OnOperatorOwnerUIDChanged();
    partial void OnOperatorReceiptNoChanging(string value);
    partial void OnOperatorReceiptNoChanged();
    #endregion
		
		public UserProfile()
		{
			this._Contract = new EntitySet<Contract>(new Action<Contract>(this.attach_Contract), new Action<Contract>(this.detach_Contract));
			this._ContractingUser = new EntitySet<ContractingUser>(new Action<ContractingUser>(this.attach_ContractingUser), new Action<ContractingUser>(this.detach_ContractingUser));
			this._ContractNoteRequest = new EntitySet<ContractNoteRequest>(new Action<ContractNoteRequest>(this.attach_ContractNoteRequest), new Action<ContractNoteRequest>(this.detach_ContractNoteRequest));
			this._ContractSealRequest = new EntitySet<ContractSealRequest>(new Action<ContractSealRequest>(this.attach_ContractSealRequest), new Action<ContractSealRequest>(this.detach_ContractSealRequest));
			this._ContractSignaturePositionRequest = new EntitySet<ContractSignaturePositionRequest>(new Action<ContractSignaturePositionRequest>(this.attach_ContractSignaturePositionRequest), new Action<ContractSignaturePositionRequest>(this.detach_ContractSignaturePositionRequest));
			this._ContractSignatureRequest = new EntitySet<ContractSignatureRequest>(new Action<ContractSignatureRequest>(this.attach_ContractSignatureRequest), new Action<ContractSignatureRequest>(this.detach_ContractSignatureRequest));
			this._ContractUserSignatureRequest = new EntitySet<ContractUserSignatureRequest>(new Action<ContractUserSignatureRequest>(this.attach_ContractUserSignatureRequest), new Action<ContractUserSignatureRequest>(this.detach_ContractUserSignatureRequest));
			this._DocumentProcessLog = new EntitySet<DocumentProcessLog>(new Action<DocumentProcessLog>(this.attach_DocumentProcessLog), new Action<DocumentProcessLog>(this.detach_DocumentProcessLog));
			this._IdentityCert = new EntitySet<IdentityCert>(new Action<IdentityCert>(this.attach_IdentityCert), new Action<IdentityCert>(this.detach_IdentityCert));
			this._OrganizationUser = default(EntityRef<OrganizationUser>);
			this._SealTemplate = new EntitySet<SealTemplate>(new Action<SealTemplate>(this.attach_SealTemplate), new Action<SealTemplate>(this.detach_SealTemplate));
			this._CreatorUserProfile = default(EntityRef<UserProfile>);
			this._UserProfile_UserProfile = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile_UserProfile), new Action<UserProfile>(this.detach_UserProfile_UserProfile));
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(16)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NVarChar(512)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiration", DbType="DateTime")]
		public System.Nullable<System.DateTime> Expiration
		{
			get
			{
				return this._Expiration;
			}
			set
			{
				if ((this._Expiration != value))
				{
					this.OnExpirationChanging(value);
					this.SendPropertyChanging();
					this._Expiration = value;
					this.SendPropertyChanged("Expiration");
					this.OnExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="Int")]
		public System.Nullable<int> Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._CreatorUserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password2", DbType="NVarChar(64)")]
		public string Password2
		{
			get
			{
				return this._Password2;
			}
			set
			{
				if ((this._Password2 != value))
				{
					this.OnPassword2Changing(value);
					this.SendPropertyChanging();
					this._Password2 = value;
					this.SendPropertyChanged("Password2");
					this.OnPassword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginFailedCount", DbType="Int")]
		public System.Nullable<int> LoginFailedCount
		{
			get
			{
				return this._LoginFailedCount;
			}
			set
			{
				if ((this._LoginFailedCount != value))
				{
					this.OnLoginFailedCountChanging(value);
					this.SendPropertyChanging();
					this._LoginFailedCount = value;
					this.SendPropertyChanged("LoginFailedCount");
					this.OnLoginFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordUpdatedDate
		{
			get
			{
				return this._PasswordUpdatedDate;
			}
			set
			{
				if ((this._PasswordUpdatedDate != value))
				{
					this.OnPasswordUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordUpdatedDate = value;
					this.SendPropertyChanged("PasswordUpdatedDate");
					this.OnPasswordUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorNote", DbType="NVarChar(8)")]
		public string OperatorNote
		{
			get
			{
				return this._OperatorNote;
			}
			set
			{
				if ((this._OperatorNote != value))
				{
					this.OnOperatorNoteChanging(value);
					this.SendPropertyChanging();
					this._OperatorNote = value;
					this.SendPropertyChanged("OperatorNote");
					this.OnOperatorNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorOwnerUID", DbType="Int")]
		public System.Nullable<int> OperatorOwnerUID
		{
			get
			{
				return this._OperatorOwnerUID;
			}
			set
			{
				if ((this._OperatorOwnerUID != value))
				{
					this.OnOperatorOwnerUIDChanging(value);
					this.SendPropertyChanging();
					this._OperatorOwnerUID = value;
					this.SendPropertyChanged("OperatorOwnerUID");
					this.OnOperatorOwnerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorReceiptNo", DbType="NChar(10)")]
		public string OperatorReceiptNo
		{
			get
			{
				return this._OperatorReceiptNo;
			}
			set
			{
				if ((this._OperatorReceiptNo != value))
				{
					this.OnOperatorReceiptNoChanging(value);
					this.SendPropertyChanging();
					this._OperatorReceiptNo = value;
					this.SendPropertyChanged("OperatorReceiptNo");
					this.OnOperatorReceiptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Contract_UserProfile", Storage="_Contract", ThisKey="UID", OtherKey="CreateUID", DeleteRule="NO ACTION")]
		public EntitySet<Contract> Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				this._Contract.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractingUser_UserProfile", Storage="_ContractingUser", ThisKey="UID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<ContractingUser> ContractingUser
		{
			get
			{
				return this._ContractingUser;
			}
			set
			{
				this._ContractingUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractNoteRequest_UserProfile", Storage="_ContractNoteRequest", ThisKey="UID", OtherKey="StampUID", DeleteRule="NO ACTION")]
		public EntitySet<ContractNoteRequest> ContractNoteRequest
		{
			get
			{
				return this._ContractNoteRequest;
			}
			set
			{
				this._ContractNoteRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSealRequest_UserProfile", Storage="_ContractSealRequest", ThisKey="UID", OtherKey="StampUID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSealRequest> ContractSealRequest
		{
			get
			{
				return this._ContractSealRequest;
			}
			set
			{
				this._ContractSealRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignaturePositionRequest_UserProfile", Storage="_ContractSignaturePositionRequest", ThisKey="UID", OtherKey="OperatorID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSignaturePositionRequest> ContractSignaturePositionRequest
		{
			get
			{
				return this._ContractSignaturePositionRequest;
			}
			set
			{
				this._ContractSignaturePositionRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractSignatureRequest_UserProfile", Storage="_ContractSignatureRequest", ThisKey="UID", OtherKey="SignerID", DeleteRule="NO ACTION")]
		public EntitySet<ContractSignatureRequest> ContractSignatureRequest
		{
			get
			{
				return this._ContractSignatureRequest;
			}
			set
			{
				this._ContractSignatureRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ContractUserSignatureRequest_UserProfile", Storage="_ContractUserSignatureRequest", ThisKey="UID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<ContractUserSignatureRequest> ContractUserSignatureRequest
		{
			get
			{
				return this._ContractUserSignatureRequest;
			}
			set
			{
				this._ContractUserSignatureRequest.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DocumentProcessLog_UserProfile", Storage="_DocumentProcessLog", ThisKey="UID", OtherKey="ActorID", DeleteRule="NO ACTION")]
		public EntitySet<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this._DocumentProcessLog;
			}
			set
			{
				this._DocumentProcessLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_IdentityCert_UserProfile", Storage="_IdentityCert", ThisKey="UID", OtherKey="BindingUID", DeleteRule="NO ACTION")]
		public EntitySet<IdentityCert> IdentityCert
		{
			get
			{
				return this._IdentityCert;
			}
			set
			{
				this._IdentityCert.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OrganizationUser_UserProfile", Storage="_OrganizationUser", ThisKey="UID", OtherKey="UID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public OrganizationUser OrganizationUser
		{
			get
			{
				return this._OrganizationUser.Entity;
			}
			set
			{
				OrganizationUser previousValue = this._OrganizationUser.Entity;
				if (((previousValue != value) 
							|| (this._OrganizationUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrganizationUser.Entity = null;
						previousValue.UserProfile = null;
					}
					this._OrganizationUser.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("OrganizationUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_SealTemplate_UserProfile", Storage="_SealTemplate", ThisKey="UID", OtherKey="UID", DeleteRule="NO ACTION")]
		public EntitySet<SealTemplate> SealTemplate
		{
			get
			{
				return this._SealTemplate;
			}
			set
			{
				this._SealTemplate.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserProfile_UserProfile", Storage="_CreatorUserProfile", ThisKey="Creator", OtherKey="UID", IsForeignKey=true)]
		public UserProfile CreatorUserProfile
		{
			get
			{
				return this._CreatorUserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._CreatorUserProfile.Entity;
				if (((previousValue != value) 
							|| (this._CreatorUserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorUserProfile.Entity = null;
						previousValue.UserProfile_UserProfile.Remove(this);
					}
					this._CreatorUserProfile.Entity = value;
					if ((value != null))
					{
						value.UserProfile_UserProfile.Add(this);
						this._Creator = value.UID;
					}
					else
					{
						this._Creator = default(Nullable<int>);
					}
					this.SendPropertyChanged("CreatorUserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserProfile_UserProfile", Storage="_UserProfile_UserProfile", ThisKey="UID", OtherKey="Creator", DeleteRule="NO ACTION")]
		public EntitySet<UserProfile> UserProfile_UserProfile
		{
			get
			{
				return this._UserProfile_UserProfile;
			}
			set
			{
				this._UserProfile_UserProfile.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_UserProfile", Storage="_UserRole", ThisKey="UID", OtherKey="UID", DeleteRule="CASCADE")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Contract(Contract entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ContractingUser(ContractingUser entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ContractingUser(ContractingUser entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ContractNoteRequest(ContractNoteRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ContractNoteRequest(ContractNoteRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ContractSealRequest(ContractSealRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ContractSealRequest(ContractSealRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ContractSignaturePositionRequest(ContractSignaturePositionRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ContractSignaturePositionRequest(ContractSignaturePositionRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ContractSignatureRequest(ContractSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ContractSignatureRequest(ContractSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ContractUserSignatureRequest(ContractUserSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ContractUserSignatureRequest(ContractUserSignatureRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_IdentityCert(IdentityCert entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_IdentityCert(IdentityCert entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_SealTemplate(SealTemplate entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_SealTemplate(SealTemplate entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserProfile_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.CreatorUserProfile = this;
		}
		
		private void detach_UserProfile_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.CreatorUserProfile = null;
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _RoleID;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<UserRoleDefinition> _UserRoleDefinition;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UserRole()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._UserRoleDefinition = default(EntityRef<UserRoleDefinition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._UserRoleDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_UserProfile", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_UserRoleDefinition", Storage="_UserRoleDefinition", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public UserRoleDefinition UserRoleDefinition
		{
			get
			{
				return this._UserRoleDefinition.Entity;
			}
			set
			{
				UserRoleDefinition previousValue = this._UserRoleDefinition.Entity;
				if (((previousValue != value) 
							|| (this._UserRoleDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRoleDefinition.Entity = null;
						previousValue.UserRole.Remove(this);
					}
					this._UserRoleDefinition.Entity = value;
					if ((value != null))
					{
						value.UserRole.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("UserRoleDefinition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleDefinition")]
	public partial class UserRoleDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Role;
		
		private EntitySet<UserRole> _UserRole;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public UserRoleDefinition()
		{
			this._UserRole = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRole), new Action<UserRole>(this.detach_UserRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_UserRoleDefinition", Storage="_UserRole", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<UserRole> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				this._UserRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserRoleDefinition = this;
		}
		
		private void detach_UserRole(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserRoleDefinition = null;
		}
	}
}
#pragma warning restore 1591
